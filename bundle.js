/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},57:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,'.EventsSlider-module__sliderContainer--mbNLV{position:relative;display:flex;align-items:center;margin-top:3em;margin-bottom:2em}.EventsSlider-module__swiper--laNrN{width:90%}.EventsSlider-module__swiper-slide--bvXI_{width:120px}.EventsSlider-module__swiper-slide--bvXI_ .EventsSlider-module__date--iBksO{font-family:"BebasNeue-Regular";color:#3877ee;font-size:25px}.EventsSlider-module__swiper-slide--bvXI_ .EventsSlider-module__text--c0pgo{color:#42567a;font-size:20px}.EventsSlider-module__slideButton--Z40iZ{position:absolute;top:calc(50% - 20px);margin:1em;display:grid;align-items:center;justify-content:center;width:40px;height:40px;border-radius:50%;border:none;background-color:#fff;box-shadow:0px 0px 10px 0px rgba(56,119,238,.1019607843);cursor:pointer;transition:transform .2s}.EventsSlider-module__slideButton--disabled--Z9Toj{transform:scale(0)}.EventsSlider-module__slideButton--Z40iZ:first-child{left:0}.EventsSlider-module__slideButton--Z40iZ:last-child{right:0}.EventsSlider-module__themeTitle--gGWup{display:none;border-bottom:1px solid rgba(66,86,122,.5019607843);width:calc(100% - 4em)}.EventsSlider-module__themeTitle--gGWup h3{color:#434d6e}@media(max-width: 1280px){.EventsSlider-module__swiper--laNrN{width:88%}}@media(max-width: 1050px){.EventsSlider-module__swiper--laNrN{width:85%}.EventsSlider-module__swiper-slide--bvXI_ .EventsSlider-module__text--c0pgo{font-size:16px}}@media(max-width: 720px){.EventsSlider-module__sliderContainer--mbNLV{display:grid;justify-items:center}.EventsSlider-module__swiper--laNrN{width:100%;height:150px}.EventsSlider-module__slideButton--Z40iZ{display:none}.EventsSlider-module__themeTitle--gGWup{display:grid}}',"",{version:3,sources:["webpack://./src/components/history-block/ui/events-slider/EventsSlider.module.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,6CACI,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,cAAA,CACA,iBAAA,CAEJ,oCACI,SAAA,CACA,0CACI,WAAA,CACA,4EAEI,+BAAA,CACA,aCXC,CDYD,cAAA,CAEJ,4EACI,aCpBC,CDqBD,cAAA,CAIZ,yCACI,iBAAA,CACA,oBAAA,CACA,UAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,WAAA,CACA,qBAAA,CACA,wDAAA,CACA,cAAA,CACA,wBAAA,CACA,mDACI,kBAAA,CAEJ,qDACI,MAAA,CAEJ,oDACI,OAAA,CAGR,wCACI,YAAA,CACA,mDAAA,CACA,sBAAA,CACA,2CACI,aAAA,CAKR,0BACI,oCACI,SAAA,CAAA,CAGR,0BACI,oCACI,SAAA,CAEI,4EACI,cAAA,CAAA,CAMhB,yBACI,6CACI,YAAA,CACA,oBAAA,CAEJ,oCACI,UAAA,CACA,YAAA,CAEJ,yCACI,YAAA,CAEJ,wCACI,YAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n.sliderContainer{\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top: 3em;\r\n    margin-bottom: 2em;\r\n}\r\n.swiper{\r\n    width: 90%;\r\n    &-slide{\r\n        width: 120px;\r\n        .date{\r\n\r\n            font-family: \"BebasNeue-Regular\";\r\n            color: $date_color;\r\n            font-size: 25px;\r\n        }\r\n        .text{\r\n            color: $line_color;\r\n            font-size: 20px;\r\n        }\r\n    }\r\n}\r\n.slideButton{\r\n    position: absolute;\r\n    top: calc(50% - 20px);\r\n    margin: 1em;\r\n    display: grid;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 40px;\r\n    height: 40px;\r\n    border-radius: 50%;\r\n    border: none;\r\n    background-color: #ffffff;\r\n    box-shadow: 0px 0px 10px 0px #3877EE1A;\r\n    cursor: pointer;\r\n    transition: transform .2s;\r\n    &--disabled{\r\n        transform: scale(0);\r\n    }\r\n    &:first-child{\r\n        left: 0\r\n    }\r\n    &:last-child{\r\n        right: 0\r\n    }\r\n}\r\n.themeTitle{\r\n    display: none;\r\n    border-bottom: 1px solid $line_color_medium;\r\n    width: calc(100% - 4em);\r\n    h3{\r\n        color: #434D6E;\r\n    }\r\n}\r\n\r\n\r\n@media (max-width: 1280px) {\r\n    .swiper{\r\n        width: 88%;\r\n    }\r\n}\r\n@media (max-width: 1050px) {\r\n    .swiper{\r\n        width: 85%;\r\n        &-slide{\r\n            .text{\r\n                font-size: 16px;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@media (max-width: 720px) {\r\n    .sliderContainer{\r\n        display: grid;\r\n        justify-items: center;\r\n    }\r\n    .swiper{\r\n        width: 100%;\r\n        height: 150px;\r\n    }\r\n    .slideButton{\r\n        display: none;\r\n    }\r\n    .themeTitle{\r\n        display: grid;\r\n    }\r\n}\r\n","$line_color: #42567A;\r\n$line_color_medium: #42567A80;\r\n$line_color_light: #42567A30;\r\n$primary_color1: #5D5FEF;\r\n$primary_color2: #EF5DA8;\r\n$date_color: #3877EE"],sourceRoot:""}]),l.locals={sliderContainer:"EventsSlider-module__sliderContainer--mbNLV",swiper:"EventsSlider-module__swiper--laNrN","swiper-slide":"EventsSlider-module__swiper-slide--bvXI_",swiperSlide:"EventsSlider-module__swiper-slide--bvXI_",date:"EventsSlider-module__date--iBksO",text:"EventsSlider-module__text--c0pgo",slideButton:"EventsSlider-module__slideButton--Z40iZ","slideButton--disabled":"EventsSlider-module__slideButton--disabled--Z9Toj",slideButtonDisabled:"EventsSlider-module__slideButton--disabled--Z9Toj",themeTitle:"EventsSlider-module__themeTitle--gGWup"};const o=l},72:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},l=[],o=0;o<e.length;o++){var s=e[o],u=r.base?s[0]+r.base:s[0],c=a[u]||0,d="".concat(u," ").concat(c);a[u]=c+1;var f=n(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=i(p,r);r.byIndex=o,t.splice(o,0,{identifier:d,updater:h,references:1})}l.push(d)}return l}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var l=0;l<a.length;l++){var o=n(a[l]);t[o].references--}for(var s=r(e,i),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=s}}},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},221:(e,t,n)=>{"use strict";var r=n(540);function i(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function a(){}var l={d:{f:a,r:function(){throw Error(i(522))},D:a,C:a,L:a,m:a,X:a,S:a,M:a},p:0,findDOMNode:null},o=Symbol.for("react.portal"),s=r.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function u(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(i(299));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:o,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.flushSync=function(e){var t=s.T,n=l.p;try{if(s.T=null,l.p=2,e)return e()}finally{s.T=t,l.p=n,l.d.f()}},t.preconnect=function(e,t){"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){"string"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if("string"==typeof e&&t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin),i="string"==typeof t.integrity?t.integrity:void 0,a="string"==typeof t.fetchPriority?t.fetchPriority:void 0;"style"===n?l.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:r,integrity:i,fetchPriority:a}):"script"===n&&l.d.X(e,{crossOrigin:r,integrity:i,fetchPriority:a,nonce:"string"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if("string"==typeof e)if("object"==typeof t&&null!==t){if(null==t.as||"script"===t.as){var n=u(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if("string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as){var n=t.as,r=u(n,t.crossOrigin);l.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if("string"==typeof e)if(t){var n=u(t.as,t.crossOrigin);l.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:n,integrity:"string"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,n){return s.H.useFormState(e,t,n)},t.useFormStatus=function(){return s.H.useHostTransitionStatus()},t.version="19.1.0"},247:(e,t,n)=>{"use strict";var r=n(982),i=n(540),a=n(961);function l(e){var t="https://react.dev/errors/"+e;if(1<arguments.length){t+="?args[]="+encodeURIComponent(arguments[1]);for(var n=2;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n])}return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}function o(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function s(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function u(e){if(o(e)!==e)throw Error(l(188))}function c(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e;for(e=e.child;null!==e;){if(null!==(t=c(e)))return t;e=e.sibling}return null}var d=Object.assign,f=Symbol.for("react.element"),p=Symbol.for("react.transitional.element"),h=Symbol.for("react.portal"),m=Symbol.for("react.fragment"),g=Symbol.for("react.strict_mode"),v=Symbol.for("react.profiler"),y=Symbol.for("react.provider"),b=Symbol.for("react.consumer"),_=Symbol.for("react.context"),w=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),C=Symbol.for("react.suspense_list"),S=Symbol.for("react.memo"),x=Symbol.for("react.lazy");Symbol.for("react.scope");var k=Symbol.for("react.activity");Symbol.for("react.legacy_hidden"),Symbol.for("react.tracing_marker");var E=Symbol.for("react.memo_cache_sentinel");Symbol.for("react.view_transition");var T=Symbol.iterator;function P(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var M=Symbol.for("react.client.reference");function z(e){if(null==e)return null;if("function"==typeof e)return e.$$typeof===M?null:e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case m:return"Fragment";case v:return"Profiler";case g:return"StrictMode";case A:return"Suspense";case C:return"SuspenseList";case k:return"Activity"}if("object"==typeof e)switch(e.$$typeof){case h:return"Portal";case _:return(e.displayName||"Context")+".Provider";case b:return(e._context.displayName||"Context")+".Consumer";case w:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case S:return null!==(t=e.displayName||null)?t:z(e.type)||"Memo";case x:t=e._payload,e=e._init;try{return z(e(t))}catch(e){}}return null}var O=Array.isArray,L=i.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,N=a.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,I={pending:!1,data:null,method:null,action:null},D=[],B=-1;function F(e){return{current:e}}function R(e){0>B||(e.current=D[B],D[B]=null,B--)}function $(e,t){B++,D[B]=e.current,e.current=t}var j=F(null),H=F(null),V=F(null),U=F(null);function G(e,t){switch($(V,t),$(H,e),$(j,null),t.nodeType){case 9:case 11:e=(e=t.documentElement)&&(e=e.namespaceURI)?rd(e):0;break;default:if(e=t.tagName,t=t.namespaceURI)e=id(t=rd(t),e);else switch(e){case"svg":e=1;break;case"math":e=2;break;default:e=0}}R(j),$(j,e)}function q(){R(j),R(H),R(V)}function W(e){null!==e.memoizedState&&$(U,e);var t=j.current,n=id(t,e.type);t!==n&&($(H,e),$(j,n))}function Y(e){H.current===e&&(R(j),R(H)),U.current===e&&(R(U),Wd._currentValue=I)}var Q=Object.prototype.hasOwnProperty,X=r.unstable_scheduleCallback,K=r.unstable_cancelCallback,J=r.unstable_shouldYield,Z=r.unstable_requestPaint,ee=r.unstable_now,te=r.unstable_getCurrentPriorityLevel,ne=r.unstable_ImmediatePriority,re=r.unstable_UserBlockingPriority,ie=r.unstable_NormalPriority,ae=r.unstable_LowPriority,le=r.unstable_IdlePriority,oe=r.log,se=r.unstable_setDisableYieldValue,ue=null,ce=null;function de(e){if("function"==typeof oe&&se(e),ce&&"function"==typeof ce.setStrictMode)try{ce.setStrictMode(ue,e)}catch(e){}}var fe=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(pe(e)/he|0)|0},pe=Math.log,he=Math.LN2,me=256,ge=4194304;function ve(e){var t=42&e;if(0!==t)return t;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 16777216:case 33554432:return 62914560&e;case 67108864:return 67108864;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 0;default:return e}}function ye(e,t,n){var r=e.pendingLanes;if(0===r)return 0;var i=0,a=e.suspendedLanes,l=e.pingedLanes;e=e.warmLanes;var o=134217727&r;return 0!==o?0!=(r=o&~a)?i=ve(r):0!=(l&=o)?i=ve(l):n||0!=(n=o&~e)&&(i=ve(n)):0!=(o=r&~a)?i=ve(o):0!==l?i=ve(l):n||0!=(n=r&~e)&&(i=ve(n)),0===i?0:0===t||t===i||t&a||!((a=i&-i)>=(n=t&-t)||32===a&&4194048&n)?i:t}function be(e,t){return!(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&t)}function _e(e,t){switch(e){case 1:case 2:case 4:case 8:case 64:return t+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function we(){var e=me;return!(4194048&(me<<=1))&&(me=256),e}function Ae(){var e=ge;return!(62914560&(ge<<=1))&&(ge=4194304),e}function Ce(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Se(e,t){e.pendingLanes|=t,268435456!==t&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function xe(e,t,n){e.pendingLanes|=t,e.suspendedLanes&=~t;var r=31-fe(t);e.entangledLanes|=t,e.entanglements[r]=1073741824|e.entanglements[r]|4194090&n}function ke(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-fe(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}function Ee(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:e=128;break;case 268435456:e=134217728;break;default:e=0}return e}function Te(e){return 2<(e&=-e)?8<e?134217727&e?32:268435456:8:2}function Pe(){var e=N.p;return 0!==e?e:void 0===(e=window.event)?32:of(e.type)}var Me=Math.random().toString(36).slice(2),ze="__reactFiber$"+Me,Oe="__reactProps$"+Me,Le="__reactContainer$"+Me,Ne="__reactEvents$"+Me,Ie="__reactListeners$"+Me,De="__reactHandles$"+Me,Be="__reactResources$"+Me,Fe="__reactMarker$"+Me;function Re(e){delete e[ze],delete e[Oe],delete e[Ne],delete e[Ie],delete e[De]}function $e(e){var t=e[ze];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Le]||n[ze]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=yd(e);null!==e;){if(n=e[ze])return n;e=yd(e)}return t}n=(e=n).parentNode}return null}function je(e){if(e=e[ze]||e[Le]){var t=e.tag;if(5===t||6===t||13===t||26===t||27===t||3===t)return e}return null}function He(e){var t=e.tag;if(5===t||26===t||27===t||6===t)return e.stateNode;throw Error(l(33))}function Ve(e){var t=e[Be];return t||(t=e[Be]={hoistableStyles:new Map,hoistableScripts:new Map}),t}function Ue(e){e[Fe]=!0}var Ge=new Set,qe={};function We(e,t){Ye(e,t),Ye(e+"Capture",t)}function Ye(e,t){for(qe[e]=t,e=0;e<t.length;e++)Ge.add(t[e])}var Qe,Xe,Ke=RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"),Je={},Ze={};function et(e,t,n){if(i=t,Q.call(Ze,i)||!Q.call(Je,i)&&(Ke.test(i)?Ze[i]=!0:(Je[i]=!0,0)))if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":return void e.removeAttribute(t);case"boolean":var r=t.toLowerCase().slice(0,5);if("data-"!==r&&"aria-"!==r)return void e.removeAttribute(t)}e.setAttribute(t,""+n)}var i}function tt(e,t,n){if(null===n)e.removeAttribute(t);else{switch(typeof n){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(t)}e.setAttribute(t,""+n)}}function nt(e,t,n,r){if(null===r)e.removeAttribute(n);else{switch(typeof r){case"undefined":case"function":case"symbol":case"boolean":return void e.removeAttribute(n)}e.setAttributeNS(t,n,""+r)}}function rt(e){if(void 0===Qe)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Qe=t&&t[1]||"",Xe=-1<e.stack.indexOf("\n    at")?" (<anonymous>)":-1<e.stack.indexOf("@")?"@unknown:0:0":""}return"\n"+Qe+e+Xe}var it=!1;function at(e,t){if(!e||it)return"";it=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(t){var n=function(){throw Error()};if(Object.defineProperty(n.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}}else{try{throw Error()}catch(e){r=e}(n=e())&&"function"==typeof n.catch&&n.catch((function(){}))}}catch(e){if(e&&r&&"string"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName="DetermineComponentFrameRoot";var i=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,"name");i&&i.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,"name",{value:"DetermineComponentFrameRoot"});var a=r.DetermineComponentFrameRoot(),l=a[0],o=a[1];if(l&&o){var s=l.split("\n"),u=o.split("\n");for(i=r=0;r<s.length&&!s[r].includes("DetermineComponentFrameRoot");)r++;for(;i<u.length&&!u[i].includes("DetermineComponentFrameRoot");)i++;if(r===s.length||i===u.length)for(r=s.length-1,i=u.length-1;1<=r&&0<=i&&s[r]!==u[i];)i--;for(;1<=r&&0<=i;r--,i--)if(s[r]!==u[i]){if(1!==r||1!==i)do{if(r--,0>--i||s[r]!==u[i]){var c="\n"+s[r].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=r&&0<=i);break}}}finally{it=!1,Error.prepareStackTrace=n}return(n=e?e.displayName||e.name:"")?rt(n):""}function lt(e){switch(e.tag){case 26:case 27:case 5:return rt(e.type);case 16:return rt("Lazy");case 13:return rt("Suspense");case 19:return rt("SuspenseList");case 0:case 15:return at(e.type,!1);case 11:return at(e.type.render,!1);case 1:return at(e.type,!0);case 31:return rt("Activity");default:return""}}function ot(e){try{var t="";do{t+=lt(e),e=e.return}while(e);return t}catch(e){return"\nError generating stack: "+e.message+"\n"+e.stack}}function st(e){switch(typeof e){case"bigint":case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function ut(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ct(e){e._valueTracker||(e._valueTracker=function(e){var t=ut(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function dt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ut(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ft(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var pt=/[\n"\\]/g;function ht(e){return e.replace(pt,(function(e){return"\\"+e.charCodeAt(0).toString(16)+" "}))}function mt(e,t,n,r,i,a,l,o){e.name="",null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l?e.type=l:e.removeAttribute("type"),null!=t?"number"===l?(0===t&&""===e.value||e.value!=t)&&(e.value=""+st(t)):e.value!==""+st(t)&&(e.value=""+st(t)):"submit"!==l&&"reset"!==l||e.removeAttribute("value"),null!=t?vt(e,l,st(t)):null!=n?vt(e,l,st(n)):null!=r&&e.removeAttribute("value"),null==i&&null!=a&&(e.defaultChecked=!!a),null!=i&&(e.checked=i&&"function"!=typeof i&&"symbol"!=typeof i),null!=o&&"function"!=typeof o&&"symbol"!=typeof o&&"boolean"!=typeof o?e.name=""+st(o):e.removeAttribute("name")}function gt(e,t,n,r,i,a,l,o){if(null!=a&&"function"!=typeof a&&"symbol"!=typeof a&&"boolean"!=typeof a&&(e.type=a),null!=t||null!=n){if(("submit"===a||"reset"===a)&&null==t)return;n=null!=n?""+st(n):"",t=null!=t?""+st(t):n,o||t===e.value||(e.value=t),e.defaultValue=t}r="function"!=typeof(r=null!=r?r:i)&&"symbol"!=typeof r&&!!r,e.checked=o?e.checked:!!r,e.defaultChecked=!!r,null!=l&&"function"!=typeof l&&"symbol"!=typeof l&&"boolean"!=typeof l&&(e.name=l)}function vt(e,t,n){"number"===t&&ft(e.ownerDocument)===e||e.defaultValue===""+n||(e.defaultValue=""+n)}function yt(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+st(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function bt(e,t,n){null==t||((t=""+st(t))!==e.value&&(e.value=t),null!=n)?e.defaultValue=null!=n?""+st(n):"":e.defaultValue!==t&&(e.defaultValue=t)}function _t(e,t,n,r){if(null==t){if(null!=r){if(null!=n)throw Error(l(92));if(O(r)){if(1<r.length)throw Error(l(93));r=r[0]}n=r}null==n&&(n=""),t=n}n=st(t),e.defaultValue=n,(r=e.textContent)===n&&""!==r&&null!==r&&(e.value=r)}function wt(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var At=new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));function Ct(e,t,n){var r=0===t.indexOf("--");null==n||"boolean"==typeof n||""===n?r?e.setProperty(t,""):"float"===t?e.cssFloat="":e[t]="":r?e.setProperty(t,n):"number"!=typeof n||0===n||At.has(t)?"float"===t?e.cssFloat=n:e[t]=(""+n).trim():e[t]=n+"px"}function St(e,t,n){if(null!=t&&"object"!=typeof t)throw Error(l(62));if(e=e.style,null!=n){for(var r in n)!n.hasOwnProperty(r)||null!=t&&t.hasOwnProperty(r)||(0===r.indexOf("--")?e.setProperty(r,""):"float"===r?e.cssFloat="":e[r]="");for(var i in t)r=t[i],t.hasOwnProperty(i)&&n[i]!==r&&Ct(e,i,r)}else for(var a in t)t.hasOwnProperty(a)&&Ct(e,a,t[a])}function xt(e){if(-1===e.indexOf("-"))return!1;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var kt=new Map([["acceptCharset","accept-charset"],["htmlFor","for"],["httpEquiv","http-equiv"],["crossOrigin","crossorigin"],["accentHeight","accent-height"],["alignmentBaseline","alignment-baseline"],["arabicForm","arabic-form"],["baselineShift","baseline-shift"],["capHeight","cap-height"],["clipPath","clip-path"],["clipRule","clip-rule"],["colorInterpolation","color-interpolation"],["colorInterpolationFilters","color-interpolation-filters"],["colorProfile","color-profile"],["colorRendering","color-rendering"],["dominantBaseline","dominant-baseline"],["enableBackground","enable-background"],["fillOpacity","fill-opacity"],["fillRule","fill-rule"],["floodColor","flood-color"],["floodOpacity","flood-opacity"],["fontFamily","font-family"],["fontSize","font-size"],["fontSizeAdjust","font-size-adjust"],["fontStretch","font-stretch"],["fontStyle","font-style"],["fontVariant","font-variant"],["fontWeight","font-weight"],["glyphName","glyph-name"],["glyphOrientationHorizontal","glyph-orientation-horizontal"],["glyphOrientationVertical","glyph-orientation-vertical"],["horizAdvX","horiz-adv-x"],["horizOriginX","horiz-origin-x"],["imageRendering","image-rendering"],["letterSpacing","letter-spacing"],["lightingColor","lighting-color"],["markerEnd","marker-end"],["markerMid","marker-mid"],["markerStart","marker-start"],["overlinePosition","overline-position"],["overlineThickness","overline-thickness"],["paintOrder","paint-order"],["panose-1","panose-1"],["pointerEvents","pointer-events"],["renderingIntent","rendering-intent"],["shapeRendering","shape-rendering"],["stopColor","stop-color"],["stopOpacity","stop-opacity"],["strikethroughPosition","strikethrough-position"],["strikethroughThickness","strikethrough-thickness"],["strokeDasharray","stroke-dasharray"],["strokeDashoffset","stroke-dashoffset"],["strokeLinecap","stroke-linecap"],["strokeLinejoin","stroke-linejoin"],["strokeMiterlimit","stroke-miterlimit"],["strokeOpacity","stroke-opacity"],["strokeWidth","stroke-width"],["textAnchor","text-anchor"],["textDecoration","text-decoration"],["textRendering","text-rendering"],["transformOrigin","transform-origin"],["underlinePosition","underline-position"],["underlineThickness","underline-thickness"],["unicodeBidi","unicode-bidi"],["unicodeRange","unicode-range"],["unitsPerEm","units-per-em"],["vAlphabetic","v-alphabetic"],["vHanging","v-hanging"],["vIdeographic","v-ideographic"],["vMathematical","v-mathematical"],["vectorEffect","vector-effect"],["vertAdvY","vert-adv-y"],["vertOriginX","vert-origin-x"],["vertOriginY","vert-origin-y"],["wordSpacing","word-spacing"],["writingMode","writing-mode"],["xmlnsXlink","xmlns:xlink"],["xHeight","x-height"]]),Et=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;function Tt(e){return Et.test(""+e)?"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')":e}var Pt=null;function Mt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var zt=null,Ot=null;function Lt(e){var t=je(e);if(t&&(e=t.stateNode)){var n=e[Oe]||null;e:switch(e=t.stateNode,t.type){case"input":if(mt(e,n.value,n.defaultValue,n.defaultValue,n.checked,n.defaultChecked,n.type,n.name),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll('input[name="'+ht(""+t)+'"][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=r[Oe]||null;if(!i)throw Error(l(90));mt(r,i.value,i.defaultValue,i.defaultValue,i.checked,i.defaultChecked,i.type,i.name)}}for(t=0;t<n.length;t++)(r=n[t]).form===e.form&&dt(r)}break e;case"textarea":bt(e,n.value,n.defaultValue);break e;case"select":null!=(t=n.value)&&yt(e,!!n.multiple,t,!1)}}}var Nt=!1;function It(e,t,n){if(Nt)return e(t,n);Nt=!0;try{return e(t)}finally{if(Nt=!1,(null!==zt||null!==Ot)&&($u(),zt&&(t=zt,e=Ot,Ot=zt=null,Lt(t),e)))for(t=0;t<e.length;t++)Lt(e[t])}}function Dt(e,t){var n=e.stateNode;if(null===n)return null;var r=n[Oe]||null;if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Bt=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),Ft=!1;if(Bt)try{var Rt={};Object.defineProperty(Rt,"passive",{get:function(){Ft=!0}}),window.addEventListener("test",Rt,Rt),window.removeEventListener("test",Rt,Rt)}catch(e){Ft=!1}var $t=null,jt=null,Ht=null;function Vt(){if(Ht)return Ht;var e,t,n=jt,r=n.length,i="value"in $t?$t.value:$t.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var l=r-e;for(t=1;t<=l&&n[r-t]===i[a-t];t++);return Ht=i.slice(e,1<t?1-t:void 0)}function Ut(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function Gt(){return!0}function qt(){return!1}function Wt(e){function t(t,n,r,i,a){for(var l in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(l)&&(t=e[l],this[l]=t?t(i):i[l]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?Gt:qt,this.isPropagationStopped=qt,this}return d(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Gt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Gt)},persist:function(){},isPersistent:Gt}),t}var Yt,Qt,Xt,Kt={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Jt=Wt(Kt),Zt=d({},Kt,{view:0,detail:0}),en=Wt(Zt),tn=d({},Zt,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Xt&&(Xt&&"mousemove"===e.type?(Yt=e.screenX-Xt.screenX,Qt=e.screenY-Xt.screenY):Qt=Yt=0,Xt=e),Yt)},movementY:function(e){return"movementY"in e?e.movementY:Qt}}),nn=Wt(tn),rn=Wt(d({},tn,{dataTransfer:0})),an=Wt(d({},Zt,{relatedTarget:0})),ln=Wt(d({},Kt,{animationName:0,elapsedTime:0,pseudoElement:0})),on=Wt(d({},Kt,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),sn=Wt(d({},Kt,{data:0})),un={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},cn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function fn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=dn[e])&&!!t[e]}function pn(){return fn}var hn=Wt(d({},Zt,{key:function(e){if(e.key){var t=un[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ut(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?cn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:pn,charCode:function(e){return"keypress"===e.type?Ut(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ut(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),mn=Wt(d({},tn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),gn=Wt(d({},Zt,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:pn})),vn=Wt(d({},Kt,{propertyName:0,elapsedTime:0,pseudoElement:0})),yn=Wt(d({},tn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),bn=Wt(d({},Kt,{newState:0,oldState:0})),_n=[9,13,27,32],wn=Bt&&"CompositionEvent"in window,An=null;Bt&&"documentMode"in document&&(An=document.documentMode);var Cn=Bt&&"TextEvent"in window&&!An,Sn=Bt&&(!wn||An&&8<An&&11>=An),xn=String.fromCharCode(32),kn=!1;function En(e,t){switch(e){case"keyup":return-1!==_n.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Tn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Pn=!1,Mn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Mn[e.type]:"textarea"===t}function On(e,t,n,r){zt?Ot?Ot.push(r):Ot=[r]:zt=r,0<(t=Vc(t,"onChange")).length&&(n=new Jt("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Ln=null,Nn=null;function In(e){Ic(e,0)}function Dn(e){if(dt(He(e)))return e}function Bn(e,t){if("change"===e)return t}var Fn=!1;if(Bt){var Rn;if(Bt){var $n="oninput"in document;if(!$n){var jn=document.createElement("div");jn.setAttribute("oninput","return;"),$n="function"==typeof jn.oninput}Rn=$n}else Rn=!1;Fn=Rn&&(!document.documentMode||9<document.documentMode)}function Hn(){Ln&&(Ln.detachEvent("onpropertychange",Vn),Nn=Ln=null)}function Vn(e){if("value"===e.propertyName&&Dn(Nn)){var t=[];On(t,Nn,e,Mt(e)),It(In,t)}}function Un(e,t,n){"focusin"===e?(Hn(),Nn=n,(Ln=t).attachEvent("onpropertychange",Vn)):"focusout"===e&&Hn()}function Gn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Dn(Nn)}function qn(e,t){if("click"===e)return Dn(t)}function Wn(e,t){if("input"===e||"change"===e)return Dn(t)}var Yn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function Qn(e,t){if(Yn(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!Q.call(t,i)||!Yn(e[i],t[i]))return!1}return!0}function Xn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Xn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Xn(r)}}function Jn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?Jn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function Zn(e){for(var t=ft((e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window).document);t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=ft((e=t.contentWindow).document)}return t}function er(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var tr=Bt&&"documentMode"in document&&11>=document.documentMode,nr=null,rr=null,ir=null,ar=!1;function lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;ar||null==nr||nr!==ft(r)||(r="selectionStart"in(r=nr)&&er(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},ir&&Qn(ir,r)||(ir=r,0<(r=Vc(rr,"onSelect")).length&&(t=new Jt("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=nr)))}function or(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var sr={animationend:or("Animation","AnimationEnd"),animationiteration:or("Animation","AnimationIteration"),animationstart:or("Animation","AnimationStart"),transitionrun:or("Transition","TransitionRun"),transitionstart:or("Transition","TransitionStart"),transitioncancel:or("Transition","TransitionCancel"),transitionend:or("Transition","TransitionEnd")},ur={},cr={};function dr(e){if(ur[e])return ur[e];if(!sr[e])return e;var t,n=sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in cr)return ur[e]=n[t];return e}Bt&&(cr=document.createElement("div").style,"AnimationEvent"in window||(delete sr.animationend.animation,delete sr.animationiteration.animation,delete sr.animationstart.animation),"TransitionEvent"in window||delete sr.transitionend.transition);var fr=dr("animationend"),pr=dr("animationiteration"),hr=dr("animationstart"),mr=dr("transitionrun"),gr=dr("transitionstart"),vr=dr("transitioncancel"),yr=dr("transitionend"),br=new Map,_r="abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function wr(e,t){br.set(e,t),We(t,[e])}_r.push("scrollEnd");var Ar=new WeakMap;function Cr(e,t){if("object"==typeof e&&null!==e){var n=Ar.get(e);return void 0!==n?n:(t={value:e,source:t,stack:ot(t)},Ar.set(e,t),t)}return{value:e,source:t,stack:ot(t)}}var Sr=[],xr=0,kr=0;function Er(){for(var e=xr,t=kr=xr=0;t<e;){var n=Sr[t];Sr[t++]=null;var r=Sr[t];Sr[t++]=null;var i=Sr[t];Sr[t++]=null;var a=Sr[t];if(Sr[t++]=null,null!==r&&null!==i){var l=r.pending;null===l?i.next=i:(i.next=l.next,l.next=i),r.pending=i}0!==a&&zr(n,i,a)}}function Tr(e,t,n,r){Sr[xr++]=e,Sr[xr++]=t,Sr[xr++]=n,Sr[xr++]=r,kr|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function Pr(e,t,n,r){return Tr(e,t,n,r),Or(e)}function Mr(e,t){return Tr(e,null,null,t),Or(e)}function zr(e,t,n){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n);for(var i=!1,a=e.return;null!==a;)a.childLanes|=n,null!==(r=a.alternate)&&(r.childLanes|=n),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(i=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,i&&null!==t&&(i=31-fe(n),null===(r=(e=a.hiddenUpdates)[i])?e[i]=[t]:r.push(t),t.lane=536870912|n),a):null}function Or(e){if(50<zu)throw zu=0,Ou=null,Error(l(185));for(var t=e.return;null!==t;)t=(e=t).return;return 3===e.tag?e.stateNode:null}var Lr={};function Nr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ir(e,t,n,r){return new Nr(e,t,n,r)}function Dr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Br(e,t){var n=e.alternate;return null===n?((n=Ir(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=65011712&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.refCleanup=e.refCleanup,n}function Fr(e,t){e.flags&=65011714;var n=e.alternate;return null===n?(e.childLanes=0,e.lanes=t,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type,t=n.dependencies,e.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),e}function Rr(e,t,n,r,i,a){var o=0;if(r=e,"function"==typeof e)Dr(e)&&(o=1);else if("string"==typeof e)o=function(e,t,n){if(1===n||null!=t.itemProp)return!1;switch(e){case"meta":case"title":return!0;case"style":if("string"!=typeof t.precedence||"string"!=typeof t.href||""===t.href)break;return!0;case"link":if("string"!=typeof t.rel||"string"!=typeof t.href||""===t.href||t.onLoad||t.onError)break;return"stylesheet"!==t.rel||(e=t.disabled,"string"==typeof t.precedence&&null==e);case"script":if(t.async&&"function"!=typeof t.async&&"symbol"!=typeof t.async&&!t.onLoad&&!t.onError&&t.src&&"string"==typeof t.src)return!0}return!1}(e,n,j.current)?26:"html"===e||"head"===e||"body"===e?27:5;else e:switch(e){case k:return(e=Ir(31,n,t,i)).elementType=k,e.lanes=a,e;case m:return $r(n.children,i,a,t);case g:o=8,i|=24;break;case v:return(e=Ir(12,n,t,2|i)).elementType=v,e.lanes=a,e;case A:return(e=Ir(13,n,t,i)).elementType=A,e.lanes=a,e;case C:return(e=Ir(19,n,t,i)).elementType=C,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case y:case _:o=10;break e;case b:o=9;break e;case w:o=11;break e;case S:o=14;break e;case x:o=16,r=null;break e}o=29,n=Error(l(130,null===e?"null":typeof e,"")),r=null}return(t=Ir(o,n,t,i)).elementType=e,t.type=r,t.lanes=a,t}function $r(e,t,n,r){return(e=Ir(7,e,r,t)).lanes=n,e}function jr(e,t,n){return(e=Ir(6,e,null,t)).lanes=n,e}function Hr(e,t,n){return(t=Ir(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var Vr=[],Ur=0,Gr=null,qr=0,Wr=[],Yr=0,Qr=null,Xr=1,Kr="";function Jr(e,t){Vr[Ur++]=qr,Vr[Ur++]=Gr,Gr=e,qr=t}function Zr(e,t,n){Wr[Yr++]=Xr,Wr[Yr++]=Kr,Wr[Yr++]=Qr,Qr=e;var r=Xr;e=Kr;var i=32-fe(r)-1;r&=~(1<<i),n+=1;var a=32-fe(t)+i;if(30<a){var l=i-i%5;a=(r&(1<<l)-1).toString(32),r>>=l,i-=l,Xr=1<<32-fe(t)+i|n<<i|r,Kr=a+e}else Xr=1<<a|n<<i|r,Kr=e}function ei(e){null!==e.return&&(Jr(e,1),Zr(e,1,0))}function ti(e){for(;e===Gr;)Gr=Vr[--Ur],Vr[Ur]=null,qr=Vr[--Ur],Vr[Ur]=null;for(;e===Qr;)Qr=Wr[--Yr],Wr[Yr]=null,Kr=Wr[--Yr],Wr[Yr]=null,Xr=Wr[--Yr],Wr[Yr]=null}var ni=null,ri=null,ii=!1,ai=null,li=!1,oi=Error(l(519));function si(e){throw hi(Cr(Error(l(418,"")),e)),oi}function ui(e){var t=e.stateNode,n=e.type,r=e.memoizedProps;switch(t[ze]=e,t[Oe]=r,n){case"dialog":Dc("cancel",t),Dc("close",t);break;case"iframe":case"object":case"embed":Dc("load",t);break;case"video":case"audio":for(n=0;n<Lc.length;n++)Dc(Lc[n],t);break;case"source":Dc("error",t);break;case"img":case"image":case"link":Dc("error",t),Dc("load",t);break;case"details":Dc("toggle",t);break;case"input":Dc("invalid",t),gt(t,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),ct(t);break;case"select":Dc("invalid",t);break;case"textarea":Dc("invalid",t),_t(t,r.value,r.defaultValue,r.children),ct(t)}"string"!=typeof(n=r.children)&&"number"!=typeof n&&"bigint"!=typeof n||t.textContent===""+n||!0===r.suppressHydrationWarning||Qc(t.textContent,n)?(null!=r.popover&&(Dc("beforetoggle",t),Dc("toggle",t)),null!=r.onScroll&&Dc("scroll",t),null!=r.onScrollEnd&&Dc("scrollend",t),null!=r.onClick&&(t.onclick=Xc),t=!0):t=!1,t||si(e)}function ci(e){for(ni=e.return;ni;)switch(ni.tag){case 5:case 13:return void(li=!1);case 27:case 3:return void(li=!0);default:ni=ni.return}}function di(e){if(e!==ni)return!1;if(!ii)return ci(e),ii=!0,!1;var t,n=e.tag;if((t=3!==n&&27!==n)&&((t=5===n)&&(t=!("form"!==(t=e.type)&&"button"!==t)||ad(e.type,e.memoizedProps)),t=!t),t&&ri&&si(e),ci(e),13===n){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,n=0;e;){if(8===e.nodeType)if("/$"===(t=e.data)){if(0===n){ri=gd(e.nextSibling);break e}n--}else"$"!==t&&"$!"!==t&&"$?"!==t||n++;e=e.nextSibling}ri=null}}else 27===n?(n=ri,fd(e.type)?(e=vd,vd=null,ri=e):ri=n):ri=ni?gd(e.stateNode.nextSibling):null;return!0}function fi(){ri=ni=null,ii=!1}function pi(){var e=ai;return null!==e&&(null===yu?yu=e:yu.push.apply(yu,e),ai=null),e}function hi(e){null===ai?ai=[e]:ai.push(e)}var mi=F(null),gi=null,vi=null;function yi(e,t,n){$(mi,t._currentValue),t._currentValue=n}function bi(e){e._currentValue=mi.current,R(mi)}function _i(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function wi(e,t,n,r){var i=e.child;for(null!==i&&(i.return=e);null!==i;){var a=i.dependencies;if(null!==a){var o=i.child;a=a.firstContext;e:for(;null!==a;){var s=a;a=i;for(var u=0;u<t.length;u++)if(s.context===t[u]){a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),_i(a.return,n,e),r||(o=null);break e}a=s.next}}else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(a=o.alternate)&&(a.lanes|=n),_i(o,n,e),o=null}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===e){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}}function Ai(e,t,n,r){e=null;for(var i=t,a=!1;null!==i;){if(!a)if(524288&i.flags)a=!0;else if(262144&i.flags)break;if(10===i.tag){var o=i.alternate;if(null===o)throw Error(l(387));if(null!==(o=o.memoizedProps)){var s=i.type;Yn(i.pendingProps.value,o.value)||(null!==e?e.push(s):e=[s])}}else if(i===U.current){if(null===(o=i.alternate))throw Error(l(387));o.memoizedState.memoizedState!==i.memoizedState.memoizedState&&(null!==e?e.push(Wd):e=[Wd])}i=i.return}null!==e&&wi(t,e,n,r),t.flags|=262144}function Ci(e){for(e=e.firstContext;null!==e;){if(!Yn(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function Si(e){gi=e,vi=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function xi(e){return Ei(gi,e)}function ki(e,t){return null===gi&&Si(e),Ei(e,t)}function Ei(e,t){var n=t._currentValue;if(t={context:t,memoizedValue:n,next:null},null===vi){if(null===e)throw Error(l(308));vi=t,e.dependencies={lanes:0,firstContext:t},e.flags|=524288}else vi=vi.next=t;return n}var Ti="undefined"!=typeof AbortController?AbortController:function(){var e=[],t=this.signal={aborted:!1,addEventListener:function(t,n){e.push(n)}};this.abort=function(){t.aborted=!0,e.forEach((function(e){return e()}))}},Pi=r.unstable_scheduleCallback,Mi=r.unstable_NormalPriority,zi={$$typeof:_,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function Oi(){return{controller:new Ti,data:new Map,refCount:0}}function Li(e){e.refCount--,0===e.refCount&&Pi(Mi,(function(){e.controller.abort()}))}var Ni=null,Ii=0,Di=0,Bi=null;function Fi(){if(0==--Ii&&null!==Ni){null!==Bi&&(Bi.status="fulfilled");var e=Ni;Ni=null,Di=0,Bi=null;for(var t=0;t<e.length;t++)(0,e[t])()}}var Ri=L.S;L.S=function(e,t){"object"==typeof t&&null!==t&&"function"==typeof t.then&&function(e,t){if(null===Ni){var n=Ni=[];Ii=0,Di=Tc(),Bi={status:"pending",value:void 0,then:function(e){n.push(e)}}}Ii++,t.then(Fi,Fi)}(0,t),null!==Ri&&Ri(e,t)};var $i=F(null);function ji(){var e=$i.current;return null!==e?e:nu.pooledCache}function Hi(e,t){$($i,null===t?$i.current:t.pool)}function Vi(){var e=ji();return null===e?null:{parent:zi._currentValue,pool:e}}var Ui=Error(l(460)),Gi=Error(l(474)),qi=Error(l(542)),Wi={then:function(){}};function Yi(e){return"fulfilled"===(e=e.status)||"rejected"===e}function Qi(){}function Xi(e,t,n){switch(void 0===(n=e[n])?e.push(t):n!==t&&(t.then(Qi,Qi),t=n),t.status){case"fulfilled":return t.value;case"rejected":throw Zi(e=t.reason),e;default:if("string"==typeof t.status)t.then(Qi,Qi);else{if(null!==(e=nu)&&100<e.shellSuspendCounter)throw Error(l(482));(e=t).status="pending",e.then((function(e){if("pending"===t.status){var n=t;n.status="fulfilled",n.value=e}}),(function(e){if("pending"===t.status){var n=t;n.status="rejected",n.reason=e}}))}switch(t.status){case"fulfilled":return t.value;case"rejected":throw Zi(e=t.reason),e}throw Ki=t,Ui}}var Ki=null;function Ji(){if(null===Ki)throw Error(l(459));var e=Ki;return Ki=null,e}function Zi(e){if(e===Ui||e===qi)throw Error(l(483))}var ea=!1;function ta(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function na(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function ra(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&tu){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,t=Or(e),zr(e,null,n),t}return Tr(e,r,t,n),Or(e)}function aa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194048&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ke(e,n)}}function la(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var l={lane:n.lane,tag:n.tag,payload:n.payload,callback:null,next:null};null===a?i=a=l:a=a.next=l,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}var oa=!1;function sa(){if(oa&&null!==Bi)throw Bi}function ua(e,t,n,r){oa=!1;var i=e.updateQueue;ea=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,o=i.shared.pending;if(null!==o){i.shared.pending=null;var s=o,u=s.next;s.next=null,null===l?a=u:l.next=u,l=s;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==l&&(null===o?c.firstBaseUpdate=u:o.next=u,c.lastBaseUpdate=s)}if(null!==a){var f=i.baseState;for(l=0,c=u=s=null,o=a;;){var p=-536870913&o.lane,h=p!==o.lane;if(h?(iu&p)===p:(r&p)===p){0!==p&&p===Di&&(oa=!0),null!==c&&(c=c.next={lane:0,tag:o.tag,payload:o.payload,callback:null,next:null});e:{var m=e,g=o;p=t;var v=n;switch(g.tag){case 1:if("function"==typeof(m=g.payload)){f=m.call(v,f,p);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(p="function"==typeof(m=g.payload)?m.call(v,f,p):m))break e;f=d({},f,p);break e;case 2:ea=!0}}null!==(p=o.callback)&&(e.flags|=64,h&&(e.flags|=8192),null===(h=i.callbacks)?i.callbacks=[p]:h.push(p))}else h={lane:p,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(u=c=h,s=f):c=c.next=h,l|=p;if(null===(o=o.next)){if(null===(o=i.shared.pending))break;o=(h=o).next,h.next=null,i.lastBaseUpdate=h,i.shared.pending=null}}null===c&&(s=f),i.baseState=s,i.firstBaseUpdate=u,i.lastBaseUpdate=c,null===a&&(i.shared.lanes=0),fu|=l,e.lanes=l,e.memoizedState=f}}function ca(e,t){if("function"!=typeof e)throw Error(l(191,e));e.call(t)}function da(e,t){var n=e.callbacks;if(null!==n)for(e.callbacks=null,e=0;e<n.length;e++)ca(n[e],t)}var fa=F(null),pa=F(0);function ha(e,t){$(pa,e=cu),$(fa,t),cu=e|t.baseLanes}function ma(){$(pa,cu),$(fa,fa.current)}function ga(){cu=pa.current,R(fa),R(pa)}var va=0,ya=null,ba=null,_a=null,wa=!1,Aa=!1,Ca=!1,Sa=0,xa=0,ka=null,Ea=0;function Ta(){throw Error(l(321))}function Pa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Yn(e[n],t[n]))return!1;return!0}function Ma(e,t,n,r,i,a){return va=a,ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,L.H=null===e||null===e.memoizedState?Ul:Gl,Ca=!1,a=n(r,i),Ca=!1,Aa&&(a=Oa(t,n,r,i)),za(e),a}function za(e){L.H=Vl;var t=null!==ba&&null!==ba.next;if(va=0,_a=ba=ya=null,wa=!1,xa=0,ka=null,t)throw Error(l(300));null===e||ko||null!==(e=e.dependencies)&&Ci(e)&&(ko=!0)}function Oa(e,t,n,r){ya=e;var i=0;do{if(Aa&&(ka=null),xa=0,Aa=!1,25<=i)throw Error(l(301));if(i+=1,_a=ba=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}L.H=ql,a=t(n,r)}while(Aa);return a}function La(){var e=L.H,t=e.useState()[0];return t="function"==typeof t.then?Ra(t):t,e=e.useState()[0],(null!==ba?ba.memoizedState:null)!==e&&(ya.flags|=1024),t}function Na(){var e=0!==Sa;return Sa=0,e}function Ia(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~n}function Da(e){if(wa){for(e=e.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}wa=!1}va=0,_a=ba=ya=null,Aa=!1,xa=Sa=0,ka=null}function Ba(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===_a?ya.memoizedState=_a=e:_a=_a.next=e,_a}function Fa(){if(null===ba){var e=ya.alternate;e=null!==e?e.memoizedState:null}else e=ba.next;var t=null===_a?ya.memoizedState:_a.next;if(null!==t)_a=t,ba=e;else{if(null===e){if(null===ya.alternate)throw Error(l(467));throw Error(l(310))}e={memoizedState:(ba=e).memoizedState,baseState:ba.baseState,baseQueue:ba.baseQueue,queue:ba.queue,next:null},null===_a?ya.memoizedState=_a=e:_a=_a.next=e}return _a}function Ra(e){var t=xa;return xa+=1,null===ka&&(ka=[]),e=Xi(ka,e,t),t=ya,null===(null===_a?t.memoizedState:_a.next)&&(t=t.alternate,L.H=null===t||null===t.memoizedState?Ul:Gl),e}function $a(e){if(null!==e&&"object"==typeof e){if("function"==typeof e.then)return Ra(e);if(e.$$typeof===_)return xi(e)}throw Error(l(438,String(e)))}function ja(e){var t=null,n=ya.updateQueue;if(null!==n&&(t=n.memoCache),null==t){var r=ya.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(t={data:r.data.map((function(e){return e.slice()})),index:0})}if(null==t&&(t={data:[],index:0}),null===n&&(n={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=n),n.memoCache=t,void 0===(n=t.data[t.index]))for(n=t.data[t.index]=Array(e),r=0;r<e;r++)n[r]=E;return t.index++,n}function Ha(e,t){return"function"==typeof t?t(e):t}function Va(e){return Ua(Fa(),ba,e)}function Ua(e,t,n){var r=e.queue;if(null===r)throw Error(l(311));r.lastRenderedReducer=n;var i=e.baseQueue,a=r.pending;if(null!==a){if(null!==i){var o=i.next;i.next=a.next,a.next=o}t.baseQueue=i=a,r.pending=null}if(a=e.baseState,null===i)e.memoizedState=a;else{var s=o=null,u=null,c=t=i.next,d=!1;do{var f=-536870913&c.lane;if(f!==c.lane?(iu&f)===f:(va&f)===f){var p=c.revertLane;if(0===p)null!==u&&(u=u.next={lane:0,revertLane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),f===Di&&(d=!0);else{if((va&p)===p){c=c.next,p===Di&&(d=!0);continue}f={lane:0,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=f,o=a):u=u.next=f,ya.lanes|=p,fu|=p}f=c.action,Ca&&n(a,f),a=c.hasEagerState?c.eagerState:n(a,f)}else p={lane:f,revertLane:c.revertLane,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===u?(s=u=p,o=a):u=u.next=p,ya.lanes|=f,fu|=f;c=c.next}while(null!==c&&c!==t);if(null===u?o=a:u.next=s,!Yn(a,e.memoizedState)&&(ko=!0,d&&null!==(n=Bi)))throw n;e.memoizedState=a,e.baseState=o,e.baseQueue=u,r.lastRenderedState=a}return null===i&&(r.lanes=0),[e.memoizedState,r.dispatch]}function Ga(e){var t=Fa(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var o=i=i.next;do{a=e(a,o.action),o=o.next}while(o!==i);Yn(a,t.memoizedState)||(ko=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function qa(e,t,n){var r=ya,i=Fa(),a=ii;if(a){if(void 0===n)throw Error(l(407));n=n()}else n=t();var o=!Yn((ba||i).memoizedState,n);if(o&&(i.memoizedState=n,ko=!0),i=i.queue,ml(2048,8,Qa.bind(null,r,i,e),[e]),i.getSnapshot!==t||o||null!==_a&&1&_a.memoizedState.tag){if(r.flags|=2048,fl(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,i,n,t),null),null===nu)throw Error(l(349));a||124&va||Wa(r,t,n)}return n}function Wa(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ya.updateQueue)?(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ya(e,t,n,r){t.value=n,t.getSnapshot=r,Xa(t)&&Ka(e)}function Qa(e,t,n){return n((function(){Xa(t)&&Ka(e)}))}function Xa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Yn(e,n)}catch(e){return!0}}function Ka(e){var t=Mr(e,2);null!==t&&Iu(t,0,2)}function Ja(e){var t=Ba();if("function"==typeof e){var n=e;if(e=n(),Ca){de(!0);try{n()}finally{de(!1)}}}return t.memoizedState=t.baseState=e,t.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:e},t}function Za(e,t,n,r){return e.baseState=n,Ua(e,ba,"function"==typeof r?r:Ha)}function el(e,t,n,r,i){if($l(e))throw Error(l(485));if(null!==(e=t.action)){var a={payload:i,action:e,next:null,isTransition:!0,status:"pending",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==L.T?n(!0):a.isTransition=!1,r(a),null===(n=t.pending)?(a.next=t.pending=a,tl(t,a)):(a.next=n.next,t.pending=n.next=a)}}function tl(e,t){var n=t.action,r=t.payload,i=e.state;if(t.isTransition){var a=L.T,l={};L.T=l;try{var o=n(i,r),s=L.S;null!==s&&s(l,o),nl(e,t,o)}catch(n){il(e,t,n)}finally{L.T=a}}else try{nl(e,t,a=n(i,r))}catch(n){il(e,t,n)}}function nl(e,t,n){null!==n&&"object"==typeof n&&"function"==typeof n.then?n.then((function(n){rl(e,t,n)}),(function(n){return il(e,t,n)})):rl(e,t,n)}function rl(e,t,n){t.status="fulfilled",t.value=n,al(t),e.state=n,null!==(t=e.pending)&&((n=t.next)===t?e.pending=null:(n=n.next,t.next=n,tl(e,n)))}function il(e,t,n){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do{t.status="rejected",t.reason=n,al(t),t=t.next}while(t!==r)}e.action=null}function al(e){e=e.listeners;for(var t=0;t<e.length;t++)(0,e[t])()}function ll(e,t){return t}function ol(e,t){if(ii){var n=nu.formState;if(null!==n){e:{var r=ya;if(ii){if(ri){t:{for(var i=ri,a=li;8!==i.nodeType;){if(!a){i=null;break t}if(null===(i=gd(i.nextSibling))){i=null;break t}}i="F!"===(a=i.data)||"F"===a?i:null}if(i){ri=gd(i.nextSibling),r="F!"===i.data;break e}}si(r)}r=!1}r&&(t=n[0])}}return(n=Ba()).memoizedState=n.baseState=t,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ll,lastRenderedState:t},n.queue=r,n=Bl.bind(null,ya,r),r.dispatch=n,r=Ja(!1),a=Rl.bind(null,ya,!1,r.queue),i={state:t,dispatch:null,action:e,pending:null},(r=Ba()).queue=i,n=el.bind(null,ya,i,a,n),i.dispatch=n,r.memoizedState=e,[t,n,!1]}function sl(e){return ul(Fa(),ba,e)}function ul(e,t,n){if(t=Ua(e,t,ll)[0],e=Va(Ha)[0],"object"==typeof t&&null!==t&&"function"==typeof t.then)try{var r=Ra(t)}catch(e){if(e===Ui)throw qi;throw e}else r=t;var i=(t=Fa()).queue,a=i.dispatch;return n!==t.memoizedState&&(ya.flags|=2048,fl(9,{destroy:void 0,resource:void 0},cl.bind(null,i,n),null)),[r,a,e]}function cl(e,t){e.action=t}function dl(e){var t=Fa(),n=ba;if(null!==n)return ul(t,n,e);Fa(),t=t.memoizedState;var r=(n=Fa()).queue.dispatch;return n.memoizedState=e,[t,r,!1]}function fl(e,t,n,r){return e={tag:e,create:n,deps:r,inst:t,next:null},null===(t=ya.updateQueue)&&(t={lastEffect:null,events:null,stores:null,memoCache:null},ya.updateQueue=t),null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pl(){return Fa().memoizedState}function hl(e,t,n,r){var i=Ba();r=void 0===r?null:r,ya.flags|=e,i.memoizedState=fl(1|t,{destroy:void 0,resource:void 0},n,r)}function ml(e,t,n,r){var i=Fa();r=void 0===r?null:r;var a=i.memoizedState.inst;null!==ba&&null!==r&&Pa(r,ba.memoizedState.deps)?i.memoizedState=fl(t,a,n,r):(ya.flags|=e,i.memoizedState=fl(1|t,a,n,r))}function gl(e,t){hl(8390656,8,e,t)}function vl(e,t){ml(2048,8,e,t)}function yl(e,t){return ml(4,2,e,t)}function bl(e,t){return ml(4,4,e,t)}function _l(e,t){if("function"==typeof t){e=e();var n=t(e);return function(){"function"==typeof n?n():t(null)}}if(null!=t)return e=e(),t.current=e,function(){t.current=null}}function wl(e,t,n){n=null!=n?n.concat([e]):null,ml(4,4,_l.bind(null,t,e),n)}function Al(){}function Cl(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;return null!==t&&Pa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Sl(e,t){var n=Fa();t=void 0===t?null:t;var r=n.memoizedState;if(null!==t&&Pa(t,r[1]))return r[0];if(r=e(),Ca){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r}function xl(e,t,n){return void 0===n||1073741824&va?e.memoizedState=t:(e.memoizedState=n,e=Nu(),ya.lanes|=e,fu|=e,n)}function kl(e,t,n,r){return Yn(n,t)?n:null!==fa.current?(e=xl(e,n,r),Yn(e,t)||(ko=!0),e):42&va?(e=Nu(),ya.lanes|=e,fu|=e,t):(ko=!0,e.memoizedState=n)}function El(e,t,n,r,i){var a=N.p;N.p=0!==a&&8>a?a:8;var l,o,s,u=L.T,c={};L.T=c,Rl(e,!1,t,n);try{var d=i(),f=L.S;null!==f&&f(c,d),null!==d&&"object"==typeof d&&"function"==typeof d.then?Fl(e,t,(l=r,o=[],s={status:"pending",value:null,reason:null,then:function(e){o.push(e)}},d.then((function(){s.status="fulfilled",s.value=l;for(var e=0;e<o.length;e++)(0,o[e])(l)}),(function(e){for(s.status="rejected",s.reason=e,e=0;e<o.length;e++)(0,o[e])(void 0)})),s),Lu()):Fl(e,t,r,Lu())}catch(n){Fl(e,t,{then:function(){},status:"rejected",reason:n},Lu())}finally{N.p=a,L.T=u}}function Tl(){}function Pl(e,t,n,r){if(5!==e.tag)throw Error(l(476));var i=Ml(e).queue;El(e,i,t,I,null===n?Tl:function(){return zl(e),n(r)})}function Ml(e){var t=e.memoizedState;if(null!==t)return t;var n={};return(t={memoizedState:I,baseState:I,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:I},next:null}).next={memoizedState:n,baseState:n,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:Ha,lastRenderedState:n},next:null},e.memoizedState=t,null!==(e=e.alternate)&&(e.memoizedState=t),t}function zl(e){Fl(e,Ml(e).next.queue,{},Lu())}function Ol(){return xi(Wd)}function Ll(){return Fa().memoizedState}function Nl(){return Fa().memoizedState}function Il(e){for(var t=e.return;null!==t;){switch(t.tag){case 24:case 3:var n=Lu(),r=ia(t,e=ra(n),n);return null!==r&&(Iu(r,0,n),aa(r,t,n)),t={cache:Oi()},void(e.payload=t)}t=t.return}}function Dl(e,t,n){var r=Lu();n={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null},$l(e)?jl(t,n):null!==(n=Pr(e,t,n,r))&&(Iu(n,0,r),Hl(n,t,r))}function Bl(e,t,n){Fl(e,t,n,Lu())}function Fl(e,t,n,r){var i={lane:r,revertLane:0,action:n,hasEagerState:!1,eagerState:null,next:null};if($l(e))jl(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,o=a(l,n);if(i.hasEagerState=!0,i.eagerState=o,Yn(o,l))return Tr(e,t,i,0),null===nu&&Er(),!1}catch(e){}if(null!==(n=Pr(e,t,i,r)))return Iu(n,0,r),Hl(n,t,r),!0}return!1}function Rl(e,t,n,r){if(r={lane:2,revertLane:Tc(),action:r,hasEagerState:!1,eagerState:null,next:null},$l(e)){if(t)throw Error(l(479))}else null!==(t=Pr(e,n,r,2))&&Iu(t,0,2)}function $l(e){var t=e.alternate;return e===ya||null!==t&&t===ya}function jl(e,t){Aa=wa=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Hl(e,t,n){if(4194048&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,ke(e,n)}}var Vl={readContext:xi,use:$a,useCallback:Ta,useContext:Ta,useEffect:Ta,useImperativeHandle:Ta,useLayoutEffect:Ta,useInsertionEffect:Ta,useMemo:Ta,useReducer:Ta,useRef:Ta,useState:Ta,useDebugValue:Ta,useDeferredValue:Ta,useTransition:Ta,useSyncExternalStore:Ta,useId:Ta,useHostTransitionStatus:Ta,useFormState:Ta,useActionState:Ta,useOptimistic:Ta,useMemoCache:Ta,useCacheRefresh:Ta},Ul={readContext:xi,use:$a,useCallback:function(e,t){return Ba().memoizedState=[e,void 0===t?null:t],e},useContext:xi,useEffect:gl,useImperativeHandle:function(e,t,n){n=null!=n?n.concat([e]):null,hl(4194308,4,_l.bind(null,t,e),n)},useLayoutEffect:function(e,t){return hl(4194308,4,e,t)},useInsertionEffect:function(e,t){hl(4,2,e,t)},useMemo:function(e,t){var n=Ba();t=void 0===t?null:t;var r=e();if(Ca){de(!0);try{e()}finally{de(!1)}}return n.memoizedState=[r,t],r},useReducer:function(e,t,n){var r=Ba();if(void 0!==n){var i=n(t);if(Ca){de(!0);try{n(t)}finally{de(!1)}}}else i=t;return r.memoizedState=r.baseState=i,e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:i},r.queue=e,e=e.dispatch=Dl.bind(null,ya,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ba().memoizedState=e},useState:function(e){var t=(e=Ja(e)).queue,n=Bl.bind(null,ya,t);return t.dispatch=n,[e.memoizedState,n]},useDebugValue:Al,useDeferredValue:function(e,t){return xl(Ba(),e,t)},useTransition:function(){var e=Ja(!1);return e=El.bind(null,ya,e.queue,!0,!1),Ba().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,t,n){var r=ya,i=Ba();if(ii){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===nu)throw Error(l(349));124&iu||Wa(r,t,n)}i.memoizedState=n;var a={value:n,getSnapshot:t};return i.queue=a,gl(Qa.bind(null,r,a,e),[e]),r.flags|=2048,fl(9,{destroy:void 0,resource:void 0},Ya.bind(null,r,a,n,t),null),n},useId:function(){var e=Ba(),t=nu.identifierPrefix;if(ii){var n=Kr;t="«"+t+"R"+(n=(Xr&~(1<<32-fe(Xr)-1)).toString(32)+n),0<(n=Sa++)&&(t+="H"+n.toString(32)),t+="»"}else t="«"+t+"r"+(n=Ea++).toString(32)+"»";return e.memoizedState=t},useHostTransitionStatus:Ol,useFormState:ol,useActionState:ol,useOptimistic:function(e){var t=Ba();t.memoizedState=t.baseState=e;var n={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return t.queue=n,t=Rl.bind(null,ya,!0,n),n.dispatch=t,[e,t]},useMemoCache:ja,useCacheRefresh:function(){return Ba().memoizedState=Il.bind(null,ya)}},Gl={readContext:xi,use:$a,useCallback:Cl,useContext:xi,useEffect:vl,useImperativeHandle:wl,useInsertionEffect:yl,useLayoutEffect:bl,useMemo:Sl,useReducer:Va,useRef:pl,useState:function(){return Va(Ha)},useDebugValue:Al,useDeferredValue:function(e,t){return kl(Fa(),ba.memoizedState,e,t)},useTransition:function(){var e=Va(Ha)[0],t=Fa().memoizedState;return["boolean"==typeof e?e:Ra(e),t]},useSyncExternalStore:qa,useId:Ll,useHostTransitionStatus:Ol,useFormState:sl,useActionState:sl,useOptimistic:function(e,t){return Za(Fa(),0,e,t)},useMemoCache:ja,useCacheRefresh:Nl},ql={readContext:xi,use:$a,useCallback:Cl,useContext:xi,useEffect:vl,useImperativeHandle:wl,useInsertionEffect:yl,useLayoutEffect:bl,useMemo:Sl,useReducer:Ga,useRef:pl,useState:function(){return Ga(Ha)},useDebugValue:Al,useDeferredValue:function(e,t){var n=Fa();return null===ba?xl(n,e,t):kl(n,ba.memoizedState,e,t)},useTransition:function(){var e=Ga(Ha)[0],t=Fa().memoizedState;return["boolean"==typeof e?e:Ra(e),t]},useSyncExternalStore:qa,useId:Ll,useHostTransitionStatus:Ol,useFormState:dl,useActionState:dl,useOptimistic:function(e,t){var n=Fa();return null!==ba?Za(n,0,e,t):(n.baseState=e,[e,n.queue.dispatch])},useMemoCache:ja,useCacheRefresh:Nl},Wl=null,Yl=0;function Ql(e){var t=Yl;return Yl+=1,null===Wl&&(Wl=[]),Xi(Wl,e,t)}function Xl(e,t){t=t.props.ref,e.ref=void 0!==t?t:null}function Kl(e,t){if(t.$$typeof===f)throw Error(l(525));throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Jl(e){return(0,e._init)(e._payload)}function Zl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e){for(var t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function i(e,t){return(e=Br(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=67108866,n):r:(t.flags|=67108866,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=67108866),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=jr(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===m?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===x&&Jl(a)===t.type)?(Xl(t=i(t,n.props),n),t.return=e,t):(Xl(t=Rr(n.type,n.key,n.props,null,e.mode,r),n),t.return=e,t)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hr(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=$r(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t||"bigint"==typeof t)return(t=jr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case p:return Xl(n=Rr(t.type,t.key,t.props,null,e.mode,n),t),n.return=e,n;case h:return(t=Hr(t,e.mode,n)).return=e,t;case x:return f(e,t=(0,t._init)(t._payload),n)}if(O(t)||P(t))return(t=$r(t,e.mode,n,null)).return=e,t;if("function"==typeof t.then)return f(e,Ql(t),n);if(t.$$typeof===_)return f(e,ki(e,t),n);Kl(e,t)}return null}function g(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n||"bigint"==typeof n)return null!==i?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case p:return n.key===i?u(e,t,n,r):null;case h:return n.key===i?c(e,t,n,r):null;case x:return g(e,t,n=(i=n._init)(n._payload),r)}if(O(n)||P(n))return null!==i?null:d(e,t,n,r,null);if("function"==typeof n.then)return g(e,t,Ql(n),r);if(n.$$typeof===_)return g(e,t,ki(e,n),r);Kl(e,n)}return null}function v(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r||"bigint"==typeof r)return s(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case p:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case h:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case x:return v(e,t,n,r=(0,r._init)(r._payload),i)}if(O(r)||P(r))return d(t,e=e.get(n)||null,r,i,null);if("function"==typeof r.then)return v(e,t,n,Ql(r),i);if(r.$$typeof===_)return v(e,t,n,ki(t,r),i);Kl(t,r)}return null}function y(s,u,c,d){if("object"==typeof c&&null!==c&&c.type===m&&null===c.key&&(c=c.props.children),"object"==typeof c&&null!==c){switch(c.$$typeof){case p:e:{for(var b=c.key;null!==u;){if(u.key===b){if((b=c.type)===m){if(7===u.tag){n(s,u.sibling),(d=i(u,c.props.children)).return=s,s=d;break e}}else if(u.elementType===b||"object"==typeof b&&null!==b&&b.$$typeof===x&&Jl(b)===u.type){n(s,u.sibling),Xl(d=i(u,c.props),c),d.return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}c.type===m?((d=$r(c.props.children,s.mode,d,c.key)).return=s,s=d):(Xl(d=Rr(c.type,c.key,c.props,null,s.mode,d),c),d.return=s,s=d)}return o(s);case h:e:{for(b=c.key;null!==u;){if(u.key===b){if(4===u.tag&&u.stateNode.containerInfo===c.containerInfo&&u.stateNode.implementation===c.implementation){n(s,u.sibling),(d=i(u,c.children||[])).return=s,s=d;break e}n(s,u);break}t(s,u),u=u.sibling}(d=Hr(c,s.mode,d)).return=s,s=d}return o(s);case x:return y(s,u,c=(b=c._init)(c._payload),d)}if(O(c))return function(i,l,o,s){for(var u=null,c=null,d=l,p=l=0,h=null;null!==d&&p<o.length;p++){d.index>p?(h=d,d=null):h=d.sibling;var m=g(i,d,o[p],s);if(null===m){null===d&&(d=h);break}e&&d&&null===m.alternate&&t(i,d),l=a(m,l,p),null===c?u=m:c.sibling=m,c=m,d=h}if(p===o.length)return n(i,d),ii&&Jr(i,p),u;if(null===d){for(;p<o.length;p++)null!==(d=f(i,o[p],s))&&(l=a(d,l,p),null===c?u=d:c.sibling=d,c=d);return ii&&Jr(i,p),u}for(d=r(d);p<o.length;p++)null!==(h=v(d,i,p,o[p],s))&&(e&&null!==h.alternate&&d.delete(null===h.key?p:h.key),l=a(h,l,p),null===c?u=h:c.sibling=h,c=h);return e&&d.forEach((function(e){return t(i,e)})),ii&&Jr(i,p),u}(s,u,c,d);if(P(c)){if("function"!=typeof(b=P(c)))throw Error(l(150));return function(i,o,s,u){if(null==s)throw Error(l(151));for(var c=null,d=null,p=o,h=o=0,m=null,y=s.next();null!==p&&!y.done;h++,y=s.next()){p.index>h?(m=p,p=null):m=p.sibling;var b=g(i,p,y.value,u);if(null===b){null===p&&(p=m);break}e&&p&&null===b.alternate&&t(i,p),o=a(b,o,h),null===d?c=b:d.sibling=b,d=b,p=m}if(y.done)return n(i,p),ii&&Jr(i,h),c;if(null===p){for(;!y.done;h++,y=s.next())null!==(y=f(i,y.value,u))&&(o=a(y,o,h),null===d?c=y:d.sibling=y,d=y);return ii&&Jr(i,h),c}for(p=r(p);!y.done;h++,y=s.next())null!==(y=v(p,i,h,y.value,u))&&(e&&null!==y.alternate&&p.delete(null===y.key?h:y.key),o=a(y,o,h),null===d?c=y:d.sibling=y,d=y);return e&&p.forEach((function(e){return t(i,e)})),ii&&Jr(i,h),c}(s,u,c=b.call(c),d)}if("function"==typeof c.then)return y(s,u,Ql(c),d);if(c.$$typeof===_)return y(s,u,ki(s,c),d);Kl(s,c)}return"string"==typeof c&&""!==c||"number"==typeof c||"bigint"==typeof c?(c=""+c,null!==u&&6===u.tag?(n(s,u.sibling),(d=i(u,c)).return=s,s=d):(n(s,u),(d=jr(c,s.mode,d)).return=s,s=d),o(s)):n(s,u)}return function(e,t,n,r){try{Yl=0;var i=y(e,t,n,r);return Wl=null,i}catch(t){if(t===Ui||t===qi)throw t;var a=Ir(29,t,null,e.mode);return a.lanes=r,a.return=e,a}}}var eo=Zl(!0),to=Zl(!1),no=F(null),ro=null;function io(e){var t=e.alternate;$(so,1&so.current),$(no,e),null===ro&&(null===t||null!==fa.current||null!==t.memoizedState)&&(ro=e)}function ao(e){if(22===e.tag){if($(so,so.current),$(no,e),null===ro){var t=e.alternate;null!==t&&null!==t.memoizedState&&(ro=e)}}else lo()}function lo(){$(so,so.current),$(no,no.current)}function oo(e){R(no),ro===e&&(ro=null),R(so)}var so=F(0);function uo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||md(n)))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function co(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:d({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var fo={enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Lu(),i=ra(r);i.payload=t,null!=n&&(i.callback=n),null!==(t=ia(e,i,r))&&(Iu(t,0,r),aa(t,e,r))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Lu(),i=ra(r);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=ia(e,i,r))&&(Iu(t,0,r),aa(t,e,r))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Lu(),r=ra(n);r.tag=2,null!=t&&(r.callback=t),null!==(t=ia(e,r,n))&&(Iu(t,0,n),aa(t,e,n))}};function po(e,t,n,r,i,a,l){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,l):!(t.prototype&&t.prototype.isPureReactComponent&&Qn(n,r)&&Qn(i,a))}function ho(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&fo.enqueueReplaceState(t,t.state,null)}function mo(e,t){var n=t;if("ref"in t)for(var r in n={},t)"ref"!==r&&(n[r]=t[r]);if(e=e.defaultProps)for(var i in n===t&&(n=d({},n)),e)void 0===n[i]&&(n[i]=e[i]);return n}var go="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function vo(e){go(e)}function yo(e){console.error(e)}function bo(e){go(e)}function _o(e,t){try{(0,e.onUncaughtError)(t.value,{componentStack:t.stack})}catch(e){setTimeout((function(){throw e}))}}function wo(e,t,n){try{(0,e.onCaughtError)(n.value,{componentStack:n.stack,errorBoundary:1===t.tag?t.stateNode:null})}catch(e){setTimeout((function(){throw e}))}}function Ao(e,t,n){return(n=ra(n)).tag=3,n.payload={element:null},n.callback=function(){_o(e,t)},n}function Co(e){return(e=ra(e)).tag=3,e}function So(e,t,n,r){var i=n.type.getDerivedStateFromError;if("function"==typeof i){var a=r.value;e.payload=function(){return i(a)},e.callback=function(){wo(t,n,r)}}var l=n.stateNode;null!==l&&"function"==typeof l.componentDidCatch&&(e.callback=function(){wo(t,n,r),"function"!=typeof i&&(null===Cu?Cu=new Set([this]):Cu.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:""})})}var xo=Error(l(461)),ko=!1;function Eo(e,t,n,r){t.child=null===e?to(t,null,n,r):eo(t,e.child,n,r)}function To(e,t,n,r,i){n=n.render;var a=t.ref;if("ref"in r){var l={};for(var o in r)"ref"!==o&&(l[o]=r[o])}else l=r;return Si(t),r=Ma(e,t,n,l,a,i),o=Na(),null===e||ko?(ii&&o&&ei(t),t.flags|=1,Eo(e,t,r,i),t.child):(Ia(e,t,i),Yo(e,t,i))}function Po(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||Dr(a)||void 0!==a.defaultProps||null!==n.compare?((e=Rr(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Mo(e,t,a,r,i))}if(a=e.child,!Qo(e,i)){var l=a.memoizedProps;if((n=null!==(n=n.compare)?n:Qn)(l,r)&&e.ref===t.ref)return Yo(e,t,i)}return t.flags|=1,(e=Br(a,r)).ref=t.ref,e.return=t,t.child=e}function Mo(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(Qn(a,r)&&e.ref===t.ref){if(ko=!1,t.pendingProps=r=a,!Qo(e,i))return t.lanes=e.lanes,Yo(e,t,i);131072&e.flags&&(ko=!0)}}return No(e,t,n,r,i)}function zo(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode){if(128&t.flags){if(r=null!==a?a.baseLanes|n:n,null!==e){for(i=t.child=e.child,a=0;null!==i;)a=a|i.lanes|i.childLanes,i=i.sibling;t.childLanes=a&~r}else t.childLanes=0,t.child=null;return Oo(e,t,r,n)}if(!(536870912&n))return t.lanes=t.childLanes=536870912,Oo(e,t,null!==a?a.baseLanes|n:n,n);t.memoizedState={baseLanes:0,cachePool:null},null!==e&&Hi(0,null!==a?a.cachePool:null),null!==a?ha(t,a):ma(),ao(t)}else null!==a?(Hi(0,a.cachePool),ha(t,a),lo(),t.memoizedState=null):(null!==e&&Hi(0,null),ma(),lo());return Eo(e,t,i,n),t.child}function Oo(e,t,n,r){var i=ji();return i=null===i?null:{parent:zi._currentValue,pool:i},t.memoizedState={baseLanes:n,cachePool:i},null!==e&&Hi(0,null),ma(),ao(t),null!==e&&Ai(e,t,r,!0),null}function Lo(e,t){var n=t.ref;if(null===n)null!==e&&null!==e.ref&&(t.flags|=4194816);else{if("function"!=typeof n&&"object"!=typeof n)throw Error(l(284));null!==e&&e.ref===n||(t.flags|=4194816)}}function No(e,t,n,r,i){return Si(t),n=Ma(e,t,n,r,void 0,i),r=Na(),null===e||ko?(ii&&r&&ei(t),t.flags|=1,Eo(e,t,n,i),t.child):(Ia(e,t,i),Yo(e,t,i))}function Io(e,t,n,r,i,a){return Si(t),t.updateQueue=null,n=Oa(t,r,n,i),za(e),r=Na(),null===e||ko?(ii&&r&&ei(t),t.flags|=1,Eo(e,t,n,a),t.child):(Ia(e,t,a),Yo(e,t,a))}function Do(e,t,n,r,i){if(Si(t),null===t.stateNode){var a=Lr,l=n.contextType;"object"==typeof l&&null!==l&&(a=xi(l)),a=new n(r,a),t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,a.updater=fo,t.stateNode=a,a._reactInternals=t,(a=t.stateNode).props=r,a.state=t.memoizedState,a.refs={},ta(t),l=n.contextType,a.context="object"==typeof l&&null!==l?xi(l):Lr,a.state=t.memoizedState,"function"==typeof(l=n.getDerivedStateFromProps)&&(co(t,n,l,r),a.state=t.memoizedState),"function"==typeof n.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(l=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),l!==a.state&&fo.enqueueReplaceState(a,a.state,null),ua(t,r,a,i),sa(),a.state=t.memoizedState),"function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!0}else if(null===e){a=t.stateNode;var o=t.memoizedProps,s=mo(n,o);a.props=s;var u=a.context,c=n.contextType;l=Lr,"object"==typeof c&&null!==c&&(l=xi(c));var d=n.getDerivedStateFromProps;c="function"==typeof d||"function"==typeof a.getSnapshotBeforeUpdate,o=t.pendingProps!==o,c||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(o||u!==l)&&ho(t,a,r,l),ea=!1;var f=t.memoizedState;a.state=f,ua(t,r,a,i),sa(),u=t.memoizedState,o||f!==u||ea?("function"==typeof d&&(co(t,n,d,r),u=t.memoizedState),(s=ea||po(t,n,s,r,f,u,l))?(c||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,na(e,t),c=mo(n,l=t.memoizedProps),a.props=c,d=t.pendingProps,f=a.context,u=n.contextType,s=Lr,"object"==typeof u&&null!==u&&(s=xi(u)),(u="function"==typeof(o=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==d||f!==s)&&ho(t,a,r,s),ea=!1,f=t.memoizedState,a.state=f,ua(t,r,a,i),sa();var p=t.memoizedState;l!==d||f!==p||ea||null!==e&&null!==e.dependencies&&Ci(e.dependencies)?("function"==typeof o&&(co(t,n,o,r),p=t.memoizedState),(c=ea||po(t,n,c,r,f,p,s)||null!==e&&null!==e.dependencies&&Ci(e.dependencies))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,s),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,s)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=s,r=c):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return a=r,Lo(e,t),r=!!(128&t.flags),a||r?(a=t.stateNode,n=r&&"function"!=typeof n.getDerivedStateFromError?null:a.render(),t.flags|=1,null!==e&&r?(t.child=eo(t,e.child,null,i),t.child=eo(t,null,n,i)):Eo(e,t,n,i),t.memoizedState=a.state,e=t.child):e=Yo(e,t,i),e}function Bo(e,t,n,r){return fi(),t.flags|=256,Eo(e,t,n,r),t.child}var Fo={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function Ro(e){return{baseLanes:e,cachePool:Vi()}}function $o(e,t,n){return e=null!==e?e.childLanes&~n:0,t&&(e|=mu),e}function jo(e,t,n){var r,i=t.pendingProps,a=!1,o=!!(128&t.flags);if((r=o)||(r=(null===e||null!==e.memoizedState)&&!!(2&so.current)),r&&(a=!0,t.flags&=-129),r=!!(32&t.flags),t.flags&=-33,null===e){if(ii){if(a?io(t):lo(),ii){var s,u=ri;if(s=u){e:{for(s=u,u=li;8!==s.nodeType;){if(!u){u=null;break e}if(null===(s=gd(s.nextSibling))){u=null;break e}}u=s}null!==u?(t.memoizedState={dehydrated:u,treeContext:null!==Qr?{id:Xr,overflow:Kr}:null,retryLane:536870912,hydrationErrors:null},(s=Ir(18,null,null,0)).stateNode=u,s.return=t,t.child=s,ni=t,ri=null,s=!0):s=!1}s||si(t)}if(null!==(u=t.memoizedState)&&null!==(u=u.dehydrated))return md(u)?t.lanes=32:t.lanes=536870912,null;oo(t)}return u=i.children,i=i.fallback,a?(lo(),u=Vo({mode:"hidden",children:u},a=t.mode),i=$r(i,a,n,null),u.return=t,i.return=t,u.sibling=i,t.child=u,(a=t.child).memoizedState=Ro(n),a.childLanes=$o(e,r,n),t.memoizedState=Fo,i):(io(t),Ho(t,u))}if(null!==(s=e.memoizedState)&&null!==(u=s.dehydrated)){if(o)256&t.flags?(io(t),t.flags&=-257,t=Uo(e,t,n)):null!==t.memoizedState?(lo(),t.child=e.child,t.flags|=128,t=null):(lo(),a=i.fallback,u=t.mode,i=Vo({mode:"visible",children:i.children},u),(a=$r(a,u,n,null)).flags|=2,i.return=t,a.return=t,i.sibling=a,t.child=i,eo(t,e.child,null,n),(i=t.child).memoizedState=Ro(n),i.childLanes=$o(e,r,n),t.memoizedState=Fo,t=a);else if(io(t),md(u)){if(r=u.nextSibling&&u.nextSibling.dataset)var c=r.dgst;r=c,(i=Error(l(419))).stack="",i.digest=r,hi({value:i,source:null,stack:null}),t=Uo(e,t,n)}else if(ko||Ai(e,t,n,!1),r=!!(n&e.childLanes),ko||r){if(null!==(r=nu)&&0!==(i=(i=42&(i=n&-n)?1:Ee(i))&(r.suspendedLanes|n)?0:i)&&i!==s.retryLane)throw s.retryLane=i,Mr(e,i),Iu(r,0,i),xo;"$?"===u.data||qu(),t=Uo(e,t,n)}else"$?"===u.data?(t.flags|=192,t.child=e.child,t=null):(e=s.treeContext,ri=gd(u.nextSibling),ni=t,ii=!0,ai=null,li=!1,null!==e&&(Wr[Yr++]=Xr,Wr[Yr++]=Kr,Wr[Yr++]=Qr,Xr=e.id,Kr=e.overflow,Qr=t),(t=Ho(t,i.children)).flags|=4096);return t}return a?(lo(),a=i.fallback,u=t.mode,c=(s=e.child).sibling,(i=Br(s,{mode:"hidden",children:i.children})).subtreeFlags=65011712&s.subtreeFlags,null!==c?a=Br(c,a):(a=$r(a,u,n,null)).flags|=2,a.return=t,i.return=t,i.sibling=a,t.child=i,i=a,a=t.child,null===(u=e.child.memoizedState)?u=Ro(n):(null!==(s=u.cachePool)?(c=zi._currentValue,s=s.parent!==c?{parent:c,pool:c}:s):s=Vi(),u={baseLanes:u.baseLanes|n,cachePool:s}),a.memoizedState=u,a.childLanes=$o(e,r,n),t.memoizedState=Fo,i):(io(t),e=(n=e.child).sibling,(n=Br(n,{mode:"visible",children:i.children})).return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n)}function Ho(e,t){return(t=Vo({mode:"visible",children:t},e.mode)).return=e,e.child=t}function Vo(e,t){return(e=Ir(22,e,null,t)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function Uo(e,t,n){return eo(t,e.child,null,n),(e=Ho(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Go(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),_i(e.return,t,n)}function qo(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function Wo(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Eo(e,t,r.children,n),2&(r=so.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Go(e,n,t);else if(19===e.tag)Go(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch($(so,r),i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===uo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),qo(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===uo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}qo(t,!0,n,null,a);break;case"together":qo(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Yo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),fu|=t.lanes,!(n&t.childLanes)){if(null===e)return null;if(Ai(e,t,n,!1),!(n&t.childLanes))return null}if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=Br(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Br(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Qo(e,t){return!!(e.lanes&t)||!(null===(e=e.dependencies)||!Ci(e))}function Xo(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps)ko=!0;else{if(!(Qo(e,n)||128&t.flags))return ko=!1,function(e,t,n){switch(t.tag){case 3:G(t,t.stateNode.containerInfo),yi(0,zi,e.memoizedState.cache),fi();break;case 27:case 5:W(t);break;case 4:G(t,t.stateNode.containerInfo);break;case 10:yi(0,t.type,t.memoizedProps.value);break;case 13:var r=t.memoizedState;if(null!==r)return null!==r.dehydrated?(io(t),t.flags|=128,null):n&t.child.childLanes?jo(e,t,n):(io(t),null!==(e=Yo(e,t,n))?e.sibling:null);io(t);break;case 19:var i=!!(128&e.flags);if((r=!!(n&t.childLanes))||(Ai(e,t,n,!1),r=!!(n&t.childLanes)),i){if(r)return Wo(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),$(so,so.current),r)break;return null;case 22:case 23:return t.lanes=0,zo(e,t,n);case 24:yi(0,zi,e.memoizedState.cache)}return Yo(e,t,n)}(e,t,n);ko=!!(131072&e.flags)}else ko=!1,ii&&1048576&t.flags&&Zr(t,qr,t.index);switch(t.lanes=0,t.tag){case 16:e:{e=t.pendingProps;var r=t.elementType,i=r._init;if(r=i(r._payload),t.type=r,"function"!=typeof r){if(null!=r){if((i=r.$$typeof)===w){t.tag=11,t=To(null,t,r,e,n);break e}if(i===S){t.tag=14,t=Po(null,t,r,e,n);break e}}throw t=z(r)||r,Error(l(306,t,""))}Dr(r)?(e=mo(r,e),t.tag=1,t=Do(null,t,r,e,n)):(t.tag=0,t=No(null,t,r,e,n))}return t;case 0:return No(e,t,t.type,t.pendingProps,n);case 1:return Do(e,t,r=t.type,i=mo(r,t.pendingProps),n);case 3:e:{if(G(t,t.stateNode.containerInfo),null===e)throw Error(l(387));r=t.pendingProps;var a=t.memoizedState;i=a.element,na(e,t),ua(t,r,null,n);var o=t.memoizedState;if(r=o.cache,yi(0,zi,r),r!==a.cache&&wi(t,[zi],n,!0),sa(),r=o.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:o.cache},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Bo(e,t,r,n);break e}if(r!==i){hi(i=Cr(Error(l(424)),t)),t=Bo(e,t,r,n);break e}for(e=9===(e=t.stateNode.containerInfo).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,ri=gd(e.firstChild),ni=t,ii=!0,ai=null,li=!0,n=to(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(fi(),r===i){t=Yo(e,t,n);break e}Eo(e,t,r,n)}t=t.child}return t;case 26:return Lo(e,t),null===e?(n=Ed(t.type,null,t.pendingProps,null))?t.memoizedState=n:ii||(n=t.type,e=t.pendingProps,(r=nd(V.current).createElement(n))[ze]=t,r[Oe]=e,Zc(r,n,e),Ue(r),t.stateNode=r):t.memoizedState=Ed(t.type,e.memoizedProps,t.pendingProps,e.memoizedState),null;case 27:return W(t),null===e&&ii&&(r=t.stateNode=bd(t.type,t.pendingProps,V.current),ni=t,li=!0,i=ri,fd(t.type)?(vd=i,ri=gd(r.firstChild)):ri=i),Eo(e,t,t.pendingProps.children,n),Lo(e,t),null===e&&(t.flags|=4194304),t.child;case 5:return null===e&&ii&&((i=r=ri)&&(null!==(r=function(e,t,n,r){for(;1===e.nodeType;){var i=n;if(e.nodeName.toLowerCase()!==t.toLowerCase()){if(!r&&("INPUT"!==e.nodeName||"hidden"!==e.type))break}else if(r){if(!e[Fe])switch(t){case"meta":if(!e.hasAttribute("itemprop"))break;return e;case"link":if("stylesheet"===(a=e.getAttribute("rel"))&&e.hasAttribute("data-precedence"))break;if(a!==i.rel||e.getAttribute("href")!==(null==i.href||""===i.href?null:i.href)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin)||e.getAttribute("title")!==(null==i.title?null:i.title))break;return e;case"style":if(e.hasAttribute("data-precedence"))break;return e;case"script":if(((a=e.getAttribute("src"))!==(null==i.src?null:i.src)||e.getAttribute("type")!==(null==i.type?null:i.type)||e.getAttribute("crossorigin")!==(null==i.crossOrigin?null:i.crossOrigin))&&a&&e.hasAttribute("async")&&!e.hasAttribute("itemprop"))break;return e;default:return e}}else{if("input"!==t||"hidden"!==e.type)return e;var a=null==i.name?null:""+i.name;if("hidden"===i.type&&e.getAttribute("name")===a)return e}if(null===(e=gd(e.nextSibling)))break}return null}(r,t.type,t.pendingProps,li))?(t.stateNode=r,ni=t,ri=gd(r.firstChild),li=!1,i=!0):i=!1),i||si(t)),W(t),i=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,r=a.children,ad(i,a)?r=null:null!==o&&ad(i,o)&&(t.flags|=32),null!==t.memoizedState&&(i=Ma(e,t,La,null,null,n),Wd._currentValue=i),Lo(e,t),Eo(e,t,r,n),t.child;case 6:return null===e&&ii&&((e=n=ri)&&(null!==(n=function(e,t,n){if(""===t)return null;for(;3!==e.nodeType;){if((1!==e.nodeType||"INPUT"!==e.nodeName||"hidden"!==e.type)&&!n)return null;if(null===(e=gd(e.nextSibling)))return null}return e}(n,t.pendingProps,li))?(t.stateNode=n,ni=t,ri=null,e=!0):e=!1),e||si(t)),null;case 13:return jo(e,t,n);case 4:return G(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=eo(t,null,r,n):Eo(e,t,r,n),t.child;case 11:return To(e,t,t.type,t.pendingProps,n);case 7:return Eo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Eo(e,t,t.pendingProps.children,n),t.child;case 10:return r=t.pendingProps,yi(0,t.type,r.value),Eo(e,t,r.children,n),t.child;case 9:return i=t.type._context,r=t.pendingProps.children,Si(t),r=r(i=xi(i)),t.flags|=1,Eo(e,t,r,n),t.child;case 14:return Po(e,t,t.type,t.pendingProps,n);case 15:return Mo(e,t,t.type,t.pendingProps,n);case 19:return Wo(e,t,n);case 31:return r=t.pendingProps,n=t.mode,r={mode:r.mode,children:r.children},null===e?((n=Vo(r,n)).ref=t.ref,t.child=n,n.return=t,t=n):((n=Br(e.child,r)).ref=t.ref,t.child=n,n.return=t,t=n),t;case 22:return zo(e,t,n);case 24:return Si(t),r=xi(zi),null===e?(null===(i=ji())&&(i=nu,a=Oi(),i.pooledCache=a,a.refCount++,null!==a&&(i.pooledCacheLanes|=n),i=a),t.memoizedState={parent:r,cache:i},ta(t),yi(0,zi,i)):(!!(e.lanes&n)&&(na(e,t),ua(t,null,null,n),sa()),i=e.memoizedState,a=t.memoizedState,i.parent!==r?(i={parent:r,cache:r},t.memoizedState=i,0===t.lanes&&(t.memoizedState=t.updateQueue.baseState=i),yi(0,zi,r)):(r=a.cache,yi(0,zi,r),r!==i.cache&&wi(t,[zi],n,!0))),Eo(e,t,t.pendingProps.children,n),t.child;case 29:throw t.pendingProps}throw Error(l(156,t.tag))}function Ko(e){e.flags|=4}function Jo(e,t){if("stylesheet"!==t.type||4&t.state.loading)e.flags&=-16777217;else if(e.flags|=16777216,!$d(t)){if(null!==(t=no.current)&&((4194048&iu)===iu?null!==ro:(62914560&iu)!==iu&&!(536870912&iu)||t!==ro))throw Ki=Wi,Gi;e.flags|=8192}}function Zo(e,t){null!==t&&(e.flags|=4),16384&e.flags&&(t=22!==e.tag?Ae():536870912,e.lanes|=t,gu|=t)}function es(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=65011712&i.subtreeFlags,r|=65011712&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ns(e,t,n){var r=t.pendingProps;switch(ti(t),t.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return ts(t),null;case 3:return n=t.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),t.memoizedState.cache!==r&&(t.flags|=2048),bi(zi),q(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||(di(t)?Ko(t):null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,pi())),ts(t),null;case 26:return n=t.memoizedState,null===e?(Ko(t),null!==n?(ts(t),Jo(t,n)):(ts(t),t.flags&=-16777217)):n?n!==e.memoizedState?(Ko(t),ts(t),Jo(t,n)):(ts(t),t.flags&=-16777217):(e.memoizedProps!==r&&Ko(t),ts(t),t.flags&=-16777217),null;case 27:Y(t),n=V.current;var i=t.type;if(null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ko(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return ts(t),null}e=j.current,di(t)?ui(t):(e=bd(i,r,n),t.stateNode=e,Ko(t))}return ts(t),null;case 5:if(Y(t),n=t.type,null!==e&&null!=t.stateNode)e.memoizedProps!==r&&Ko(t);else{if(!r){if(null===t.stateNode)throw Error(l(166));return ts(t),null}if(e=j.current,di(t))ui(t);else{switch(i=nd(V.current),e){case 1:e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case 2:e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;default:switch(n){case"svg":e=i.createElementNS("http://www.w3.org/2000/svg",n);break;case"math":e=i.createElementNS("http://www.w3.org/1998/Math/MathML",n);break;case"script":(e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild);break;case"select":e="string"==typeof r.is?i.createElement("select",{is:r.is}):i.createElement("select"),r.multiple?e.multiple=!0:r.size&&(e.size=r.size);break;default:e="string"==typeof r.is?i.createElement(n,{is:r.is}):i.createElement(n)}}e[ze]=t,e[Oe]=r;e:for(i=t.child;null!==i;){if(5===i.tag||6===i.tag)e.appendChild(i.stateNode);else if(4!==i.tag&&27!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break e;for(;null===i.sibling;){if(null===i.return||i.return===t)break e;i=i.return}i.sibling.return=i.return,i=i.sibling}t.stateNode=e;e:switch(Zc(e,n,r),n){case"button":case"input":case"select":case"textarea":e=!!r.autoFocus;break e;case"img":e=!0;break e;default:e=!1}e&&Ko(t)}}return ts(t),t.flags&=-16777217,null;case 6:if(e&&null!=t.stateNode)e.memoizedProps!==r&&Ko(t);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(e=V.current,di(t)){if(e=t.stateNode,n=t.memoizedProps,r=null,null!==(i=ni))switch(i.tag){case 27:case 5:r=i.memoizedProps}e[ze]=t,(e=!!(e.nodeValue===n||null!==r&&!0===r.suppressHydrationWarning||Qc(e.nodeValue,n)))||si(t)}else(e=nd(e).createTextNode(r))[ze]=t,t.stateNode=e}return ts(t),null;case 13:if(r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(i=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(l(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(l(317));i[ze]=t}else fi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ts(t),i=!1}else i=pi(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=i),i=!0;if(!i)return 256&t.flags?(oo(t),t):(oo(t),null)}if(oo(t),128&t.flags)return t.lanes=n,t;if(n=null!==r,e=null!==e&&null!==e.memoizedState,n){i=null,null!==(r=t.child).alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(i=r.alternate.memoizedState.cachePool.pool);var a=null;null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==i&&(r.flags|=2048)}return n!==e&&n&&(t.child.flags|=8192),Zo(t,t.updateQueue),ts(t),null;case 4:return q(),null===e&&Rc(t.stateNode.containerInfo),ts(t),null;case 10:return bi(t.type),ts(t),null;case 19:if(R(so),null===(i=t.memoizedState))return ts(t),null;if(r=!!(128&t.flags),null===(a=i.rendering))if(r)es(i,!1);else{if(0!==du||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(a=uo(e))){for(t.flags|=128,es(i,!1),e=a.updateQueue,t.updateQueue=e,Zo(t,e),t.subtreeFlags=0,e=n,n=t.child;null!==n;)Fr(n,e),n=n.sibling;return $(so,1&so.current|2),t.child}e=e.sibling}null!==i.tail&&ee()>wu&&(t.flags|=128,r=!0,es(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=uo(a))){if(t.flags|=128,r=!0,e=e.updateQueue,t.updateQueue=e,Zo(t,e),es(i,!0),null===i.tail&&"hidden"===i.tailMode&&!a.alternate&&!ii)return ts(t),null}else 2*ee()-i.renderingStartTime>wu&&536870912!==n&&(t.flags|=128,r=!0,es(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(null!==(e=i.last)?e.sibling=a:t.child=a,i.last=a)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ee(),t.sibling=null,e=so.current,$(so,r?1&e|2:1&e),t):(ts(t),null);case 22:case 23:return oo(t),ga(),r=null!==t.memoizedState,null!==e?null!==e.memoizedState!==r&&(t.flags|=8192):r&&(t.flags|=8192),r?!!(536870912&n)&&!(128&t.flags)&&(ts(t),6&t.subtreeFlags&&(t.flags|=8192)):ts(t),null!==(n=t.updateQueue)&&Zo(t,n.retryQueue),n=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),r=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(r=t.memoizedState.cachePool.pool),r!==n&&(t.flags|=2048),null!==e&&R($i),null;case 24:return n=null,null!==e&&(n=e.memoizedState.cache),t.memoizedState.cache!==n&&(t.flags|=2048),bi(zi),ts(t),null;case 25:case 30:return null}throw Error(l(156,t.tag))}function rs(e,t){switch(ti(t),t.tag){case 1:return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return bi(zi),q(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 26:case 27:case 5:return Y(t),null;case 13:if(oo(t),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));fi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return R(so),null;case 4:return q(),null;case 10:return bi(t.type),null;case 22:case 23:return oo(t),ga(),null!==e&&R($i),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 24:return bi(zi),null;default:return null}}function is(e,t){switch(ti(t),t.tag){case 3:bi(zi),q();break;case 26:case 27:case 5:Y(t);break;case 4:q();break;case 13:oo(t);break;case 19:R(so);break;case 10:bi(t.type);break;case 22:case 23:oo(t),ga(),null!==e&&R($i);break;case 24:bi(zi)}}function as(e,t){try{var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var i=r.next;n=i;do{if((n.tag&e)===e){r=void 0;var a=n.create,l=n.inst;r=a(),l.destroy=r}n=n.next}while(n!==i)}}catch(e){uc(t,t.return,e)}}function ls(e,t,n){try{var r=t.updateQueue,i=null!==r?r.lastEffect:null;if(null!==i){var a=i.next;r=a;do{if((r.tag&e)===e){var l=r.inst,o=l.destroy;if(void 0!==o){l.destroy=void 0,i=t;var s=n,u=o;try{u()}catch(e){uc(i,s,e)}}}r=r.next}while(r!==a)}}catch(e){uc(t,t.return,e)}}function os(e){var t=e.updateQueue;if(null!==t){var n=e.stateNode;try{da(t,n)}catch(t){uc(e,e.return,t)}}}function ss(e,t,n){n.props=mo(e.type,e.memoizedProps),n.state=e.memoizedState;try{n.componentWillUnmount()}catch(n){uc(e,t,n)}}function us(e,t){try{var n=e.ref;if(null!==n){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}"function"==typeof n?e.refCleanup=n(r):n.current=r}}catch(n){uc(e,t,n)}}function cs(e,t){var n=e.ref,r=e.refCleanup;if(null!==n)if("function"==typeof r)try{r()}catch(n){uc(e,t,n)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if("function"==typeof n)try{n(null)}catch(n){uc(e,t,n)}else n.current=null}function ds(e){var t=e.type,n=e.memoizedProps,r=e.stateNode;try{e:switch(t){case"button":case"input":case"select":case"textarea":n.autoFocus&&r.focus();break e;case"img":n.src?r.src=n.src:n.srcSet&&(r.srcset=n.srcSet)}}catch(t){uc(e,e.return,t)}}function fs(e,t,n){try{var r=e.stateNode;!function(e,t,n,r){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"input":var i=null,a=null,o=null,s=null,u=null,c=null,d=null;for(h in n){var f=n[h];if(n.hasOwnProperty(h)&&null!=f)switch(h){case"checked":case"value":break;case"defaultValue":u=f;default:r.hasOwnProperty(h)||Kc(e,t,h,null,r,f)}}for(var p in r){var h=r[p];if(f=n[p],r.hasOwnProperty(p)&&(null!=h||null!=f))switch(p){case"type":a=h;break;case"name":i=h;break;case"checked":c=h;break;case"defaultChecked":d=h;break;case"value":o=h;break;case"defaultValue":s=h;break;case"children":case"dangerouslySetInnerHTML":if(null!=h)throw Error(l(137,t));break;default:h!==f&&Kc(e,t,p,h,r,f)}}return void mt(e,o,s,u,c,d,a,i);case"select":for(a in h=o=s=p=null,n)if(u=n[a],n.hasOwnProperty(a)&&null!=u)switch(a){case"value":break;case"multiple":h=u;default:r.hasOwnProperty(a)||Kc(e,t,a,null,r,u)}for(i in r)if(a=r[i],u=n[i],r.hasOwnProperty(i)&&(null!=a||null!=u))switch(i){case"value":p=a;break;case"defaultValue":s=a;break;case"multiple":o=a;default:a!==u&&Kc(e,t,i,a,r,u)}return t=s,n=o,r=h,void(null!=p?yt(e,!!n,p,!1):!!r!=!!n&&(null!=t?yt(e,!!n,t,!0):yt(e,!!n,n?[]:"",!1)));case"textarea":for(s in h=p=null,n)if(i=n[s],n.hasOwnProperty(s)&&null!=i&&!r.hasOwnProperty(s))switch(s){case"value":case"children":break;default:Kc(e,t,s,null,r,i)}for(o in r)if(i=r[o],a=n[o],r.hasOwnProperty(o)&&(null!=i||null!=a))switch(o){case"value":p=i;break;case"defaultValue":h=i;break;case"children":break;case"dangerouslySetInnerHTML":if(null!=i)throw Error(l(91));break;default:i!==a&&Kc(e,t,o,i,r,a)}return void bt(e,p,h);case"option":for(var m in n)p=n[m],n.hasOwnProperty(m)&&null!=p&&!r.hasOwnProperty(m)&&("selected"===m?e.selected=!1:Kc(e,t,m,null,r,p));for(u in r)p=r[u],h=n[u],!r.hasOwnProperty(u)||p===h||null==p&&null==h||("selected"===u?e.selected=p&&"function"!=typeof p&&"symbol"!=typeof p:Kc(e,t,u,p,r,h));return;case"img":case"link":case"area":case"base":case"br":case"col":case"embed":case"hr":case"keygen":case"meta":case"param":case"source":case"track":case"wbr":case"menuitem":for(var g in n)p=n[g],n.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&Kc(e,t,g,null,r,p);for(c in r)if(p=r[c],h=n[c],r.hasOwnProperty(c)&&p!==h&&(null!=p||null!=h))switch(c){case"children":case"dangerouslySetInnerHTML":if(null!=p)throw Error(l(137,t));break;default:Kc(e,t,c,p,r,h)}return;default:if(xt(t)){for(var v in n)p=n[v],n.hasOwnProperty(v)&&void 0!==p&&!r.hasOwnProperty(v)&&Jc(e,t,v,void 0,r,p);for(d in r)p=r[d],h=n[d],!r.hasOwnProperty(d)||p===h||void 0===p&&void 0===h||Jc(e,t,d,p,r,h);return}}for(var y in n)p=n[y],n.hasOwnProperty(y)&&null!=p&&!r.hasOwnProperty(y)&&Kc(e,t,y,null,r,p);for(f in r)p=r[f],h=n[f],!r.hasOwnProperty(f)||p===h||null==p&&null==h||Kc(e,t,f,p,r,h)}(r,e.type,n,t),r[Oe]=t}catch(t){uc(e,e.return,t)}}function ps(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&fd(e.type)||4===e.tag}function hs(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ps(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&fd(e.type))continue e;if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ms(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?(9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).insertBefore(e,t):((t=9===n.nodeType?n.body:"HTML"===n.nodeName?n.ownerDocument.body:n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xc));else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode,t=null),null!==(e=e.child)))for(ms(e,t,n),e=e.sibling;null!==e;)ms(e,t,n),e=e.sibling}function gs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&(27===r&&fd(e.type)&&(n=e.stateNode),null!==(e=e.child)))for(gs(e,t,n),e=e.sibling;null!==e;)gs(e,t,n),e=e.sibling}function vs(e){var t=e.stateNode,n=e.memoizedProps;try{for(var r=e.type,i=t.attributes;i.length;)t.removeAttributeNode(i[0]);Zc(t,r,n),t[ze]=e,t[Oe]=n}catch(t){uc(e,e.return,t)}}var ys=!1,bs=!1,_s=!1,ws="function"==typeof WeakSet?WeakSet:Set,As=null;function Cs(e,t,n){var r=n.flags;switch(n.tag){case 0:case 11:case 15:Ds(e,n),4&r&&as(5,n);break;case 1:if(Ds(e,n),4&r)if(e=n.stateNode,null===t)try{e.componentDidMount()}catch(e){uc(n,n.return,e)}else{var i=mo(n.type,t.memoizedProps);t=t.memoizedState;try{e.componentDidUpdate(i,t,e.__reactInternalSnapshotBeforeUpdate)}catch(e){uc(n,n.return,e)}}64&r&&os(n),512&r&&us(n,n.return);break;case 3:if(Ds(e,n),64&r&&null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 27:case 5:case 1:t=n.child.stateNode}try{da(e,t)}catch(e){uc(n,n.return,e)}}break;case 27:null===t&&4&r&&vs(n);case 26:case 5:Ds(e,n),null===t&&4&r&&ds(n),512&r&&us(n,n.return);break;case 12:Ds(e,n);break;case 13:Ds(e,n),4&r&&Ps(e,n),64&r&&null!==(e=n.memoizedState)&&null!==(e=e.dehydrated)&&function(e,t){var n=e.ownerDocument;if("$?"!==e.data||"complete"===n.readyState)t();else{var r=function(){t(),n.removeEventListener("DOMContentLoaded",r)};n.addEventListener("DOMContentLoaded",r),e._reactRetry=r}}(e,n=pc.bind(null,n));break;case 22:if(!(r=null!==n.memoizedState||ys)){t=null!==t&&null!==t.memoizedState||bs,i=ys;var a=bs;ys=r,(bs=t)&&!a?Fs(e,n,!!(8772&n.subtreeFlags)):Ds(e,n),ys=i,bs=a}break;case 30:break;default:Ds(e,n)}}function Ss(e){var t=e.alternate;null!==t&&(e.alternate=null,Ss(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&Re(t),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}var xs=null,ks=!1;function Es(e,t,n){for(n=n.child;null!==n;)Ts(e,t,n),n=n.sibling}function Ts(e,t,n){if(ce&&"function"==typeof ce.onCommitFiberUnmount)try{ce.onCommitFiberUnmount(ue,n)}catch(e){}switch(n.tag){case 26:bs||cs(n,t),Es(e,t,n),n.memoizedState?n.memoizedState.count--:n.stateNode&&(n=n.stateNode).parentNode.removeChild(n);break;case 27:bs||cs(n,t);var r=xs,i=ks;fd(n.type)&&(xs=n.stateNode,ks=!1),Es(e,t,n),_d(n.stateNode),xs=r,ks=i;break;case 5:bs||cs(n,t);case 6:if(r=xs,i=ks,xs=null,Es(e,t,n),ks=i,null!==(xs=r))if(ks)try{(9===xs.nodeType?xs.body:"HTML"===xs.nodeName?xs.ownerDocument.body:xs).removeChild(n.stateNode)}catch(e){uc(n,t,e)}else try{xs.removeChild(n.stateNode)}catch(e){uc(n,t,e)}break;case 18:null!==xs&&(ks?(pd(9===(e=xs).nodeType?e.body:"HTML"===e.nodeName?e.ownerDocument.body:e,n.stateNode),xf(e)):pd(xs,n.stateNode));break;case 4:r=xs,i=ks,xs=n.stateNode.containerInfo,ks=!0,Es(e,t,n),xs=r,ks=i;break;case 0:case 11:case 14:case 15:bs||ls(2,n,t),bs||ls(4,n,t),Es(e,t,n);break;case 1:bs||(cs(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount&&ss(n,t,r)),Es(e,t,n);break;case 21:Es(e,t,n);break;case 22:bs=(r=bs)||null!==n.memoizedState,Es(e,t,n),bs=r;break;default:Es(e,t,n)}}function Ps(e,t){if(null===t.memoizedState&&null!==(e=t.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{xf(e)}catch(e){uc(t,t.return,e)}}function Ms(e,t){var n=function(e){switch(e.tag){case 13:case 19:var t=e.stateNode;return null===t&&(t=e.stateNode=new ws),t;case 22:return null===(t=(e=e.stateNode)._retryCache)&&(t=e._retryCache=new ws),t;default:throw Error(l(435,e.tag))}}(e);t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}function zs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r],a=e,o=t,s=o;e:for(;null!==s;){switch(s.tag){case 27:if(fd(s.type)){xs=s.stateNode,ks=!1;break e}break;case 5:xs=s.stateNode,ks=!1;break e;case 3:case 4:xs=s.stateNode.containerInfo,ks=!0;break e}s=s.return}if(null===xs)throw Error(l(160));Ts(a,o,i),xs=null,ks=!1,null!==(a=i.alternate)&&(a.return=null),i.return=null}if(13878&t.subtreeFlags)for(t=t.child;null!==t;)Ls(t,e),t=t.sibling}var Os=null;function Ls(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:zs(t,e),Ns(e),4&r&&(ls(3,e,e.return),as(3,e),ls(5,e,e.return));break;case 1:zs(t,e),Ns(e),512&r&&(bs||null===n||cs(n,n.return)),64&r&&ys&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(n=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===n?r:n.concat(r));break;case 26:var i=Os;if(zs(t,e),Ns(e),512&r&&(bs||null===n||cs(n,n.return)),4&r){var a=null!==n?n.memoizedState:null;if(r=e.memoizedState,null===n)if(null===r)if(null===e.stateNode){e:{r=e.type,n=e.memoizedProps,i=i.ownerDocument||i;t:switch(r){case"title":(!(a=i.getElementsByTagName("title")[0])||a[Fe]||a[ze]||"http://www.w3.org/2000/svg"===a.namespaceURI||a.hasAttribute("itemprop"))&&(a=i.createElement(r),i.head.insertBefore(a,i.querySelector("head > title"))),Zc(a,r,n),a[ze]=e,Ue(a),r=a;break e;case"link":var o=Fd("link","href",i).get(r+(n.href||""));if(o)for(var s=0;s<o.length;s++)if((a=o[s]).getAttribute("href")===(null==n.href||""===n.href?null:n.href)&&a.getAttribute("rel")===(null==n.rel?null:n.rel)&&a.getAttribute("title")===(null==n.title?null:n.title)&&a.getAttribute("crossorigin")===(null==n.crossOrigin?null:n.crossOrigin)){o.splice(s,1);break t}Zc(a=i.createElement(r),r,n),i.head.appendChild(a);break;case"meta":if(o=Fd("meta","content",i).get(r+(n.content||"")))for(s=0;s<o.length;s++)if((a=o[s]).getAttribute("content")===(null==n.content?null:""+n.content)&&a.getAttribute("name")===(null==n.name?null:n.name)&&a.getAttribute("property")===(null==n.property?null:n.property)&&a.getAttribute("http-equiv")===(null==n.httpEquiv?null:n.httpEquiv)&&a.getAttribute("charset")===(null==n.charSet?null:n.charSet)){o.splice(s,1);break t}Zc(a=i.createElement(r),r,n),i.head.appendChild(a);break;default:throw Error(l(468,r))}a[ze]=e,Ue(a),r=a}e.stateNode=r}else Rd(i,e.type,e.stateNode);else e.stateNode=Ld(i,r,e.memoizedProps);else a!==r?(null===a?null!==n.stateNode&&(n=n.stateNode).parentNode.removeChild(n):a.count--,null===r?Rd(i,e.type,e.stateNode):Ld(i,r,e.memoizedProps)):null===r&&null!==e.stateNode&&fs(e,e.memoizedProps,n.memoizedProps)}break;case 27:zs(t,e),Ns(e),512&r&&(bs||null===n||cs(n,n.return)),null!==n&&4&r&&fs(e,e.memoizedProps,n.memoizedProps);break;case 5:if(zs(t,e),Ns(e),512&r&&(bs||null===n||cs(n,n.return)),32&e.flags){i=e.stateNode;try{wt(i,"")}catch(t){uc(e,e.return,t)}}4&r&&null!=e.stateNode&&fs(e,i=e.memoizedProps,null!==n?n.memoizedProps:i),1024&r&&(_s=!0);break;case 6:if(zs(t,e),Ns(e),4&r){if(null===e.stateNode)throw Error(l(162));r=e.memoizedProps,n=e.stateNode;try{n.nodeValue=r}catch(t){uc(e,e.return,t)}}break;case 3:if(Bd=null,i=Os,Os=Cd(t.containerInfo),zs(t,e),Os=i,Ns(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{xf(t.containerInfo)}catch(t){uc(e,e.return,t)}_s&&(_s=!1,Is(e));break;case 4:r=Os,Os=Cd(e.stateNode.containerInfo),zs(t,e),Ns(e),Os=r;break;case 12:default:zs(t,e),Ns(e);break;case 13:zs(t,e),Ns(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==n&&null!==n.memoizedState)&&(_u=ee()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ms(e,r));break;case 22:i=null!==e.memoizedState;var u=null!==n&&null!==n.memoizedState,c=ys,d=bs;if(ys=c||i,bs=d||u,zs(t,e),bs=d,ys=c,Ns(e),8192&r)e:for(t=e.stateNode,t._visibility=i?-2&t._visibility:1|t._visibility,i&&(null===n||u||ys||bs||Bs(e)),n=null,t=e;;){if(5===t.tag||26===t.tag){if(null===n){u=n=t;try{if(a=u.stateNode,i)"function"==typeof(o=a.style).setProperty?o.setProperty("display","none","important"):o.display="none";else{s=u.stateNode;var f=u.memoizedProps.style,p=null!=f&&f.hasOwnProperty("display")?f.display:null;s.style.display=null==p||"boolean"==typeof p?"":(""+p).trim()}}catch(e){uc(u,u.return,e)}}}else if(6===t.tag){if(null===n){u=t;try{u.stateNode.nodeValue=i?"":u.memoizedProps}catch(e){uc(u,u.return,e)}}}else if((22!==t.tag&&23!==t.tag||null===t.memoizedState||t===e)&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;null===t.sibling;){if(null===t.return||t.return===e)break e;n===t&&(n=null),t=t.return}n===t&&(n=null),t.sibling.return=t.return,t=t.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(n=r.retryQueue)&&(r.retryQueue=null,Ms(e,n));break;case 19:zs(t,e),Ns(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,Ms(e,r));case 30:case 21:}}function Ns(e){var t=e.flags;if(2&t){try{for(var n,r=e.return;null!==r;){if(ps(r)){n=r;break}r=r.return}if(null==n)throw Error(l(160));switch(n.tag){case 27:var i=n.stateNode;gs(e,hs(e),i);break;case 5:var a=n.stateNode;32&n.flags&&(wt(a,""),n.flags&=-33),gs(e,hs(e),a);break;case 3:case 4:var o=n.stateNode.containerInfo;ms(e,hs(e),o);break;default:throw Error(l(161))}}catch(t){uc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function Is(e){if(1024&e.subtreeFlags)for(e=e.child;null!==e;){var t=e;Is(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),e=e.sibling}}function Ds(e,t){if(8772&t.subtreeFlags)for(t=t.child;null!==t;)Cs(e,t.alternate,t),t=t.sibling}function Bs(e){for(e=e.child;null!==e;){var t=e;switch(t.tag){case 0:case 11:case 14:case 15:ls(4,t,t.return),Bs(t);break;case 1:cs(t,t.return);var n=t.stateNode;"function"==typeof n.componentWillUnmount&&ss(t,t.return,n),Bs(t);break;case 27:_d(t.stateNode);case 26:case 5:cs(t,t.return),Bs(t);break;case 22:null===t.memoizedState&&Bs(t);break;default:Bs(t)}e=e.sibling}}function Fs(e,t,n){for(n=n&&!!(8772&t.subtreeFlags),t=t.child;null!==t;){var r=t.alternate,i=e,a=t,l=a.flags;switch(a.tag){case 0:case 11:case 15:Fs(i,a,n),as(4,a);break;case 1:if(Fs(i,a,n),"function"==typeof(i=(r=a).stateNode).componentDidMount)try{i.componentDidMount()}catch(e){uc(r,r.return,e)}if(null!==(i=(r=a).updateQueue)){var o=r.stateNode;try{var s=i.shared.hiddenCallbacks;if(null!==s)for(i.shared.hiddenCallbacks=null,i=0;i<s.length;i++)ca(s[i],o)}catch(e){uc(r,r.return,e)}}n&&64&l&&os(a),us(a,a.return);break;case 27:vs(a);case 26:case 5:Fs(i,a,n),n&&null===r&&4&l&&ds(a),us(a,a.return);break;case 12:Fs(i,a,n);break;case 13:Fs(i,a,n),n&&4&l&&Ps(i,a);break;case 22:null===a.memoizedState&&Fs(i,a,n),us(a,a.return);break;case 30:break;default:Fs(i,a,n)}t=t.sibling}}function Rs(e,t){var n=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(n=e.memoizedState.cachePool.pool),e=null,null!==t.memoizedState&&null!==t.memoizedState.cachePool&&(e=t.memoizedState.cachePool.pool),e!==n&&(null!=e&&e.refCount++,null!=n&&Li(n))}function $s(e,t){e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Li(e))}function js(e,t,n,r){if(10256&t.subtreeFlags)for(t=t.child;null!==t;)Hs(e,t,n,r),t=t.sibling}function Hs(e,t,n,r){var i=t.flags;switch(t.tag){case 0:case 11:case 15:js(e,t,n,r),2048&i&&as(9,t);break;case 1:case 13:default:js(e,t,n,r);break;case 3:js(e,t,n,r),2048&i&&(e=null,null!==t.alternate&&(e=t.alternate.memoizedState.cache),(t=t.memoizedState.cache)!==e&&(t.refCount++,null!=e&&Li(e)));break;case 12:if(2048&i){js(e,t,n,r),e=t.stateNode;try{var a=t.memoizedProps,l=a.id,o=a.onPostCommit;"function"==typeof o&&o(l,null===t.alternate?"mount":"update",e.passiveEffectDuration,-0)}catch(e){uc(t,t.return,e)}}else js(e,t,n,r);break;case 23:break;case 22:a=t.stateNode,l=t.alternate,null!==t.memoizedState?2&a._visibility?js(e,t,n,r):Us(e,t):2&a._visibility?js(e,t,n,r):(a._visibility|=2,Vs(e,t,n,r,!!(10256&t.subtreeFlags))),2048&i&&Rs(l,t);break;case 24:js(e,t,n,r),2048&i&&$s(t.alternate,t)}}function Vs(e,t,n,r,i){for(i=i&&!!(10256&t.subtreeFlags),t=t.child;null!==t;){var a=e,l=t,o=n,s=r,u=l.flags;switch(l.tag){case 0:case 11:case 15:Vs(a,l,o,s,i),as(8,l);break;case 23:break;case 22:var c=l.stateNode;null!==l.memoizedState?2&c._visibility?Vs(a,l,o,s,i):Us(a,l):(c._visibility|=2,Vs(a,l,o,s,i)),i&&2048&u&&Rs(l.alternate,l);break;case 24:Vs(a,l,o,s,i),i&&2048&u&&$s(l.alternate,l);break;default:Vs(a,l,o,s,i)}t=t.sibling}}function Us(e,t){if(10256&t.subtreeFlags)for(t=t.child;null!==t;){var n=e,r=t,i=r.flags;switch(r.tag){case 22:Us(n,r),2048&i&&Rs(r.alternate,r);break;case 24:Us(n,r),2048&i&&$s(r.alternate,r);break;default:Us(n,r)}t=t.sibling}}var Gs=8192;function qs(e){if(e.subtreeFlags&Gs)for(e=e.child;null!==e;)Ws(e),e=e.sibling}function Ws(e){switch(e.tag){case 26:qs(e),e.flags&Gs&&null!==e.memoizedState&&function(e,t,n){if(null===jd)throw Error(l(475));var r=jd;if(!("stylesheet"!==t.type||"string"==typeof n.media&&!1===matchMedia(n.media).matches||4&t.state.loading)){if(null===t.instance){var i=Td(n.href),a=e.querySelector(Pd(i));if(a)return null!==(e=a._p)&&"object"==typeof e&&"function"==typeof e.then&&(r.count++,r=Vd.bind(r),e.then(r,r)),t.state.loading|=4,t.instance=a,void Ue(a);a=e.ownerDocument||e,n=Md(n),(i=wd.get(i))&&Id(n,i),Ue(a=a.createElement("link"));var o=a;o._p=new Promise((function(e,t){o.onload=e,o.onerror=t})),Zc(a,"link",n),t.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(t,e),(e=t.state.preload)&&!(3&t.state.loading)&&(r.count++,t=Vd.bind(r),e.addEventListener("load",t),e.addEventListener("error",t))}}(Os,e.memoizedState,e.memoizedProps);break;case 5:default:qs(e);break;case 3:case 4:var t=Os;Os=Cd(e.stateNode.containerInfo),qs(e),Os=t;break;case 22:null===e.memoizedState&&(null!==(t=e.alternate)&&null!==t.memoizedState?(t=Gs,Gs=16777216,qs(e),Gs=t):qs(e))}}function Ys(e){var t=e.alternate;if(null!==t&&null!==(e=t.child)){t.child=null;do{t=e.sibling,e.sibling=null,e=t}while(null!==e)}}function Qs(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];As=r,Js(r,e)}Ys(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)Xs(e),e=e.sibling}function Xs(e){switch(e.tag){case 0:case 11:case 15:Qs(e),2048&e.flags&&ls(9,e,e.return);break;case 3:case 12:default:Qs(e);break;case 22:var t=e.stateNode;null!==e.memoizedState&&2&t._visibility&&(null===e.return||13!==e.return.tag)?(t._visibility&=-3,Ks(e)):Qs(e)}}function Ks(e){var t=e.deletions;if(16&e.flags){if(null!==t)for(var n=0;n<t.length;n++){var r=t[n];As=r,Js(r,e)}Ys(e)}for(e=e.child;null!==e;){switch((t=e).tag){case 0:case 11:case 15:ls(8,t,t.return),Ks(t);break;case 22:2&(n=t.stateNode)._visibility&&(n._visibility&=-3,Ks(t));break;default:Ks(t)}e=e.sibling}}function Js(e,t){for(;null!==As;){var n=As;switch(n.tag){case 0:case 11:case 15:ls(8,n,t);break;case 23:case 22:if(null!==n.memoizedState&&null!==n.memoizedState.cachePool){var r=n.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:Li(n.memoizedState.cache)}if(null!==(r=n.child))r.return=n,As=r;else e:for(n=e;null!==As;){var i=(r=As).sibling,a=r.return;if(Ss(r),r===n){As=null;break e}if(null!==i){i.return=a,As=i;break e}As=a}}}var Zs={getCacheForType:function(e){var t=xi(zi),n=t.data.get(e);return void 0===n&&(n=e(),t.data.set(e,n)),n}},eu="function"==typeof WeakMap?WeakMap:Map,tu=0,nu=null,ru=null,iu=0,au=0,lu=null,ou=!1,su=!1,uu=!1,cu=0,du=0,fu=0,pu=0,hu=0,mu=0,gu=0,vu=null,yu=null,bu=!1,_u=0,wu=1/0,Au=null,Cu=null,Su=0,xu=null,ku=null,Eu=0,Tu=0,Pu=null,Mu=null,zu=0,Ou=null;function Lu(){return 2&tu&&0!==iu?iu&-iu:null!==L.T?0!==Di?Di:Tc():Pe()}function Nu(){0===mu&&(mu=536870912&iu&&!ii?536870912:we());var e=no.current;return null!==e&&(e.flags|=32),mu}function Iu(e,t,n){(e!==nu||2!==au&&9!==au)&&null===e.cancelPendingCommit||(Hu(e,0),Ru(e,iu,mu,!1)),Se(e,n),2&tu&&e===nu||(e===nu&&(!(2&tu)&&(pu|=n),4===du&&Ru(e,iu,mu,!1)),wc(e))}function Du(e,t,n){if(6&tu)throw Error(l(327));for(var r=!n&&!(124&t)&&!(t&e.expiredLanes)||be(e,t),i=r?function(e,t){var n=tu;tu|=2;var r=Uu(),i=Gu();nu!==e||iu!==t?(Au=null,wu=ee()+500,Hu(e,t)):su=be(e,t);e:for(;;)try{if(0!==au&&null!==ru){t=ru;var a=lu;t:switch(au){case 1:au=0,lu=null,Ju(e,t,a,1);break;case 2:case 9:if(Yi(a)){au=0,lu=null,Ku(t);break}t=function(){2!==au&&9!==au||nu!==e||(au=7),wc(e)},a.then(t,t);break e;case 3:au=7;break e;case 4:au=5;break e;case 7:Yi(a)?(au=0,lu=null,Ku(t)):(au=0,lu=null,Ju(e,t,a,7));break;case 5:var o=null;switch(ru.tag){case 26:o=ru.memoizedState;case 5:case 27:var s=ru;if(!o||$d(o)){au=0,lu=null;var u=s.sibling;if(null!==u)ru=u;else{var c=s.return;null!==c?(ru=c,Zu(c)):ru=null}break t}}au=0,lu=null,Ju(e,t,a,5);break;case 6:au=0,lu=null,Ju(e,t,a,6);break;case 8:ju(),du=6;break e;default:throw Error(l(462))}}Qu();break}catch(t){Vu(e,t)}return vi=gi=null,L.H=r,L.A=i,tu=n,null!==ru?0:(nu=null,iu=0,Er(),du)}(e,t):Wu(e,t,!0),a=r;;){if(0===i){su&&!r&&Ru(e,t,0,!1);break}if(n=e.current.alternate,!a||Fu(n)){if(2===i){if(a=t,e.errorRecoveryDisabledLanes&a)var o=0;else o=0!=(o=-536870913&e.pendingLanes)?o:536870912&o?536870912:0;if(0!==o){t=o;e:{var s=e;i=vu;var u=s.current.memoizedState.isDehydrated;if(u&&(Hu(s,o).flags|=256),2!==(o=Wu(s,o,!1))){if(uu&&!u){s.errorRecoveryDisabledLanes|=a,pu|=a,i=4;break e}a=yu,yu=i,null!==a&&(null===yu?yu=a:yu.push.apply(yu,a))}i=o}if(a=!1,2!==i)continue}}if(1===i){Hu(e,0),Ru(e,t,0,!0);break}e:{switch(r=e,a=i){case 0:case 1:throw Error(l(345));case 4:if((4194048&t)!==t)break;case 6:Ru(r,t,mu,!ou);break e;case 2:yu=null;break;case 3:case 5:break;default:throw Error(l(329))}if((62914560&t)===t&&10<(i=_u+300-ee())){if(Ru(r,t,mu,!ou),0!==ye(r,0,!0))break e;r.timeoutHandle=od(Bu.bind(null,r,n,yu,Au,bu,t,mu,pu,gu,ou,a,2,-0,0),i)}else Bu(r,n,yu,Au,bu,t,mu,pu,gu,ou,a,0,-0,0)}break}i=Wu(e,t,!1),a=!1}wc(e)}function Bu(e,t,n,r,i,a,o,s,u,c,d,f,p,h){if(e.timeoutHandle=-1,(8192&(f=t.subtreeFlags)||!(16785408&~f))&&(jd={stylesheets:null,count:0,unsuspend:Hd},Ws(t),null!==(f=function(){if(null===jd)throw Error(l(475));var e=jd;return e.stylesheets&&0===e.count&&Gd(e,e.stylesheets),0<e.count?function(t){var n=setTimeout((function(){if(e.stylesheets&&Gd(e,e.stylesheets),e.unsuspend){var t=e.unsuspend;e.unsuspend=null,t()}}),6e4);return e.unsuspend=t,function(){e.unsuspend=null,clearTimeout(n)}}:null}())))return e.cancelPendingCommit=f(tc.bind(null,e,t,a,n,r,i,o,s,u,d,1,p,h)),void Ru(e,a,o,!c);tc(e,t,a,n,r,i,o,s,u)}function Fu(e){for(var t=e;;){var n=t.tag;if((0===n||11===n||15===n)&&16384&t.flags&&null!==(n=t.updateQueue)&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!Yn(a(),i))return!1}catch(e){return!1}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ru(e,t,n,r){t&=~hu,t&=~pu,e.suspendedLanes|=t,e.pingedLanes&=~t,r&&(e.warmLanes|=t),r=e.expirationTimes;for(var i=t;0<i;){var a=31-fe(i),l=1<<a;r[a]=-1,i&=~l}0!==n&&xe(e,n,t)}function $u(){return!!(6&tu)||(Ac(0,!1),!1)}function ju(){if(null!==ru){if(0===au)var e=ru.return;else vi=gi=null,Da(e=ru),Wl=null,Yl=0,e=ru;for(;null!==e;)is(e.alternate,e),e=e.return;ru=null}}function Hu(e,t){var n=e.timeoutHandle;-1!==n&&(e.timeoutHandle=-1,sd(n)),null!==(n=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,n()),ju(),nu=e,ru=n=Br(e.current,null),iu=t,au=0,lu=null,ou=!1,su=be(e,t),uu=!1,gu=mu=hu=pu=fu=du=0,yu=vu=null,bu=!1,8&t&&(t|=32&t);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=t;0<r;){var i=31-fe(r),a=1<<i;t|=e[i],r&=~a}return cu=t,Er(),n}function Vu(e,t){ya=null,L.H=Vl,t===Ui||t===qi?(t=Ji(),au=3):t===Gi?(t=Ji(),au=4):au=t===xo?8:null!==t&&"object"==typeof t&&"function"==typeof t.then?6:1,lu=t,null===ru&&(du=1,_o(e,Cr(t,e.current)))}function Uu(){var e=L.H;return L.H=Vl,null===e?Vl:e}function Gu(){var e=L.A;return L.A=Zs,e}function qu(){du=4,ou||(4194048&iu)!==iu&&null!==no.current||(su=!0),!(134217727&fu)&&!(134217727&pu)||null===nu||Ru(nu,iu,mu,!1)}function Wu(e,t,n){var r=tu;tu|=2;var i=Uu(),a=Gu();nu===e&&iu===t||(Au=null,Hu(e,t)),t=!1;var l=du;e:for(;;)try{if(0!==au&&null!==ru){var o=ru,s=lu;switch(au){case 8:ju(),l=6;break e;case 3:case 2:case 9:case 6:null===no.current&&(t=!0);var u=au;if(au=0,lu=null,Ju(e,o,s,u),n&&su){l=0;break e}break;default:u=au,au=0,lu=null,Ju(e,o,s,u)}}Yu(),l=du;break}catch(t){Vu(e,t)}return t&&e.shellSuspendCounter++,vi=gi=null,tu=r,L.H=i,L.A=a,null===ru&&(nu=null,iu=0,Er()),l}function Yu(){for(;null!==ru;)Xu(ru)}function Qu(){for(;null!==ru&&!J();)Xu(ru)}function Xu(e){var t=Xo(e.alternate,e,cu);e.memoizedProps=e.pendingProps,null===t?Zu(e):ru=t}function Ku(e){var t=e,n=t.alternate;switch(t.tag){case 15:case 0:t=Io(n,t,t.pendingProps,t.type,void 0,iu);break;case 11:t=Io(n,t,t.pendingProps,t.type.render,t.ref,iu);break;case 5:Da(t);default:is(n,t),t=Xo(n,t=ru=Fr(t,cu),cu)}e.memoizedProps=e.pendingProps,null===t?Zu(e):ru=t}function Ju(e,t,n,r){vi=gi=null,Da(t),Wl=null,Yl=0;var i=t.return;try{if(function(e,t,n,r,i){if(n.flags|=32768,null!==r&&"object"==typeof r&&"function"==typeof r.then){if(null!==(t=n.alternate)&&Ai(t,n,i,!0),null!==(n=no.current)){switch(n.tag){case 13:return null===ro?qu():null===n.alternate&&0===du&&(du=3),n.flags&=-257,n.flags|=65536,n.lanes=i,r===Wi?n.flags|=16384:(null===(t=n.updateQueue)?n.updateQueue=new Set([r]):t.add(r),cc(e,r,i)),!1;case 22:return n.flags|=65536,r===Wi?n.flags|=16384:(null===(t=n.updateQueue)?(t={transitions:null,markerInstances:null,retryQueue:new Set([r])},n.updateQueue=t):null===(n=t.retryQueue)?t.retryQueue=new Set([r]):n.add(r),cc(e,r,i)),!1}throw Error(l(435,n.tag))}return cc(e,r,i),qu(),!1}if(ii)return null!==(t=no.current)?(!(65536&t.flags)&&(t.flags|=256),t.flags|=65536,t.lanes=i,r!==oi&&hi(Cr(e=Error(l(422),{cause:r}),n))):(r!==oi&&hi(Cr(t=Error(l(423),{cause:r}),n)),(e=e.current.alternate).flags|=65536,i&=-i,e.lanes|=i,r=Cr(r,n),la(e,i=Ao(e.stateNode,r,i)),4!==du&&(du=2)),!1;var a=Error(l(520),{cause:r});if(a=Cr(a,n),null===vu?vu=[a]:vu.push(a),4!==du&&(du=2),null===t)return!0;r=Cr(r,n),n=t;do{switch(n.tag){case 3:return n.flags|=65536,e=i&-i,n.lanes|=e,la(n,e=Ao(n.stateNode,r,e)),!1;case 1:if(t=n.type,a=n.stateNode,!(128&n.flags||"function"!=typeof t.getDerivedStateFromError&&(null===a||"function"!=typeof a.componentDidCatch||null!==Cu&&Cu.has(a))))return n.flags|=65536,i&=-i,n.lanes|=i,So(i=Co(i),e,n,r),la(n,i),!1}n=n.return}while(null!==n);return!1}(e,i,t,n,iu))return du=1,_o(e,Cr(n,e.current)),void(ru=null)}catch(t){if(null!==i)throw ru=i,t;return du=1,_o(e,Cr(n,e.current)),void(ru=null)}32768&t.flags?(ii||1===r?e=!0:su||536870912&iu?e=!1:(ou=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=no.current)&&13===r.tag&&(r.flags|=16384)),ec(t,e)):Zu(t)}function Zu(e){var t=e;do{if(32768&t.flags)return void ec(t,ou);e=t.return;var n=ns(t.alternate,t,cu);if(null!==n)return void(ru=n);if(null!==(t=t.sibling))return void(ru=t);ru=t=e}while(null!==t);0===du&&(du=5)}function ec(e,t){do{var n=rs(e.alternate,e);if(null!==n)return n.flags&=32767,void(ru=n);if(null!==(n=e.return)&&(n.flags|=32768,n.subtreeFlags=0,n.deletions=null),!t&&null!==(e=e.sibling))return void(ru=e);ru=e=n}while(null!==e);du=6,ru=null}function tc(e,t,n,r,i,a,o,s,u){e.cancelPendingCommit=null;do{lc()}while(0!==Su);if(6&tu)throw Error(l(327));if(null!==t){if(t===e.current)throw Error(l(177));if(a=t.lanes|t.childLanes,function(e,t,n,r,i,a){var l=e.pendingLanes;e.pendingLanes=n,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=n,e.entangledLanes&=n,e.errorRecoveryDisabledLanes&=n,e.shellSuspendCounter=0;var o=e.entanglements,s=e.expirationTimes,u=e.hiddenUpdates;for(n=l&~n;0<n;){var c=31-fe(n),d=1<<c;o[c]=0,s[c]=-1;var f=u[c];if(null!==f)for(u[c]=null,c=0;c<f.length;c++){var p=f[c];null!==p&&(p.lane&=-536870913)}n&=~d}0!==r&&xe(e,r,0),0!==a&&0===i&&0!==e.tag&&(e.suspendedLanes|=a&~(l&~t))}(e,n,a|=kr,o,s,u),e===nu&&(ru=nu=null,iu=0),ku=t,xu=e,Eu=n,Tu=a,Pu=i,Mu=r,10256&t.subtreeFlags||10256&t.flags?(e.callbackNode=null,e.callbackPriority=0,X(ie,(function(){return oc(),null}))):(e.callbackNode=null,e.callbackPriority=0),r=!!(13878&t.flags),13878&t.subtreeFlags||r){r=L.T,L.T=null,i=N.p,N.p=2,o=tu,tu|=4;try{!function(e,t){if(e=e.containerInfo,ed=Zd,er(e=Zn(e))){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var o=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==i&&3!==f.nodeType||(s=o+i),f!==a||0!==r&&3!==f.nodeType||(u=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===i&&(s=o),p===a&&++d===r&&(u=o),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(td={focusedElem:e,selectionRange:n},Zd=!1,As=t;null!==As;)if(e=(t=As).child,1024&t.subtreeFlags&&null!==e)e.return=t,As=e;else for(;null!==As;){switch(a=(t=As).alternate,e=t.flags,t.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(1024&e&&null!==a){e=void 0,n=t,i=a.memoizedProps,a=a.memoizedState,r=n.stateNode;try{var m=mo(n.type,i,(n.elementType,n.type));e=r.getSnapshotBeforeUpdate(m,a),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){uc(n,n.return,e)}}break;case 3:if(1024&e)if(9===(n=(e=t.stateNode.containerInfo).nodeType))hd(e);else if(1===n)switch(e.nodeName){case"HEAD":case"HTML":case"BODY":hd(e);break;default:e.textContent=""}break;default:if(1024&e)throw Error(l(163))}if(null!==(e=t.sibling)){e.return=t.return,As=e;break}As=t.return}}(e,t)}finally{tu=o,N.p=i,L.T=r}}Su=1,nc(),rc(),ic()}}function nc(){if(1===Su){Su=0;var e=xu,t=ku,n=!!(13878&t.flags);if(13878&t.subtreeFlags||n){n=L.T,L.T=null;var r=N.p;N.p=2;var i=tu;tu|=4;try{Ls(t,e);var a=td,l=Zn(e.containerInfo),o=a.focusedElem,s=a.selectionRange;if(l!==o&&o&&o.ownerDocument&&Jn(o.ownerDocument.documentElement,o)){if(null!==s&&er(o)){var u=s.start,c=s.end;if(void 0===c&&(c=u),"selectionStart"in o)o.selectionStart=u,o.selectionEnd=Math.min(c,o.value.length);else{var d=o.ownerDocument||document,f=d&&d.defaultView||window;if(f.getSelection){var p=f.getSelection(),h=o.textContent.length,m=Math.min(s.start,h),g=void 0===s.end?m:Math.min(s.end,h);!p.extend&&m>g&&(l=g,g=m,m=l);var v=Kn(o,m),y=Kn(o,g);if(v&&y&&(1!==p.rangeCount||p.anchorNode!==v.node||p.anchorOffset!==v.offset||p.focusNode!==y.node||p.focusOffset!==y.offset)){var b=d.createRange();b.setStart(v.node,v.offset),p.removeAllRanges(),m>g?(p.addRange(b),p.extend(y.node,y.offset)):(b.setEnd(y.node,y.offset),p.addRange(b))}}}}for(d=[],p=o;p=p.parentNode;)1===p.nodeType&&d.push({element:p,left:p.scrollLeft,top:p.scrollTop});for("function"==typeof o.focus&&o.focus(),o=0;o<d.length;o++){var _=d[o];_.element.scrollLeft=_.left,_.element.scrollTop=_.top}}Zd=!!ed,td=ed=null}finally{tu=i,N.p=r,L.T=n}}e.current=t,Su=2}}function rc(){if(2===Su){Su=0;var e=xu,t=ku,n=!!(8772&t.flags);if(8772&t.subtreeFlags||n){n=L.T,L.T=null;var r=N.p;N.p=2;var i=tu;tu|=4;try{Cs(e,t.alternate,t)}finally{tu=i,N.p=r,L.T=n}}Su=3}}function ic(){if(4===Su||3===Su){Su=0,Z();var e=xu,t=ku,n=Eu,r=Mu;10256&t.subtreeFlags||10256&t.flags?Su=5:(Su=0,ku=xu=null,ac(e,e.pendingLanes));var i=e.pendingLanes;if(0===i&&(Cu=null),Te(n),t=t.stateNode,ce&&"function"==typeof ce.onCommitFiberRoot)try{ce.onCommitFiberRoot(ue,t,void 0,!(128&~t.current.flags))}catch(e){}if(null!==r){t=L.T,i=N.p,N.p=2,L.T=null;try{for(var a=e.onRecoverableError,l=0;l<r.length;l++){var o=r[l];a(o.value,{componentStack:o.stack})}}finally{L.T=t,N.p=i}}3&Eu&&lc(),wc(e),i=e.pendingLanes,4194090&n&&42&i?e===Ou?zu++:(zu=0,Ou=e):zu=0,Ac(0,!1)}}function ac(e,t){0==(e.pooledCacheLanes&=t)&&null!=(t=e.pooledCache)&&(e.pooledCache=null,Li(t))}function lc(e){return nc(),rc(),ic(),oc()}function oc(){if(5!==Su)return!1;var e=xu,t=Tu;Tu=0;var n=Te(Eu),r=L.T,i=N.p;try{N.p=32>n?32:n,L.T=null,n=Pu,Pu=null;var a=xu,o=Eu;if(Su=0,ku=xu=null,Eu=0,6&tu)throw Error(l(331));var s=tu;if(tu|=4,Xs(a.current),Hs(a,a.current,o,n),tu=s,Ac(0,!1),ce&&"function"==typeof ce.onPostCommitFiberRoot)try{ce.onPostCommitFiberRoot(ue,a)}catch(e){}return!0}finally{N.p=i,L.T=r,ac(e,t)}}function sc(e,t,n){t=Cr(n,t),null!==(e=ia(e,t=Ao(e.stateNode,t,2),2))&&(Se(e,2),wc(e))}function uc(e,t,n){if(3===e.tag)sc(e,e,n);else for(;null!==t;){if(3===t.tag){sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Cu||!Cu.has(r))){e=Cr(n,e),null!==(r=ia(t,n=Co(2),2))&&(So(n,r,t,e),Se(r,2),wc(r));break}}t=t.return}}function cc(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new eu;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(uu=!0,i.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),e.pingedLanes|=e.suspendedLanes&n,e.warmLanes&=~n,nu===e&&(iu&n)===n&&(4===du||3===du&&(62914560&iu)===iu&&300>ee()-_u?!(2&tu)&&Hu(e,0):hu|=n,gu===iu&&(gu=0)),wc(e)}function fc(e,t){0===t&&(t=Ae()),null!==(e=Mr(e,t))&&(Se(e,t),wc(e))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(l(314))}null!==r&&r.delete(t),fc(e,n)}var mc=null,gc=null,vc=!1,yc=!1,bc=!1,_c=0;function wc(e){e!==gc&&null===e.next&&(null===gc?mc=gc=e:gc=gc.next=e),yc=!0,vc||(vc=!0,cd((function(){6&tu?X(ne,Cc):Sc()})))}function Ac(e,t){if(!bc&&yc){bc=!0;do{for(var n=!1,r=mc;null!==r;){if(!t)if(0!==e){var i=r.pendingLanes;if(0===i)var a=0;else{var l=r.suspendedLanes,o=r.pingedLanes;a=(1<<31-fe(42|e)+1)-1,a=201326741&(a&=i&~(l&~o))?201326741&a|1:a?2|a:0}0!==a&&(n=!0,Ec(r,a))}else a=iu,!(3&(a=ye(r,r===nu?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||be(r,a)||(n=!0,Ec(r,a));r=r.next}}while(n);bc=!1}}function Cc(){Sc()}function Sc(){yc=vc=!1;var e,t=0;0!==_c&&(((e=window.event)&&"popstate"===e.type?e!==ld&&(ld=e,!0):(ld=null,!1))&&(t=_c),_c=0);for(var n=ee(),r=null,i=mc;null!==i;){var a=i.next,l=xc(i,n);0===l?(i.next=null,null===r?mc=a:r.next=a,null===a&&(gc=r)):(r=i,(0!==t||3&l)&&(yc=!0)),i=a}Ac(t,!1)}function xc(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=-62914561&e.pendingLanes;0<a;){var l=31-fe(a),o=1<<l,s=i[l];-1===s?o&n&&!(o&r)||(i[l]=_e(o,t)):s<=t&&(e.expiredLanes|=o),a&=~o}if(n=iu,n=ye(e,e===(t=nu)?n:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===n||e===t&&(2===au||9===au)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&K(r),e.callbackNode=null,e.callbackPriority=0;if(!(3&n)||be(e,n)){if((t=n&-n)===e.callbackPriority)return t;switch(null!==r&&K(r),Te(n)){case 2:case 8:n=re;break;case 32:default:n=ie;break;case 268435456:n=le}return r=kc.bind(null,e),n=X(n,r),e.callbackPriority=t,e.callbackNode=n,t}return null!==r&&null!==r&&K(r),e.callbackPriority=2,e.callbackNode=null,2}function kc(e,t){if(0!==Su&&5!==Su)return e.callbackNode=null,e.callbackPriority=0,null;var n=e.callbackNode;if(lc()&&e.callbackNode!==n)return null;var r=iu;return 0===(r=ye(e,e===nu?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(Du(e,r,t),xc(e,ee()),null!=e.callbackNode&&e.callbackNode===n?kc.bind(null,e):null)}function Ec(e,t){if(lc())return null;Du(e,t,!0)}function Tc(){return 0===_c&&(_c=we()),_c}function Pc(e){return null==e||"symbol"==typeof e||"boolean"==typeof e?null:"function"==typeof e?e:Tt(""+e)}function Mc(e,t){var n=t.ownerDocument.createElement("input");return n.name=t.name,n.value=t.value,e.id&&n.setAttribute("form",e.id),t.parentNode.insertBefore(n,t),e=new FormData(e),n.parentNode.removeChild(n),e}for(var zc=0;zc<_r.length;zc++){var Oc=_r[zc];wr(Oc.toLowerCase(),"on"+(Oc[0].toUpperCase()+Oc.slice(1)))}wr(fr,"onAnimationEnd"),wr(pr,"onAnimationIteration"),wr(hr,"onAnimationStart"),wr("dblclick","onDoubleClick"),wr("focusin","onFocus"),wr("focusout","onBlur"),wr(mr,"onTransitionRun"),wr(gr,"onTransitionStart"),wr(vr,"onTransitionCancel"),wr(yr,"onTransitionEnd"),Ye("onMouseEnter",["mouseout","mouseover"]),Ye("onMouseLeave",["mouseout","mouseover"]),Ye("onPointerEnter",["pointerout","pointerover"]),Ye("onPointerLeave",["pointerout","pointerover"]),We("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),We("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),We("onBeforeInput",["compositionend","keypress","textInput","paste"]),We("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),We("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lc="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Nc=new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(Lc));function Ic(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var l=r.length-1;0<=l;l--){var o=r[l],s=o.instance,u=o.currentTarget;if(o=o.listener,s!==a&&i.isPropagationStopped())break e;a=o,i.currentTarget=u;try{a(i)}catch(e){go(e)}i.currentTarget=null,a=s}else for(l=0;l<r.length;l++){if(s=(o=r[l]).instance,u=o.currentTarget,o=o.listener,s!==a&&i.isPropagationStopped())break e;a=o,i.currentTarget=u;try{a(i)}catch(e){go(e)}i.currentTarget=null,a=s}}}}function Dc(e,t){var n=t[Ne];void 0===n&&(n=t[Ne]=new Set);var r=e+"__bubble";n.has(r)||($c(t,e,2,!1),n.add(r))}function Bc(e,t,n){var r=0;t&&(r|=4),$c(n,e,r,t)}var Fc="_reactListening"+Math.random().toString(36).slice(2);function Rc(e){if(!e[Fc]){e[Fc]=!0,Ge.forEach((function(t){"selectionchange"!==t&&(Nc.has(t)||Bc(t,!1,e),Bc(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fc]||(t[Fc]=!0,Bc("selectionchange",!1,t))}}function $c(e,t,n,r){switch(of(t)){case 2:var i=ef;break;case 8:i=tf;break;default:i=nf}n=i.bind(null,t,n,e),i=void 0,!Ft||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function jc(e,t,n,r,i){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var l=r.tag;if(3===l||4===l){var s=r.stateNode.containerInfo;if(s===i)break;if(4===l)for(l=r.return;null!==l;){var u=l.tag;if((3===u||4===u)&&l.stateNode.containerInfo===i)return;l=l.return}for(;null!==s;){if(null===(l=$e(s)))return;if(5===(u=l.tag)||6===u||26===u||27===u){r=a=l;continue e}s=s.parentNode}}r=r.return}It((function(){var r=a,i=Mt(n),l=[];e:{var s=br.get(e);if(void 0!==s){var u=Jt,c=e;switch(e){case"keypress":if(0===Ut(n))break e;case"keydown":case"keyup":u=hn;break;case"focusin":c="focus",u=an;break;case"focusout":c="blur",u=an;break;case"beforeblur":case"afterblur":u=an;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=nn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=gn;break;case fr:case pr:case hr:u=ln;break;case yr:u=vn;break;case"scroll":case"scrollend":u=en;break;case"wheel":u=yn;break;case"copy":case"cut":case"paste":u=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=mn;break;case"toggle":case"beforetoggle":u=bn}var d=!!(4&t),f=!d&&("scroll"===e||"scrollend"===e),p=d?null!==s?s+"Capture":null:s;d=[];for(var h,m=r;null!==m;){var g=m;if(h=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===h||null===p||null!=(g=Dt(m,p))&&d.push(Hc(m,g,h)),f)break;m=m.return}0<d.length&&(s=new u(s,c,null,n,i),l.push({event:s,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===Pt||!(c=n.relatedTarget||n.fromElement)||!$e(c)&&!c[Le])&&(u||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?$e(c):null)&&(f=o(c),d=c.tag,c!==f||5!==d&&27!==d&&6!==d)&&(c=null)):(u=null,c=r),u!==c)){if(d=nn,g="onMouseLeave",p="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(d=mn,g="onPointerLeave",p="onPointerEnter",m="pointer"),f=null==u?s:He(u),h=null==c?s:He(c),(s=new d(g,m+"leave",u,n,i)).target=f,s.relatedTarget=h,g=null,$e(i)===r&&((d=new d(p,m+"enter",c,n,i)).target=h,d.relatedTarget=f,g=d),f=g,u&&c)e:{for(p=c,m=0,h=d=u;h;h=Uc(h))m++;for(h=0,g=p;g;g=Uc(g))h++;for(;0<m-h;)d=Uc(d),m--;for(;0<h-m;)p=Uc(p),h--;for(;m--;){if(d===p||null!==p&&d===p.alternate)break e;d=Uc(d),p=Uc(p)}d=null}else d=null;null!==u&&Gc(l,s,u,d,!1),null!==c&&null!==f&&Gc(l,f,c,d,!0)}if("select"===(u=(s=r?He(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var v=Bn;else if(zn(s))if(Fn)v=Wn;else{v=Gn;var y=Un}else!(u=s.nodeName)||"input"!==u.toLowerCase()||"checkbox"!==s.type&&"radio"!==s.type?r&&xt(r.elementType)&&(v=Bn):v=qn;switch(v&&(v=v(e,r))?On(l,v,n,i):(y&&y(e,s,r),"focusout"===e&&r&&"number"===s.type&&null!=r.memoizedProps.value&&vt(s,"number",s.value)),y=r?He(r):window,e){case"focusin":(zn(y)||"true"===y.contentEditable)&&(nr=y,rr=r,ir=null);break;case"focusout":ir=rr=nr=null;break;case"mousedown":ar=!0;break;case"contextmenu":case"mouseup":case"dragend":ar=!1,lr(l,n,i);break;case"selectionchange":if(tr)break;case"keydown":case"keyup":lr(l,n,i)}var b;if(wn)e:{switch(e){case"compositionstart":var _="onCompositionStart";break e;case"compositionend":_="onCompositionEnd";break e;case"compositionupdate":_="onCompositionUpdate";break e}_=void 0}else Pn?En(e,n)&&(_="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(_="onCompositionStart");_&&(Sn&&"ko"!==n.locale&&(Pn||"onCompositionStart"!==_?"onCompositionEnd"===_&&Pn&&(b=Vt()):(jt="value"in($t=i)?$t.value:$t.textContent,Pn=!0)),0<(y=Vc(r,_)).length&&(_=new sn(_,e,null,n,i),l.push({event:_,listeners:y}),(b||null!==(b=Tn(n)))&&(_.data=b))),(b=Cn?function(e,t){switch(e){case"compositionend":return Tn(t);case"keypress":return 32!==t.which?null:(kn=!0,xn);case"textInput":return(e=t.data)===xn&&kn?null:e;default:return null}}(e,n):function(e,t){if(Pn)return"compositionend"===e||!wn&&En(e,t)?(e=Vt(),Ht=jt=$t=null,Pn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Sn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(_=Vc(r,"onBeforeInput")).length&&(y=new sn("onBeforeInput","beforeinput",null,n,i),l.push({event:y,listeners:_}),y.data=b),function(e,t,n,r,i){if("submit"===t&&n&&n.stateNode===i){var a=Pc((i[Oe]||null).action),l=r.submitter;l&&null!==(t=(t=l[Oe]||null)?Pc(t.formAction):l.getAttribute("formAction"))&&(a=t,l=null);var o=new Jt("action","action",null,r,i);e.push({event:o,listeners:[{instance:null,listener:function(){if(r.defaultPrevented){if(0!==_c){var e=l?Mc(i,l):new FormData(i);Pl(n,{pending:!0,data:e,method:i.method,action:a},null,e)}}else"function"==typeof a&&(o.preventDefault(),e=l?Mc(i,l):new FormData(i),Pl(n,{pending:!0,data:e,method:i.method,action:a},a,e))},currentTarget:i}]})}}(l,e,r,n,i)}Ic(l,t)}))}function Hc(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vc(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;if(5!==(i=i.tag)&&26!==i&&27!==i||null===a||(null!=(i=Dt(e,n))&&r.unshift(Hc(e,i,a)),null!=(i=Dt(e,t))&&r.push(Hc(e,i,a))),3===e.tag)return r;e=e.return}return[]}function Uc(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag&&27!==e.tag);return e||null}function Gc(e,t,n,r,i){for(var a=t._reactName,l=[];null!==n&&n!==r;){var o=n,s=o.alternate,u=o.stateNode;if(o=o.tag,null!==s&&s===r)break;5!==o&&26!==o&&27!==o||null===u||(s=u,i?null!=(u=Dt(n,a))&&l.unshift(Hc(n,u,s)):i||null!=(u=Dt(n,a))&&l.push(Hc(n,u,s))),n=n.return}0!==l.length&&e.push({event:t,listeners:l})}var qc=/\r\n?/g,Wc=/\u0000|\uFFFD/g;function Yc(e){return("string"==typeof e?e:""+e).replace(qc,"\n").replace(Wc,"")}function Qc(e,t){return t=Yc(t),Yc(e)===t}function Xc(){}function Kc(e,t,n,r,i,a){switch(n){case"children":"string"==typeof r?"body"===t||"textarea"===t&&""===r||wt(e,r):("number"==typeof r||"bigint"==typeof r)&&"body"!==t&&wt(e,""+r);break;case"className":tt(e,"class",r);break;case"tabIndex":tt(e,"tabindex",r);break;case"dir":case"role":case"viewBox":case"width":case"height":tt(e,n,r);break;case"style":St(e,r,a);break;case"data":if("object"!==t){tt(e,"data",r);break}case"src":case"href":if(""===r&&("a"!==t||"href"!==n)){e.removeAttribute(n);break}if(null==r||"function"==typeof r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"action":case"formAction":if("function"==typeof r){e.setAttribute(n,"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");break}if("function"==typeof a&&("formAction"===n?("input"!==t&&Kc(e,t,"name",i.name,i,null),Kc(e,t,"formEncType",i.formEncType,i,null),Kc(e,t,"formMethod",i.formMethod,i,null),Kc(e,t,"formTarget",i.formTarget,i,null)):(Kc(e,t,"encType",i.encType,i,null),Kc(e,t,"method",i.method,i,null),Kc(e,t,"target",i.target,i,null))),null==r||"symbol"==typeof r||"boolean"==typeof r){e.removeAttribute(n);break}r=Tt(""+r),e.setAttribute(n,r);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"multiple":e.multiple=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"muted":e.muted=r&&"function"!=typeof r&&"symbol"!=typeof r;break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"defaultValue":case"defaultChecked":case"innerHTML":case"ref":case"autoFocus":break;case"xlinkHref":if(null==r||"function"==typeof r||"boolean"==typeof r||"symbol"==typeof r){e.removeAttribute("xlink:href");break}n=Tt(""+r),e.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href",n);break;case"contentEditable":case"spellCheck":case"draggable":case"value":case"autoReverse":case"externalResourcesRequired":case"focusable":case"preserveAlpha":null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""+r):e.removeAttribute(n);break;case"inert":case"allowFullScreen":case"async":case"autoPlay":case"controls":case"default":case"defer":case"disabled":case"disablePictureInPicture":case"disableRemotePlayback":case"formNoValidate":case"hidden":case"loop":case"noModule":case"noValidate":case"open":case"playsInline":case"readOnly":case"required":case"reversed":case"scoped":case"seamless":case"itemScope":r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,""):e.removeAttribute(n);break;case"capture":case"download":!0===r?e.setAttribute(n,""):!1!==r&&null!=r&&"function"!=typeof r&&"symbol"!=typeof r?e.setAttribute(n,r):e.removeAttribute(n);break;case"cols":case"rows":case"size":case"span":null!=r&&"function"!=typeof r&&"symbol"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(n,r):e.removeAttribute(n);break;case"rowSpan":case"start":null==r||"function"==typeof r||"symbol"==typeof r||isNaN(r)?e.removeAttribute(n):e.setAttribute(n,r);break;case"popover":Dc("beforetoggle",e),Dc("toggle",e),et(e,"popover",r);break;case"xlinkActuate":nt(e,"http://www.w3.org/1999/xlink","xlink:actuate",r);break;case"xlinkArcrole":nt(e,"http://www.w3.org/1999/xlink","xlink:arcrole",r);break;case"xlinkRole":nt(e,"http://www.w3.org/1999/xlink","xlink:role",r);break;case"xlinkShow":nt(e,"http://www.w3.org/1999/xlink","xlink:show",r);break;case"xlinkTitle":nt(e,"http://www.w3.org/1999/xlink","xlink:title",r);break;case"xlinkType":nt(e,"http://www.w3.org/1999/xlink","xlink:type",r);break;case"xmlBase":nt(e,"http://www.w3.org/XML/1998/namespace","xml:base",r);break;case"xmlLang":nt(e,"http://www.w3.org/XML/1998/namespace","xml:lang",r);break;case"xmlSpace":nt(e,"http://www.w3.org/XML/1998/namespace","xml:space",r);break;case"is":et(e,"is",r);break;case"innerText":case"textContent":break;default:(!(2<n.length)||"o"!==n[0]&&"O"!==n[0]||"n"!==n[1]&&"N"!==n[1])&&et(e,n=kt.get(n)||n,r)}}function Jc(e,t,n,r,i,a){switch(n){case"style":St(e,r,a);break;case"dangerouslySetInnerHTML":if(null!=r){if("object"!=typeof r||!("__html"in r))throw Error(l(61));if(null!=(n=r.__html)){if(null!=i.children)throw Error(l(60));e.innerHTML=n}}break;case"children":"string"==typeof r?wt(e,r):("number"==typeof r||"bigint"==typeof r)&&wt(e,""+r);break;case"onScroll":null!=r&&Dc("scroll",e);break;case"onScrollEnd":null!=r&&Dc("scrollend",e);break;case"onClick":null!=r&&(e.onclick=Xc);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":case"innerHTML":case"ref":case"innerText":case"textContent":break;default:qe.hasOwnProperty(n)||("o"!==n[0]||"n"!==n[1]||(i=n.endsWith("Capture"),t=n.slice(2,i?n.length-7:void 0),"function"==typeof(a=null!=(a=e[Oe]||null)?a[n]:null)&&e.removeEventListener(t,a,i),"function"!=typeof r)?n in e?e[n]=r:!0===r?e.setAttribute(n,""):et(e,n,r):("function"!=typeof a&&null!==a&&(n in e?e[n]=null:e.hasAttribute(n)&&e.removeAttribute(n)),e.addEventListener(t,r,i)))}}function Zc(e,t,n){switch(t){case"div":case"span":case"svg":case"path":case"a":case"g":case"p":case"li":break;case"img":Dc("error",e),Dc("load",e);var r,i=!1,a=!1;for(r in n)if(n.hasOwnProperty(r)){var o=n[r];if(null!=o)switch(r){case"src":i=!0;break;case"srcSet":a=!0;break;case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Kc(e,t,r,o,n,null)}}return a&&Kc(e,t,"srcSet",n.srcSet,n,null),void(i&&Kc(e,t,"src",n.src,n,null));case"input":Dc("invalid",e);var s=r=o=a=null,u=null,c=null;for(i in n)if(n.hasOwnProperty(i)){var d=n[i];if(null!=d)switch(i){case"name":a=d;break;case"type":o=d;break;case"checked":u=d;break;case"defaultChecked":c=d;break;case"value":r=d;break;case"defaultValue":s=d;break;case"children":case"dangerouslySetInnerHTML":if(null!=d)throw Error(l(137,t));break;default:Kc(e,t,i,d,n,null)}}return gt(e,r,s,u,c,o,a,!1),void ct(e);case"select":for(a in Dc("invalid",e),i=o=r=null,n)if(n.hasOwnProperty(a)&&null!=(s=n[a]))switch(a){case"value":r=s;break;case"defaultValue":o=s;break;case"multiple":i=s;default:Kc(e,t,a,s,n,null)}return t=r,n=o,e.multiple=!!i,void(null!=t?yt(e,!!i,t,!1):null!=n&&yt(e,!!i,n,!0));case"textarea":for(o in Dc("invalid",e),r=a=i=null,n)if(n.hasOwnProperty(o)&&null!=(s=n[o]))switch(o){case"value":i=s;break;case"defaultValue":a=s;break;case"children":r=s;break;case"dangerouslySetInnerHTML":if(null!=s)throw Error(l(91));break;default:Kc(e,t,o,s,n,null)}return _t(e,i,a,r),void ct(e);case"option":for(u in n)n.hasOwnProperty(u)&&null!=(i=n[u])&&("selected"===u?e.selected=i&&"function"!=typeof i&&"symbol"!=typeof i:Kc(e,t,u,i,n,null));return;case"dialog":Dc("beforetoggle",e),Dc("toggle",e),Dc("cancel",e),Dc("close",e);break;case"iframe":case"object":Dc("load",e);break;case"video":case"audio":for(i=0;i<Lc.length;i++)Dc(Lc[i],e);break;case"image":Dc("error",e),Dc("load",e);break;case"details":Dc("toggle",e);break;case"embed":case"source":case"link":Dc("error",e),Dc("load",e);case"area":case"base":case"br":case"col":case"hr":case"keygen":case"meta":case"param":case"track":case"wbr":case"menuitem":for(c in n)if(n.hasOwnProperty(c)&&null!=(i=n[c]))switch(c){case"children":case"dangerouslySetInnerHTML":throw Error(l(137,t));default:Kc(e,t,c,i,n,null)}return;default:if(xt(t)){for(d in n)n.hasOwnProperty(d)&&void 0!==(i=n[d])&&Jc(e,t,d,i,n,void 0);return}}for(s in n)n.hasOwnProperty(s)&&null!=(i=n[s])&&Kc(e,t,s,i,n,null)}var ed=null,td=null;function nd(e){return 9===e.nodeType?e:e.ownerDocument}function rd(e){switch(e){case"http://www.w3.org/2000/svg":return 1;case"http://www.w3.org/1998/Math/MathML":return 2;default:return 0}}function id(e,t){if(0===e)switch(t){case"svg":return 1;case"math":return 2;default:return 0}return 1===e&&"foreignObject"===t?0:e}function ad(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"bigint"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ld=null,od="function"==typeof setTimeout?setTimeout:void 0,sd="function"==typeof clearTimeout?clearTimeout:void 0,ud="function"==typeof Promise?Promise:void 0,cd="function"==typeof queueMicrotask?queueMicrotask:void 0!==ud?function(e){return ud.resolve(null).then(e).catch(dd)}:od;function dd(e){setTimeout((function(){throw e}))}function fd(e){return"head"===e}function pd(e,t){var n=t,r=0,i=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0<r&&8>r){n=r;var l=e.ownerDocument;if(1&n&&_d(l.documentElement),2&n&&_d(l.body),4&n)for(_d(n=l.head),l=n.firstChild;l;){var o=l.nextSibling,s=l.nodeName;l[Fe]||"SCRIPT"===s||"STYLE"===s||"LINK"===s&&"stylesheet"===l.rel.toLowerCase()||n.removeChild(l),l=o}}if(0===i)return e.removeChild(a),void xf(t);i--}else"$"===n||"$?"===n||"$!"===n?i++:r=n.charCodeAt(0)-48;else r=0;n=a}while(n);xf(t)}function hd(e){var t=e.firstChild;for(t&&10===t.nodeType&&(t=t.nextSibling);t;){var n=t;switch(t=t.nextSibling,n.nodeName){case"HTML":case"HEAD":case"BODY":hd(n),Re(n);continue;case"SCRIPT":case"STYLE":continue;case"LINK":if("stylesheet"===n.rel.toLowerCase())continue}e.removeChild(n)}}function md(e){return"$!"===e.data||"$?"===e.data&&"complete"===e.ownerDocument.readyState}function gd(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t||"F!"===t||"F"===t)break;if("/$"===t)return null}}return e}var vd=null;function yd(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}function bd(e,t,n){switch(t=nd(n),e){case"html":if(!(e=t.documentElement))throw Error(l(452));return e;case"head":if(!(e=t.head))throw Error(l(453));return e;case"body":if(!(e=t.body))throw Error(l(454));return e;default:throw Error(l(451))}}function _d(e){for(var t=e.attributes;t.length;)e.removeAttributeNode(t[0]);Re(e)}var wd=new Map,Ad=new Set;function Cd(e){return"function"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var Sd=N.d;N.d={f:function(){var e=Sd.f(),t=$u();return e||t},r:function(e){var t=je(e);null!==t&&5===t.tag&&"form"===t.type?zl(t):Sd.r(e)},D:function(e){Sd.D(e),kd("dns-prefetch",e,null)},C:function(e,t){Sd.C(e,t),kd("preconnect",e,t)},L:function(e,t,n){Sd.L(e,t,n);var r=xd;if(r&&e&&t){var i='link[rel="preload"][as="'+ht(t)+'"]';"image"===t&&n&&n.imageSrcSet?(i+='[imagesrcset="'+ht(n.imageSrcSet)+'"]',"string"==typeof n.imageSizes&&(i+='[imagesizes="'+ht(n.imageSizes)+'"]')):i+='[href="'+ht(e)+'"]';var a=i;switch(t){case"style":a=Td(e);break;case"script":a=zd(e)}wd.has(a)||(e=d({rel:"preload",href:"image"===t&&n&&n.imageSrcSet?void 0:e,as:t},n),wd.set(a,e),null!==r.querySelector(i)||"style"===t&&r.querySelector(Pd(a))||"script"===t&&r.querySelector(Od(a))||(Zc(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}},m:function(e,t){Sd.m(e,t);var n=xd;if(n&&e){var r=t&&"string"==typeof t.as?t.as:"script",i='link[rel="modulepreload"][as="'+ht(r)+'"][href="'+ht(e)+'"]',a=i;switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":a=zd(e)}if(!wd.has(a)&&(e=d({rel:"modulepreload",href:e},t),wd.set(a,e),null===n.querySelector(i))){switch(r){case"audioworklet":case"paintworklet":case"serviceworker":case"sharedworker":case"worker":case"script":if(n.querySelector(Od(a)))return}Zc(r=n.createElement("link"),"link",e),Ue(r),n.head.appendChild(r)}}},X:function(e,t){Sd.X(e,t);var n=xd;if(n&&e){var r=Ve(n).hoistableScripts,i=zd(e),a=r.get(i);a||((a=n.querySelector(Od(i)))||(e=d({src:e,async:!0},t),(t=wd.get(i))&&Dd(e,t),Ue(a=n.createElement("script")),Zc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}},S:function(e,t,n){Sd.S(e,t,n);var r=xd;if(r&&e){var i=Ve(r).hoistableStyles,a=Td(e);t=t||"default";var l=i.get(a);if(!l){var o={loading:0,preload:null};if(l=r.querySelector(Pd(a)))o.loading=5;else{e=d({rel:"stylesheet",href:e,"data-precedence":t},n),(n=wd.get(a))&&Id(e,n);var s=l=r.createElement("link");Ue(s),Zc(s,"link",e),s._p=new Promise((function(e,t){s.onload=e,s.onerror=t})),s.addEventListener("load",(function(){o.loading|=1})),s.addEventListener("error",(function(){o.loading|=2})),o.loading|=4,Nd(l,t,r)}l={type:"stylesheet",instance:l,count:1,state:o},i.set(a,l)}}},M:function(e,t){Sd.M(e,t);var n=xd;if(n&&e){var r=Ve(n).hoistableScripts,i=zd(e),a=r.get(i);a||((a=n.querySelector(Od(i)))||(e=d({src:e,async:!0,type:"module"},t),(t=wd.get(i))&&Dd(e,t),Ue(a=n.createElement("script")),Zc(a,"link",e),n.head.appendChild(a)),a={type:"script",instance:a,count:1,state:null},r.set(i,a))}}};var xd="undefined"==typeof document?null:document;function kd(e,t,n){var r=xd;if(r&&"string"==typeof t&&t){var i=ht(t);i='link[rel="'+e+'"][href="'+i+'"]',"string"==typeof n&&(i+='[crossorigin="'+n+'"]'),Ad.has(i)||(Ad.add(i),e={rel:e,crossOrigin:n,href:t},null===r.querySelector(i)&&(Zc(t=r.createElement("link"),"link",e),Ue(t),r.head.appendChild(t)))}}function Ed(e,t,n,r){var i,a,o,s,u=(u=V.current)?Cd(u):null;if(!u)throw Error(l(446));switch(e){case"meta":case"title":return null;case"style":return"string"==typeof n.precedence&&"string"==typeof n.href?(t=Td(n.href),(r=(n=Ve(u).hoistableStyles).get(t))||(r={type:"style",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};case"link":if("stylesheet"===n.rel&&"string"==typeof n.href&&"string"==typeof n.precedence){e=Td(n.href);var c=Ve(u).hoistableStyles,d=c.get(e);if(d||(u=u.ownerDocument||u,d={type:"stylesheet",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,d),(c=u.querySelector(Pd(e)))&&!c._p&&(d.instance=c,d.state.loading=5),wd.has(e)||(n={rel:"preload",as:"style",href:n.href,crossOrigin:n.crossOrigin,integrity:n.integrity,media:n.media,hrefLang:n.hrefLang,referrerPolicy:n.referrerPolicy},wd.set(e,n),c||(i=u,a=e,o=n,s=d.state,i.querySelector('link[rel="preload"][as="style"]['+a+"]")?s.loading=1:(a=i.createElement("link"),s.preload=a,a.addEventListener("load",(function(){return s.loading|=1})),a.addEventListener("error",(function(){return s.loading|=2})),Zc(a,"link",o),Ue(a),i.head.appendChild(a))))),t&&null===r)throw Error(l(528,""));return d}if(t&&null!==r)throw Error(l(529,""));return null;case"script":return t=n.async,"string"==typeof(n=n.src)&&t&&"function"!=typeof t&&"symbol"!=typeof t?(t=zd(n),(r=(n=Ve(u).hoistableScripts).get(t))||(r={type:"script",instance:null,count:0,state:null},n.set(t,r)),r):{type:"void",instance:null,count:0,state:null};default:throw Error(l(444,e))}}function Td(e){return'href="'+ht(e)+'"'}function Pd(e){return'link[rel="stylesheet"]['+e+"]"}function Md(e){return d({},e,{"data-precedence":e.precedence,precedence:null})}function zd(e){return'[src="'+ht(e)+'"]'}function Od(e){return"script[async]"+e}function Ld(e,t,n){if(t.count++,null===t.instance)switch(t.type){case"style":var r=e.querySelector('style[data-href~="'+ht(n.href)+'"]');if(r)return t.instance=r,Ue(r),r;var i=d({},n,{"data-href":n.href,"data-precedence":n.precedence,href:null,precedence:null});return Ue(r=(e.ownerDocument||e).createElement("style")),Zc(r,"style",i),Nd(r,n.precedence,e),t.instance=r;case"stylesheet":i=Td(n.href);var a=e.querySelector(Pd(i));if(a)return t.state.loading|=4,t.instance=a,Ue(a),a;r=Md(n),(i=wd.get(i))&&Id(r,i),Ue(a=(e.ownerDocument||e).createElement("link"));var o=a;return o._p=new Promise((function(e,t){o.onload=e,o.onerror=t})),Zc(a,"link",r),t.state.loading|=4,Nd(a,n.precedence,e),t.instance=a;case"script":return a=zd(n.src),(i=e.querySelector(Od(a)))?(t.instance=i,Ue(i),i):(r=n,(i=wd.get(a))&&Dd(r=d({},n),i),Ue(i=(e=e.ownerDocument||e).createElement("script")),Zc(i,"link",r),e.head.appendChild(i),t.instance=i);case"void":return null;default:throw Error(l(443,t.type))}else"stylesheet"===t.type&&!(4&t.state.loading)&&(r=t.instance,t.state.loading|=4,Nd(r,n.precedence,e));return t.instance}function Nd(e,t,n){for(var r=n.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'),i=r.length?r[r.length-1]:null,a=i,l=0;l<r.length;l++){var o=r[l];if(o.dataset.precedence===t)a=o;else if(a!==i)break}a?a.parentNode.insertBefore(e,a.nextSibling):(t=9===n.nodeType?n.head:n).insertBefore(e,t.firstChild)}function Id(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.title&&(e.title=t.title)}function Dd(e,t){null==e.crossOrigin&&(e.crossOrigin=t.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),null==e.integrity&&(e.integrity=t.integrity)}var Bd=null;function Fd(e,t,n){if(null===Bd){var r=new Map,i=Bd=new Map;i.set(n,r)}else(r=(i=Bd).get(n))||(r=new Map,i.set(n,r));if(r.has(e))return r;for(r.set(e,null),n=n.getElementsByTagName(e),i=0;i<n.length;i++){var a=n[i];if(!(a[Fe]||a[ze]||"link"===e&&"stylesheet"===a.getAttribute("rel"))&&"http://www.w3.org/2000/svg"!==a.namespaceURI){var l=a.getAttribute(t)||"";l=e+l;var o=r.get(l);o?o.push(a):r.set(l,[a])}}return r}function Rd(e,t,n){(e=e.ownerDocument||e).head.insertBefore(n,"title"===t?e.querySelector("head > title"):null)}function $d(e){return!!("stylesheet"!==e.type||3&e.state.loading)}var jd=null;function Hd(){}function Vd(){if(this.count--,0===this.count)if(this.stylesheets)Gd(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}var Ud=null;function Gd(e,t){e.stylesheets=null,null!==e.unsuspend&&(e.count++,Ud=new Map,t.forEach(qd,e),Ud=null,Vd.call(e))}function qd(e,t){if(!(4&t.state.loading)){var n=Ud.get(e);if(n)var r=n.get(null);else{n=new Map,Ud.set(e,n);for(var i=e.querySelectorAll("link[data-precedence],style[data-precedence]"),a=0;a<i.length;a++){var l=i[a];"LINK"!==l.nodeName&&"not all"===l.getAttribute("media")||(n.set(l.dataset.precedence,l),r=l)}r&&n.set(null,r)}l=(i=t.instance).getAttribute("data-precedence"),(a=n.get(l)||r)===r&&n.set(null,i),n.set(l,i),this.count++,r=Vd.bind(this),i.addEventListener("load",r),i.addEventListener("error",r),a?a.parentNode.insertBefore(i,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(i,e.firstChild),t.state.loading|=4}}var Wd={$$typeof:_,Provider:null,Consumer:null,_currentValue:I,_currentValue2:I,_threadCount:0};function Yd(e,t,n,r,i,a,l,o){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=Ce(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ce(0),this.hiddenUpdates=Ce(null),this.identifierPrefix=r,this.onUncaughtError=i,this.onCaughtError=a,this.onRecoverableError=l,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=o,this.incompleteTransitions=new Map}function Qd(e,t,n,r,i,a){i=function(e){return e?e=Lr:Lr}(i),null===r.context?r.context=i:r.pendingContext=i,(r=ra(t)).payload={element:n},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(n=ia(e,r,t))&&(Iu(n,0,t),aa(n,e,t))}function Xd(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kd(e,t){Xd(e,t),(e=e.alternate)&&Xd(e,t)}function Jd(e){if(13===e.tag){var t=Mr(e,67108864);null!==t&&Iu(t,0,67108864),Kd(e,67108864)}}var Zd=!0;function ef(e,t,n,r){var i=L.T;L.T=null;var a=N.p;try{N.p=2,nf(e,t,n,r)}finally{N.p=a,L.T=i}}function tf(e,t,n,r){var i=L.T;L.T=null;var a=N.p;try{N.p=8,nf(e,t,n,r)}finally{N.p=a,L.T=i}}function nf(e,t,n,r){if(Zd){var i=rf(r);if(null===i)jc(e,t,r,af,n),gf(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return uf=vf(uf,e,t,n,r,i),!0;case"dragenter":return cf=vf(cf,e,t,n,r,i),!0;case"mouseover":return df=vf(df,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return ff.set(a,vf(ff.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,pf.set(a,vf(pf.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(gf(e,r),4&t&&-1<mf.indexOf(e)){for(;null!==i;){var a=je(i);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var l=ve(a.pendingLanes);if(0!==l){var o=a;for(o.pendingLanes|=2,o.entangledLanes|=2;l;){var s=1<<31-fe(l);o.entanglements[1]|=s,l&=~s}wc(a),!(6&tu)&&(wu=ee()+500,Ac(0,!1))}}break;case 13:null!==(o=Mr(a,2))&&Iu(o,0,2),$u(),Kd(a,2)}if(null===(a=rf(r))&&jc(e,t,r,af,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else jc(e,t,r,null,n)}}function rf(e){return lf(e=Mt(e))}var af=null;function lf(e){if(af=null,null!==(e=$e(e))){var t=o(e);if(null===t)e=null;else{var n=t.tag;if(13===n){if(null!==(e=s(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null)}}return af=e,null}function of(e){switch(e){case"beforetoggle":case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"toggle":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 2;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 8;case"message":switch(te()){case ne:return 2;case re:return 8;case ie:case ae:return 32;case le:return 268435456;default:return 32}default:return 32}}var sf=!1,uf=null,cf=null,df=null,ff=new Map,pf=new Map,hf=[],mf="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");function gf(e,t){switch(e){case"focusin":case"focusout":uf=null;break;case"dragenter":case"dragleave":cf=null;break;case"mouseover":case"mouseout":df=null;break;case"pointerover":case"pointerout":ff.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":pf.delete(t.pointerId)}}function vf(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=je(t))&&Jd(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function yf(e){var t=$e(e.target);if(null!==t){var n=o(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=s(n)))return e.blockedOn=t,void function(e){var t=N.p;try{return N.p=e,function(){if(13===n.tag){var e=Lu();e=Ee(e);var t=Mr(n,e);null!==t&&Iu(t,0,e),Kd(n,e)}}()}finally{N.p=t}}(e.priority)}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function bf(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=rf(e.nativeEvent);if(null!==n)return null!==(t=je(n))&&Jd(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);Pt=r,n.target.dispatchEvent(r),Pt=null,t.shift()}return!0}function _f(e,t,n){bf(e)&&n.delete(t)}function wf(){sf=!1,null!==uf&&bf(uf)&&(uf=null),null!==cf&&bf(cf)&&(cf=null),null!==df&&bf(df)&&(df=null),ff.forEach(_f),pf.forEach(_f)}function Af(e,t){e.blockedOn===t&&(e.blockedOn=null,sf||(sf=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,wf)))}var Cf=null;function Sf(e){Cf!==e&&(Cf=e,r.unstable_scheduleCallback(r.unstable_NormalPriority,(function(){Cf===e&&(Cf=null);for(var t=0;t<e.length;t+=3){var n=e[t],r=e[t+1],i=e[t+2];if("function"!=typeof r){if(null===lf(r||n))continue;break}var a=je(n);null!==a&&(e.splice(t,3),t-=3,Pl(a,{pending:!0,data:i,method:n.method,action:r},r,i))}})))}function xf(e){function t(t){return Af(t,e)}null!==uf&&Af(uf,e),null!==cf&&Af(cf,e),null!==df&&Af(df,e),ff.forEach(t),pf.forEach(t);for(var n=0;n<hf.length;n++){var r=hf[n];r.blockedOn===e&&(r.blockedOn=null)}for(;0<hf.length&&null===(n=hf[0]).blockedOn;)yf(n),null===n.blockedOn&&hf.shift();if(null!=(n=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<n.length;r+=3){var i=n[r],a=n[r+1],l=i[Oe]||null;if("function"==typeof a)l||Sf(n);else if(l){var o=null;if(a&&a.hasAttribute("formAction")){if(i=a,l=a[Oe]||null)o=l.formAction;else if(null!==lf(i))continue}else o=l.action;"function"==typeof o?n[r+1]=o:(n.splice(r,3),r-=3),Sf(n)}}}function kf(e){this._internalRoot=e}function Ef(e){this._internalRoot=e}Ef.prototype.render=kf.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Qd(t.current,Lu(),e,t,null,null)},Ef.prototype.unmount=kf.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Qd(e.current,2,null,e,null,null),$u(),t[Le]=null}},Ef.prototype.unstable_scheduleHydration=function(e){if(e){var t=Pe();e={blockedOn:null,target:e,priority:t};for(var n=0;n<hf.length&&0!==t&&t<hf[n].priority;n++);hf.splice(n,0,e),0===n&&yf(e)}};var Tf=i.version;if("19.1.0"!==Tf)throw Error(l(527,Tf,"19.1.0"));N.findDOMNode=function(e){var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=function(e){var t=e.alternate;if(!t){if(null===(t=o(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return u(i),e;if(a===r)return u(i),t;a=a.sibling}throw Error(l(188))}if(n.return!==r.return)n=i,r=a;else{for(var s=!1,c=i.child;c;){if(c===n){s=!0,n=i,r=a;break}if(c===r){s=!0,r=i,n=a;break}c=c.sibling}if(!s){for(c=a.child;c;){if(c===n){s=!0,n=a,r=i;break}if(c===r){s=!0,r=a,n=i;break}c=c.sibling}if(!s)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(t),null===(e=null!==e?c(e):null)?null:e.stateNode};var Pf={bundleType:0,version:"19.1.0",rendererPackageName:"react-dom",currentDispatcherRef:L,reconcilerVersion:"19.1.0"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Mf=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Mf.isDisabled&&Mf.supportsFiber)try{ue=Mf.inject(Pf),ce=Mf}catch(e){}}t.createRoot=function(e,t){if(!(n=e)||1!==n.nodeType&&9!==n.nodeType&&11!==n.nodeType)throw Error(l(299));var n,r=!1,i="",a=vo,o=yo,s=bo;return null!=t&&(!0===t.unstable_strictMode&&(r=!0),void 0!==t.identifierPrefix&&(i=t.identifierPrefix),void 0!==t.onUncaughtError&&(a=t.onUncaughtError),void 0!==t.onCaughtError&&(o=t.onCaughtError),void 0!==t.onRecoverableError&&(s=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&t.unstable_transitionCallbacks),t=function(e,t,n,r,i,a,l,o,s,u,c,d){return e=new Yd(e,t,n,l,o,s,u,d),t=1,!0===a&&(t|=24),a=Ir(3,null,null,t),e.current=a,a.stateNode=e,(t=Oi()).refCount++,e.pooledCache=t,t.refCount++,a.memoizedState={element:r,isDehydrated:n,cache:t},ta(a),e}(e,1,!1,null,0,r,i,a,o,s,0,null),e[Le]=t.current,Rc(e),new kf(t)}},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var l={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(l[s]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&l[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),t.push(c))}},t}},320:(e,t,n)=>{"use strict";e.exports=n.p+"assets/imgs/arrow_left.svg"},338:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(247)},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},364:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,".Title-module__title--pvEtM{display:flex;gap:4em;margin-top:170px}.Title-module__vertical-line--NPA7C{width:5px;height:120px;background:linear-gradient(180deg, #5D5FEF 0%, #EF5DA8 100%)}.Title-module__text--UI4oq{margin:0;font-size:56px;width:400px;line-height:1em;color:#42567a}@media(max-width: 1150px){.Title-module__vertical-line--NPA7C{height:100px}.Title-module__text--UI4oq{font-size:46px;width:300px}}@media(max-width: 950px){.Title-module__title--pvEtM{margin-top:150px}.Title-module__vertical-line--NPA7C{height:80px}.Title-module__text--UI4oq{font-size:40px;width:300px}}@media(max-width: 720px){.Title-module__title--pvEtM{margin-top:60px;margin-left:2em}.Title-module__vertical-line--NPA7C{display:none}.Title-module__text--UI4oq{font-size:clamp(20px,5vw,30px);width:clamp(130px,5vw,200px)}}","",{version:3,sources:["webpack://./src/components/history-block/ui/title/Title.module.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,4BACI,YAAA,CACA,OAAA,CACA,gBAAA,CAGJ,oCACI,SAAA,CACA,YAAA,CACA,4DAAA,CAGJ,2BACI,QAAA,CACA,cAAA,CACA,WAAA,CACA,eAAA,CACA,aCnBS,CDuBb,0BACI,oCACI,YAAA,CAEJ,2BACI,cAAA,CACA,WAAA,CAAA,CAIR,yBACI,4BACI,gBAAA,CAEJ,oCACI,WAAA,CAEJ,2BACI,cAAA,CACA,WAAA,CAAA,CAIR,yBACI,4BACI,eAAA,CACA,eAAA,CAEJ,oCACI,YAAA,CAEJ,2BACI,8BAAA,CACA,4BAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n.title{\r\n    display: flex;\r\n    gap: 4em;\r\n    margin-top: 170px;\r\n}\r\n\r\n.vertical-line{\r\n    width: 5px;\r\n    height: 120px;\r\n    background: linear-gradient(180deg, $primary_color1 0%, $primary_color2 100%);\r\n}\r\n\r\n.text{\r\n    margin: 0;\r\n    font-size: 56px;\r\n    width: 400px;\r\n    line-height: 1em;\r\n    color: $line_color;\r\n}\r\n\r\n\r\n@media (max-width: 1150px) {\r\n    .vertical-line{\r\n        height: 100px;\r\n    }\r\n    .text{\r\n        font-size: 46px;\r\n        width: 300px;\r\n    }\r\n}\r\n\r\n@media (max-width: 950px) {\r\n    .title{\r\n        margin-top: 150px;\r\n    }\r\n    .vertical-line{\r\n        height: 80px;\r\n    }\r\n    .text{\r\n        font-size: 40px;\r\n        width: 300px;\r\n    }\r\n}\r\n\r\n@media (max-width: 720px) {\r\n    .title{\r\n        margin-top: 60px;\r\n        margin-left: 2em;\r\n    }\r\n    .vertical-line{\r\n        display: none;\r\n    }\r\n    .text{\r\n        font-size: clamp(20px, 5vw, 30px);\r\n        width: clamp(130px, 5vw, 200px);\r\n    }\r\n}","$line_color: #42567A;\r\n$line_color_medium: #42567A80;\r\n$line_color_light: #42567A30;\r\n$primary_color1: #5D5FEF;\r\n$primary_color2: #EF5DA8;\r\n$date_color: #3877EE"],sourceRoot:""}]),l.locals={title:"Title-module__title--pvEtM","vertical-line":"Title-module__vertical-line--NPA7C",verticalLine:"Title-module__vertical-line--NPA7C",text:"Title-module__text--UI4oq"};const o=l},477:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,l=i>>>1;r<l;){var o=2*(r+1)-1,s=e[o],u=o+1,c=e[u];if(0>a(s,n))u<i&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[o]=n,r=o);else{if(!(u<i&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if(t.unstable_now=void 0,"object"==typeof performance&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var o=Date,s=o.now();t.unstable_now=function(){return o.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,_="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)i(c);else{if(!(t.startTime<=e))break;i(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(g=!1,w(e),!m)if(null!==r(u))m=!0,S||(S=!0,C());else{var t=r(c);null!==t&&O(A,t.startTime-e)}}var C,S=!1,x=-1,k=5,E=-1;function T(){return!(!v&&t.unstable_now()-E<k)}function P(){if(v=!1,S){var e=t.unstable_now();E=e;var n=!0;try{e:{m=!1,g&&(g=!1,b(x),x=-1),h=!0;var a=p;try{t:{for(w(e),f=r(u);null!==f&&!(f.expirationTime>e&&T());){var l=f.callback;if("function"==typeof l){f.callback=null,p=f.priorityLevel;var o=l(f.expirationTime<=e);if(e=t.unstable_now(),"function"==typeof o){f.callback=o,w(e),n=!0;break t}f===r(u)&&i(u),w(e)}else i(u);f=r(u)}if(null!==f)n=!0;else{var s=r(c);null!==s&&O(A,s.startTime-e),n=!1}}break e}finally{f=null,p=a,h=!1}n=void 0}}finally{n?C():S=!1}}}if("function"==typeof _)C=function(){_(P)};else if("undefined"!=typeof MessageChannel){var M=new MessageChannel,z=M.port2;M.port1.onmessage=P,C=function(){z.postMessage(null)}}else C=function(){y(P,0)};function O(e,n){x=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_requestPaint=function(){v=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:o=a+o,sortIndex:-1},a>l?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(b(x),x=-1):g=!0,O(A,a-l))):(e.sortIndex=o,n(u,e),m||h||(m=!0,S||(S=!0,C()))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},540:(e,t,n)=>{"use strict";e.exports=n(869)},541:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,".HistoryBlock-module__history-block--JcesM{position:relative;width:1440px;margin-left:160px;border-left:1px solid rgba(66,86,122,.1882352941);border-right:1px solid rgba(66,86,122,.1882352941);background:linear-gradient(90deg, transparent calc(50% - 0.5px), rgba(66, 86, 122, 0.1882352941) calc(50% - 0.5px), rgba(66, 86, 122, 0.1882352941) calc(50% + 0.5px), transparent calc(50% + 0.5px))}@media(max-width: 1650px){.HistoryBlock-module__history-block--JcesM{margin-left:0px}}@media(max-width: 1450px){.HistoryBlock-module__history-block--JcesM{width:1340px}}@media(max-width: 1350px){.HistoryBlock-module__history-block--JcesM{width:1200px}}@media(max-width: 1250px){.HistoryBlock-module__history-block--JcesM{width:1100px}}@media(max-width: 1150px){.HistoryBlock-module__history-block--JcesM{width:1000px}}@media(max-width: 1050px){.HistoryBlock-module__history-block--JcesM{width:900px}}@media(max-width: 950px){.HistoryBlock-module__history-block--JcesM{width:90vw;border:none}}@media(max-width: 720px){.HistoryBlock-module__history-block--JcesM{width:100vw;background:none;padding-bottom:4em;min-height:calc(100vh - 4em)}}","",{version:3,sources:["webpack://./src/components/history-block/HistoryBlock.module.scss"],names:[],mappings:"AAEA,2CAEI,iBAAA,CACA,YAAA,CACA,iBAAA,CACA,iDAAA,CACA,kDAAA,CACA,qMAAA,CAOJ,0BACI,2CACI,eAAA,CAAA,CAGR,0BACI,2CACI,YAAA,CAAA,CAGR,0BACI,2CACI,YAAA,CAAA,CAGR,0BACI,2CACI,YAAA,CAAA,CAGR,0BACI,2CACI,YAAA,CAAA,CAGR,0BACI,2CACI,WAAA,CAAA,CAGR,yBACI,2CACI,UAAA,CACA,WAAA,CAAA,CAGR,yBACI,2CACI,WAAA,CACA,eAAA,CACA,kBAAA,CACA,4BAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n.history-block {\r\n\r\n    position: relative;\r\n    width: 1440px;\r\n    margin-left: 160px;\r\n    border-left: 1px solid $line_color_light;\r\n    border-right: 1px solid $line_color_light;\r\n    background: linear-gradient(90deg,\r\n            transparent calc(50% - .5px),\r\n            $line_color_light calc(50% - .5px),\r\n            $line_color_light calc(50% + .5px),\r\n            transparent calc(50% + .5px));\r\n}\r\n\r\n@media (max-width: 1650px) {\r\n    .history-block {\r\n        margin-left: 0px;\r\n    }\r\n}\r\n@media (max-width: 1450px) {\r\n    .history-block {\r\n        width: 1340px;\r\n    }\r\n}\r\n@media (max-width: 1350px) {\r\n    .history-block {\r\n        width: 1200px;\r\n    }\r\n}\r\n@media (max-width: 1250px) {\r\n    .history-block {\r\n        width: 1100px;\r\n    }\r\n}\r\n@media (max-width: 1150px) {\r\n    .history-block {\r\n        width: 1000px;\r\n    }\r\n}\r\n@media (max-width: 1050px) {\r\n    .history-block {\r\n        width: 900px;\r\n    }\r\n}\r\n@media (max-width: 950px) {\r\n    .history-block {\r\n        width: 90vw;\r\n        border: none;\r\n    }\r\n}\r\n@media (max-width: 720px) {\r\n    .history-block{\r\n        width: 100vw;\r\n        background: none;\r\n        padding-bottom: 4em;\r\n        min-height: calc(100vh - 4em);\r\n    }\r\n}"],sourceRoot:""}]),l.locals={"history-block":"HistoryBlock-module__history-block--JcesM",historyBlock:"HistoryBlock-module__history-block--JcesM"};const o=l},543:(e,t,n)=>{"use strict";e.exports=n.p+"assets/imgs/arrow_right.svg"},626:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,'.CircleLayout-module__circle-layout--HDcdb{top:0;width:100%;z-index:0}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle--llpwz{position:absolute;top:calc(50% - 265px);left:calc(50% - 265px);width:530px;height:530px;border:1px solid rgba(66,86,122,.1882352941);border-radius:50%}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-point--nY6Pg{position:absolute;display:grid;justify-content:center;align-items:center;color:#42567a;width:6px;height:6px;background-color:#42567a;border:0px solid #42567a;font-size:0px;border-radius:50%;transform:translate(-50%, -50%);cursor:pointer;transition:width .2s,height .2s,background-color .2s,font-size .2s}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-point--nY6Pg:hover{width:60px;height:60px;background-color:#fff;border-width:1px;font-size:20px}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-point--active--Cf_OY{width:60px;height:60px;background-color:#fff;border-width:1px;font-size:20px}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-point--nY6Pg::before{content:"";position:absolute;top:50%;left:50%;border-radius:50%;width:30px;height:30px;transform:translate(-50%, -50%);transition:all .2s}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-title--K3cS5{position:absolute;left:80px;font-family:"PTSans-Bold";font-size:20px;color:#42567a;opacity:0;scale:0;transition:opacity .1s,scale .3s}.CircleLayout-module__circle-layout--HDcdb .CircleLayout-module__circle-title--active--H05yR{opacity:1;transition:opacity .4s;scale:1}@media(max-width: 720px){.CircleLayout-module__circle-layout--HDcdb{display:none}}',"",{version:3,sources:["webpack://./src/components/history-block/ui/circle-slider/circle-layout/CircleLayout.module.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAUA,2CACI,KAAA,CACA,UAAA,CACA,SAAA,CACA,+EACI,iBAAA,CACA,qBAAA,CACA,sBAAA,CACA,WAAA,CACA,YAAA,CACA,4CAAA,CACA,iBAAA,CACA,qFACI,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,aC3BC,CD4BD,SAAA,CACA,UAAA,CACA,wBC9BC,CD+BD,wBAAA,CACA,aAAA,CACA,iBAAA,CACA,+BAAA,CACA,cAAA,CACA,kEACI,CAIJ,2FAtCR,UAAA,CACA,WAAA,CACA,qBAAA,CACA,gBAAA,CACA,cAAA,CAqCQ,6FAzCR,UAAA,CACA,WAAA,CACA,qBAAA,CACA,gBAAA,CACA,cAAA,CAyCQ,6FACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,+BAAA,CACA,kBAAA,CAIR,qFACI,iBAAA,CACA,SAAA,CACA,yBAAA,CACA,cAAA,CACA,aClEC,CDmED,SAAA,CACA,OAAA,CACA,gCAAA,CACA,6FACI,SAAA,CACA,sBAAA,CACA,OAAA,CAWhB,yBACI,2CACI,YAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n@mixin activePoint(){\r\n    width: 60px;\r\n    height: 60px;\r\n    background-color: #fff;\r\n    border-width: 1px;\r\n    font-size: 20px;\r\n}\r\n\r\n.circle-layout{\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 0;\r\n    .circle{\r\n        position: absolute;\r\n        top: calc(50% - 265px);\r\n        left: calc(50% - 265px);\r\n        width: 530px;\r\n        height: 530px;\r\n        border: 1px solid $line_color_light;\r\n        border-radius: 50%;\r\n        &-point{\r\n            position: absolute;\r\n            display: grid;\r\n            justify-content: center;\r\n            align-items: center;\r\n            color: $line_color;\r\n            width: 6px;\r\n            height: 6px;\r\n            background-color: $line_color;\r\n            border: 0px solid $line_color;\r\n            font-size: 0px;\r\n            border-radius: 50%;\r\n            transform: translate(-50%, -50%);\r\n            cursor: pointer;\r\n            transition: \r\n                width .2s,\r\n                height .2s,\r\n                background-color .2s,\r\n                font-size .2s;\r\n            &:hover{\r\n                @include activePoint();\r\n            }\r\n            &--active{\r\n                @include activePoint();\r\n            }\r\n            \r\n            &::before{\r\n                content: '';\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                border-radius: 50%;\r\n                width: 30px;\r\n                height: 30px;\r\n                transform: translate(-50%, -50%);\r\n                transition: all .2s;\r\n            }\r\n\r\n        }\r\n        &-title{\r\n            position: absolute;\r\n            left: 80px;\r\n            font-family: \"PTSans-Bold\";\r\n            font-size: 20px;\r\n            color: $line_color;\r\n            opacity: 0;\r\n            scale: 0;\r\n            transition: opacity .1s, scale .3s;\r\n            &--active{\r\n                opacity: 1;\r\n                transition: opacity .4s;\r\n                scale: 1;\r\n            }\r\n        }\r\n    }\r\n    .horizontal-line{\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n@media (max-width: 720px) {\r\n    .circle-layout{\r\n        display: none;\r\n    }\r\n}","$line_color: #42567A;\r\n$line_color_medium: #42567A80;\r\n$line_color_light: #42567A30;\r\n$primary_color1: #5D5FEF;\r\n$primary_color2: #EF5DA8;\r\n$date_color: #3877EE"],sourceRoot:""}]),l.locals={"circle-layout":"CircleLayout-module__circle-layout--HDcdb",circleLayout:"CircleLayout-module__circle-layout--HDcdb",circle:"CircleLayout-module__circle--llpwz","circle-point":"CircleLayout-module__circle-point--nY6Pg",circlePoint:"CircleLayout-module__circle-point--nY6Pg","circle-point--active":"CircleLayout-module__circle-point--active--Cf_OY",circlePointActive:"CircleLayout-module__circle-point--active--Cf_OY","circle-title":"CircleLayout-module__circle-title--K3cS5",circleTitle:"CircleLayout-module__circle-title--K3cS5","circle-title--active":"CircleLayout-module__circle-title--active--H05yR",circleTitleActive:"CircleLayout-module__circle-title--active--H05yR"};const o=l},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},698:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element");function r(e,t,r){var i=null;if(void 0!==r&&(i=""+r),void 0!==t.key&&(i=""+t.key),"key"in t)for(var a in r={},t)"key"!==a&&(r[a]=t[a]);else r=t;return t=r.ref,{$$typeof:n,type:e,key:i,ref:void 0!==t?t:null,props:r}}Symbol.for("react.fragment"),t.jsx=r,t.jsxs=r},732:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,".NavigationButtons-module__navigation--XOgOy{margin-top:5em;margin-left:4em}.NavigationButtons-module__navigation__pages--r2nbl p{font-size:14px;color:#42567a}.NavigationButtons-module__navigation__buttons--swn2g{display:flex;gap:1em}.NavigationButtons-module__navigation__button--XttO6{display:grid;justify-content:center;align-items:center;width:50px;height:50px;border:solid 1px rgba(66,86,122,.5019607843);cursor:pointer;opacity:1;border-radius:50%;user-select:none;transition:opacity .2s ease}.NavigationButtons-module__navigation__button--desabled--mc3ix{opacity:.5;cursor:default}.NavigationButtons-module__paginations--VIuU3{position:absolute;left:50%;transform:translateX(-50%);display:none;gap:10px}.NavigationButtons-module__paginations__item--J6pFn{width:5px;height:5px;border-radius:50%;background-color:rgba(66,86,122,.5019607843);cursor:pointer}.NavigationButtons-module__paginations__item--active--ASIhs{background-color:#42567a}@media(max-width: 950px){.NavigationButtons-module__navigation--XOgOy{margin-left:1em}}@media(max-width: 720px){.NavigationButtons-module__navigation--XOgOy{position:absolute;width:calc(100% - 4em);margin-top:0;left:1em;bottom:1em}.NavigationButtons-module__navigation__button--XttO6{width:25px;height:25px}.NavigationButtons-module__paginations--VIuU3{display:flex}}","",{version:3,sources:["webpack://./src/components/history-block/ui/circle-slider/navigation-buttons/NavigationButtons.module.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAEA,6CACI,cAAA,CACA,eAAA,CAEI,sDACI,cAAA,CACA,aCRC,CDWT,sDACI,YAAA,CACA,OAAA,CAEJ,qDACI,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,4CAAA,CACA,cAAA,CACA,SAAA,CACA,iBAAA,CACA,gBAAA,CACA,2BAAA,CAEA,+DACI,UAAA,CACA,cAAA,CAKZ,8CACI,iBAAA,CACA,QAAA,CACA,0BAAA,CACA,YAAA,CACA,QAAA,CACA,oDACI,SAAA,CACA,UAAA,CACA,iBAAA,CACA,4CC5CY,CD6CZ,cAAA,CACA,4DACI,wBChDC,CDsDb,yBAEI,6CACI,eAAA,CAAA,CAGR,yBACI,6CACI,iBAAA,CACA,sBAAA,CACA,YAAA,CACA,QAAA,CACA,UAAA,CACA,qDACI,UAAA,CACA,WAAA,CAGR,8CACI,YAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n.navigation{\r\n    margin-top: 5em;\r\n    margin-left: 4em;\r\n    &__pages{\r\n        p{\r\n            font-size: 14px;\r\n            color: $line_color;\r\n        }\r\n    }\r\n    &__buttons{\r\n        display: flex;\r\n        gap: 1em;\r\n    }\r\n    &__button{\r\n        display: grid;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 50px;\r\n        height: 50px;\r\n        border: solid 1px $line_color_medium;\r\n        cursor: pointer;\r\n        opacity: 1;\r\n        border-radius: 50%;\r\n        user-select: none;\r\n        transition: opacity 0.2s ease;\r\n\r\n        &--desabled{\r\n            opacity: 0.5;\r\n            cursor: default;\r\n        }\r\n    }\r\n}\r\n\r\n.paginations{\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    display: none;\r\n    gap: 10px;\r\n    &__item{\r\n        width: 5px;\r\n        height: 5px;\r\n        border-radius: 50%;\r\n        background-color: $line_color_medium;\r\n        cursor: pointer;\r\n        &--active{\r\n            background-color: $line_color;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@media (max-width: 950px) {\r\n    \r\n    .navigation{\r\n        margin-left: 1em;\r\n    }\r\n}\r\n@media (max-width: 720px) {\r\n    .navigation{\r\n        position: absolute;\r\n        width: calc(100% - 4em);\r\n        margin-top: 0;\r\n        left: 1em;\r\n        bottom: 1em;\r\n        &__button{\r\n            width: 25px;\r\n            height: 25px;\r\n        }\r\n    }\r\n    .paginations{\r\n        display: flex;\r\n    }\r\n}","$line_color: #42567A;\r\n$line_color_medium: #42567A80;\r\n$line_color_light: #42567A30;\r\n$primary_color1: #5D5FEF;\r\n$primary_color2: #EF5DA8;\r\n$date_color: #3877EE"],sourceRoot:""}]),l.locals={navigation:"NavigationButtons-module__navigation--XOgOy",navigation__pages:"NavigationButtons-module__navigation__pages--r2nbl",navigationPages:"NavigationButtons-module__navigation__pages--r2nbl",navigation__buttons:"NavigationButtons-module__navigation__buttons--swn2g",navigationButtons:"NavigationButtons-module__navigation__buttons--swn2g",navigation__button:"NavigationButtons-module__navigation__button--XttO6",navigationButton:"NavigationButtons-module__navigation__button--XttO6","navigation__button--desabled":"NavigationButtons-module__navigation__button--desabled--mc3ix",navigationButtonDesabled:"NavigationButtons-module__navigation__button--desabled--mc3ix",paginations:"NavigationButtons-module__paginations--VIuU3",paginations__item:"NavigationButtons-module__paginations__item--J6pFn",paginationsItem:"NavigationButtons-module__paginations__item--J6pFn","paginations__item--active":"NavigationButtons-module__paginations__item--active--ASIhs",paginationsItemActive:"NavigationButtons-module__paginations__item--active--ASIhs"};const o=l},745:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(354),i=n.n(r),a=n(314),l=n.n(a)()(i());l.push([e.id,'.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7{position:relative}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates--p_JPO{display:flex;margin-top:3em;gap:6em;justify-content:center;background:linear-gradient(0deg, transparent calc(50% - 0.5px), rgba(66, 86, 122, 0.1882352941) calc(50% - 0.5px), rgba(66, 86, 122, 0.1882352941) calc(50% + 0.5px), transparent calc(50% + 0.5px))}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY{font-size:200px;font-family:"PTSans-Bold"}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY:first-child{color:#5d5fef}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY:last-child{color:#ef5da8}@media(max-width: 1150px){.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates--p_JPO{gap:4em}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY{font-size:170px}}@media(max-width: 950px){.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY{font-size:130px}}@media(max-width: 720px){.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates--p_JPO{background:none;gap:clamp(1em,6vw,4em)}.CircleSlider-module__slider-container--QAFTn .CircleSlider-module__slider-wrapper--Mesq7 .CircleSlider-module__dates-item--tHudY{font-size:clamp(56px,15vw,100px)}}',"",{version:3,sources:["webpack://./src/components/history-block/ui/circle-slider/CircleSlider.module.scss","webpack://./src/styles/_variables.scss"],names:[],mappings:"AAGI,0FACI,iBAAA,CACA,6HACI,YAAA,CACA,cAAA,CACA,OAAA,CACA,sBAAA,CACA,oMAAA,CACA,kIACI,eAAA,CACA,yBAAA,CACA,8IACI,aCZH,CDcD,6IACI,aCdH,CDuBjB,0BACI,6HACI,OAAA,CACA,kIACI,eAAA,CAAA,CAKZ,yBAEQ,kIACI,eAAA,CAAA,CAKZ,yBACI,6HACI,eAAA,CACA,sBAAA,CACA,kIACI,gCAAA,CAAA",sourcesContent:["@use '@styles/variables' as *;\r\n\r\n.slider-container{\r\n    .slider-wrapper{\r\n        position: relative;\r\n        .dates{\r\n            display: flex;\r\n            margin-top: 3em;\r\n            gap: 6em;\r\n            justify-content: center;\r\n            background: linear-gradient(0deg, transparent calc(50% - .5px), $line_color_light calc(50% - .5px), $line_color_light calc(50% + .5px), transparent calc(50% + .5px));\r\n            &-item{\r\n                font-size: 200px;\r\n                font-family: \"PTSans-Bold\";\r\n                &:first-child{\r\n                    color: $primary_color1;\r\n                }\r\n                &:last-child{\r\n                    color: $primary_color2;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@media (max-width: 1150px) {\r\n    .slider-container .slider-wrapper .dates{\r\n        gap: 4em;\r\n        &-item{\r\n            font-size: 170px;\r\n        }\r\n    }\r\n}\r\n\r\n@media (max-width: 950px) {\r\n    .slider-container .slider-wrapper .dates{\r\n        &-item{\r\n            font-size: 130px;\r\n        }\r\n    }\r\n}\r\n\r\n@media (max-width: 720px) {\r\n    .slider-container .slider-wrapper .dates{\r\n        background: none;\r\n        gap: clamp(1em, 6vw, 4em);\r\n        &-item{\r\n            font-size: clamp(56px, 15vw, 100px);\r\n        }\r\n    }\r\n}","$line_color: #42567A;\r\n$line_color_medium: #42567A80;\r\n$line_color_light: #42567A30;\r\n$primary_color1: #5D5FEF;\r\n$primary_color2: #EF5DA8;\r\n$date_color: #3877EE"],sourceRoot:""}]),l.locals={"slider-container":"CircleSlider-module__slider-container--QAFTn",sliderContainer:"CircleSlider-module__slider-container--QAFTn","slider-wrapper":"CircleSlider-module__slider-wrapper--Mesq7",sliderWrapper:"CircleSlider-module__slider-wrapper--Mesq7",dates:"CircleSlider-module__dates--p_JPO","dates-item":"CircleSlider-module__dates-item--tHudY",datesItem:"CircleSlider-module__dates-item--tHudY"};const o=l},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},848:(e,t,n)=>{"use strict";e.exports=n(698)},869:(e,t)=>{"use strict";var n=Symbol.for("react.transitional.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),o=Symbol.for("react.consumer"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var _=b.prototype=new y;_.constructor=b,m(_,v.prototype),_.isPureReactComponent=!0;var w=Array.isArray,A={H:null,A:null,T:null,S:null,V:null},C=Object.prototype.hasOwnProperty;function S(e,t,r,i,a,l){return r=l.ref,{$$typeof:n,type:e,key:t,ref:void 0!==r?r:null,props:l}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var k=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?(n=""+e.key,r={"=":"=0",":":"=2"},"$"+n.replace(/[=:]/g,(function(e){return r[e]}))):t.toString(36);var n,r}function T(){}function P(e,t,i,a,l){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s,u,c=!1;if(null===e)c=!0;else switch(o){case"bigint":case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case n:case r:c=!0;break;case f:return P((c=e._init)(e._payload),t,i,a,l)}}if(c)return l=l(e),c=""===a?"."+E(e,0):a,w(l)?(i="",null!=c&&(i=c.replace(k,"$&/")+"/"),P(l,t,i,"",(function(e){return e}))):null!=l&&(x(l)&&(s=l,u=i+(null==l.key||e&&e.key===l.key?"":(""+l.key).replace(k,"$&/")+"/")+c,l=S(s.type,u,void 0,0,0,s.props)),t.push(l)),1;c=0;var d,h=""===a?".":a+":";if(w(e))for(var m=0;m<e.length;m++)c+=P(a=e[m],t,i,o=h+E(a,m),l);else if("function"==typeof(m=null===(d=e)||"object"!=typeof d?null:"function"==typeof(d=p&&d[p]||d["@@iterator"])?d:null))for(e=m.call(e),m=0;!(a=e.next()).done;)c+=P(a=a.value,t,i,o=h+E(a,m++),l);else if("object"===o){if("function"==typeof e.then)return P(function(e){switch(e.status){case"fulfilled":return e.value;case"rejected":throw e.reason;default:switch("string"==typeof e.status?e.then(T,T):(e.status="pending",e.then((function(t){"pending"===e.status&&(e.status="fulfilled",e.value=t)}),(function(t){"pending"===e.status&&(e.status="rejected",e.reason=t)}))),e.status){case"fulfilled":return e.value;case"rejected":throw e.reason}}throw e}(e),t,i,a,l);throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.")}return c}function M(e,t,n){if(null==e)return e;var r=[],i=0;return P(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function z(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var O="function"==typeof reportError?reportError:function(e){if("object"==typeof window&&"function"==typeof window.ErrorEvent){var t=new window.ErrorEvent("error",{bubbles:!0,cancelable:!0,message:"object"==typeof e&&null!==e&&"string"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if("object"==typeof process&&"function"==typeof process.emit)return void process.emit("uncaughtException",e);console.error(e)};function L(){}t.Children={map:M,forEach:function(e,t,n){M(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return M(e,(function(){t++})),t},toArray:function(e){return M(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=i,t.Profiler=l,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=A,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return A.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,n){if(null==e)throw Error("The argument must be a React element, but you passed "+e+".");var r=m({},e.props),i=e.key;if(null!=t)for(a in t.ref,void 0!==t.key&&(i=""+t.key),t)!C.call(t,a)||"key"===a||"__self"===a||"__source"===a||"ref"===a&&void 0===t.ref||(r[a]=t[a]);var a=arguments.length-2;if(1===a)r.children=n;else if(1<a){for(var l=Array(a),o=0;o<a;o++)l[o]=arguments[o+2];r.children=l}return S(e.type,i,void 0,0,0,r)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:o,_context:e},e},t.createElement=function(e,t,n){var r,i={},a=null;if(null!=t)for(r in void 0!==t.key&&(a=""+t.key),t)C.call(t,r)&&"key"!==r&&"__self"!==r&&"__source"!==r&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var o=Array(l),s=0;s<l;s++)o[s]=arguments[s+2];i.children=o}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return S(e,a,void 0,0,0,i)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:z}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=A.T,n={};A.T=n;try{var r=e(),i=A.S;null!==i&&i(n,r),"object"==typeof r&&null!==r&&"function"==typeof r.then&&r.then(L,O)}catch(e){O(e)}finally{A.T=t}},t.unstable_useCacheRefresh=function(){return A.H.useCacheRefresh()},t.use=function(e){return A.H.use(e)},t.useActionState=function(e,t,n){return A.H.useActionState(e,t,n)},t.useCallback=function(e,t){return A.H.useCallback(e,t)},t.useContext=function(e){return A.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return A.H.useDeferredValue(e,t)},t.useEffect=function(e,t,n){var r=A.H;if("function"==typeof n)throw Error("useEffect CRUD overload is not enabled in this build of React.");return r.useEffect(e,t)},t.useId=function(){return A.H.useId()},t.useImperativeHandle=function(e,t,n){return A.H.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.H.useMemo(e,t)},t.useOptimistic=function(e,t){return A.H.useOptimistic(e,t)},t.useReducer=function(e,t,n){return A.H.useReducer(e,t,n)},t.useRef=function(e){return A.H.useRef(e)},t.useState=function(e){return A.H.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.H.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.H.useTransition()},t.version="19.1.0"},875:(e,t,n)=>{var r={"./arrow_left.svg":320,"./arrow_right.svg":543};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=a,e.exports=i,i.id=875},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(221)},982:(e,t,n)=>{"use strict";e.exports=n(477)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&(!e||!/^http(s?):/.test(e));)e=r[i--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{"use strict";var e=n(848),t=n(338),r=n(540),i=n(72),a=n.n(i),l=n(825),o=n.n(l),s=n(659),u=n.n(s),c=n(56),d=n.n(c),f=n(159),p=n.n(f),h=n(113),m=n.n(h),g=n(541),v={};v.styleTagTransform=m(),v.setAttributes=d(),v.insert=u().bind(null,"head"),v.domAPI=o(),v.insertStyleElement=p(),a()(g.A,v);const y=g.A&&g.A.locals?g.A.locals:void 0;var b=n(364),_={};_.styleTagTransform=m(),_.setAttributes=d(),_.insert=u().bind(null,"head"),_.domAPI=o(),_.insertStyleElement=p(),a()(b.A,_);const w=b.A&&b.A.locals?b.A.locals:void 0;function A(){return(0,e.jsxs)("div",{className:w.title,children:[(0,e.jsx)("div",{className:w.verticalLine}),(0,e.jsx)("h2",{className:w.text,children:"Исторические даты"})]})}function C(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function S(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var x,k,E,T,P,M,z,O,L,N,I,D,B,F,R,$,j,H={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},V={duration:.5,overwrite:!1,delay:0},U=1e8,G=1e-8,q=2*Math.PI,W=q/4,Y=0,Q=Math.sqrt,X=Math.cos,K=Math.sin,J=function(e){return"string"==typeof e},Z=function(e){return"function"==typeof e},ee=function(e){return"number"==typeof e},te=function(e){return void 0===e},ne=function(e){return"object"==typeof e},re=function(e){return!1!==e},ie=function(){return"undefined"!=typeof window},ae=function(e){return Z(e)||J(e)},le="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},oe=Array.isArray,se=/(?:-?\.?\d|\.)+/gi,ue=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,ce=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,de=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,fe=/[+-]=-?[.\d]+/,pe=/[^,'"\[\]\s]+/gi,he=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,me={},ge={},ve=function(e){return(ge=qe(e,me))&&Wn},ye=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},be=function(e,t){return!t&&console.warn(e)},_e=function(e,t){return e&&(me[e]=t)&&ge&&(ge[e]=t)||me},we=function(){return 0},Ae={suppressEvents:!0,isStart:!0,kill:!1},Ce={suppressEvents:!0,kill:!1},Se={suppressEvents:!0},xe={},ke=[],Ee={},Te={},Pe={},Me=30,ze=[],Oe="",Le=function(e){var t,n,r=e[0];if(ne(r)||Z(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=ze.length;n--&&!ze[n].targetTest(r););t=ze[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new on(e[n],t)))||e.splice(n,1);return e},Ne=function(e){return e._gsap||Le(Ct(e))[0]._gsap},Ie=function(e,t,n){return(n=e[t])&&Z(n)?e[t]():te(n)&&e.getAttribute&&e.getAttribute(t)||n},De=function(e,t){return(e=e.split(",")).forEach(t)||e},Be=function(e){return Math.round(1e5*e)/1e5||0},Fe=function(e){return Math.round(1e7*e)/1e7||0},Re=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},$e=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},je=function(){var e,t,n=ke.length,r=ke.slice(0);for(Ee={},ke.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},He=function(e,t,n,r){ke.length&&!k&&je(),e.render(t,n,r||k&&t<0&&(e._initted||e._startAt)),ke.length&&!k&&je()},Ve=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(pe).length<2?t:J(e)?e.trim():e},Ue=function(e){return e},Ge=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},qe=function(e,t){for(var n in t)e[n]=t[n];return e},We=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=ne(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Ye=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},Qe=function(e){var t,n=e.parent||T,r=e.keyframes?(t=oe(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):Ge;if(re(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Xe=function(e,t,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a,l=e[r];if(i)for(a=t[i];l&&l[i]>a;)l=l._prev;return l?(t._next=l._next,l._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=l,t.parent=t._dp=e,t},Ke=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=t._prev,a=t._next;i?i._next=a:e[n]===t&&(e[n]=a),a?a._prev=i:e[r]===t&&(e[r]=i),t._next=t._prev=t.parent=null},Je=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove&&e.parent.remove(e),e._act=0},Ze=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},et=function(e,t,n,r){return e._startAt&&(k?e._startAt.revert(Ce):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},tt=function e(t){return!t||t._ts&&e(t.parent)},nt=function(e){return e._repeat?rt(e._tTime,e=e.duration()+e._rDelay)*e:0},rt=function(e,t){var n=Math.floor(e=Fe(e/t));return e&&n===e?n-1:n},it=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},at=function(e){return e._end=Fe(e._start+(e._tDur/Math.abs(e._ts||e._rts||G)||0))},lt=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=Fe(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),at(e),n._dirty||Ze(n,e)),e},ot=function(e,t){var n;if((t._time||!t._dur&&t._initted||t._start<e._time&&(t._dur||!t.add))&&(n=it(e.rawTime(),t),(!t._dur||bt(0,t.totalDuration(),n)-t._tTime>G)&&t.render(n,!0)),Ze(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},st=function(e,t,n,r){return t.parent&&Je(t),t._start=Fe((ee(n)?n:n||e!==T?gt(e,n,t):e._time)+t._delay),t._end=Fe(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Xe(e,t,"_first","_last",e._sort?"_start":0),ft(t)||(e._recent=t),r||ot(e,t),e._ts<0&&lt(e,e._tTime),e},ut=function(e,t){return(me.ScrollTrigger||ye("scrollTrigger",t))&&me.ScrollTrigger.create(t,e)},ct=function(e,t,n,r,i){return mn(e,t,i),e._initted?!n&&e._pt&&!k&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&L!==Wt.frame?(ke.push(e),e._lazy=[i,r],1):void 0:1},dt=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},ft=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},pt=function(e,t,n,r){var i=e._repeat,a=Fe(t)||0,l=e._tTime/e._tDur;return l&&!r&&(e._time*=a/e._dur),e._dur=a,e._tDur=i?i<0?1e10:Fe(a*(i+1)+e._rDelay*i):a,l>0&&!r&&lt(e,e._tTime=e._tDur*l),e.parent&&at(e),n||Ze(e.parent,e),e},ht=function(e){return e instanceof un?Ze(e):pt(e,e._dur)},mt={_start:0,endTime:we,totalDuration:we},gt=function e(t,n,r){var i,a,l,o=t.labels,s=t._recent||mt,u=t.duration()>=U?s.endTime(!1):t._dur;return J(n)&&(isNaN(n)||n in o)?(a=n.charAt(0),l="%"===n.substr(-1),i=n.indexOf("="),"<"===a||">"===a?(i>=0&&(n=n.replace(/=/,"")),("<"===a?s._start:s.endTime(s._repeat>=0))+(parseFloat(n.substr(1))||0)*(l?(i<0?s:r).totalDuration()/100:1)):i<0?(n in o||(o[n]=u),o[n]):(a=parseFloat(n.charAt(i-1)+n.substr(i+1)),l&&r&&(a=a/100*(oe(r)?r[0]:r).totalDuration()),i>1?e(t,n.substr(0,i-1),r)+a:u+a)):null==n?u:+n},vt=function(e,t,n){var r,i,a=ee(t[1]),l=(a?2:1)+(e<2?0:1),o=t[l];if(a&&(o.duration=t[1]),o.parent=n,e){for(r=o,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=re(i.vars.inherit)&&i.parent;o.immediateRender=re(r.immediateRender),e<2?o.runBackwards=1:o.startAt=t[l-1]}return new _n(t[0],o,t[l+1])},yt=function(e,t){return e||0===e?t(e):t},bt=function(e,t,n){return n<e?e:n>t?t:n},_t=function(e,t){return J(e)&&(t=he.exec(e))?t[1]:""},wt=[].slice,At=function(e,t){return e&&ne(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&ne(e[0]))&&!e.nodeType&&e!==P},Ct=function(e,t,n){return E&&!t&&E.selector?E.selector(e):!J(e)||n||!M&&Yt()?oe(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return J(e)&&!t||At(e,1)?(r=n).push.apply(r,Ct(e)):n.push(e)}))||n}(e,n):At(e)?wt.call(e,0):e?[e]:[]:wt.call((t||z).querySelectorAll(e),0)},St=function(e){return e=Ct(e)[0]||be("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return Ct(t,n.querySelectorAll?n:n===e?be("Invalid scope")||z.createElement("div"):e)}},xt=function(e){return e.sort((function(){return.5-Math.random()}))},kt=function(e){if(Z(e))return e;var t=ne(e)?e:{each:e},n=tn(t.ease),r=t.from||0,i=parseFloat(t.base)||0,a={},l=r>0&&r<1,o=isNaN(r)||l,s=t.axis,u=r,c=r;return J(r)?u=c={center:.5,edges:.5,end:1}[r]||0:!l&&o&&(u=r[0],c=r[1]),function(e,l,d){var f,p,h,m,g,v,y,b,_,w=(d||t).length,A=a[w];if(!A){if(!(_="auto"===t.grid?0:(t.grid||[1,U])[1])){for(y=-U;y<(y=d[_++].getBoundingClientRect().left)&&_<w;);_<w&&_--}for(A=a[w]=[],f=o?Math.min(_,w)*u-.5:r%_,p=_===U?0:o?w*c/_-.5:r/_|0,y=0,b=U,v=0;v<w;v++)h=v%_-f,m=p-(v/_|0),A[v]=g=s?Math.abs("y"===s?m:h):Q(h*h+m*m),g>y&&(y=g),g<b&&(b=g);"random"===r&&xt(A),A.max=y-b,A.min=b,A.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(_>w?w-1:s?"y"===s?w/_:_:Math.max(_,w/_))||0)*("edges"===r?-1:1),A.b=w<0?i-w:i,A.u=_t(t.amount||t.each)||0,n=n&&w<0?Zt(n):n}return w=(A[e]-A.min)/A.max||0,Fe(A.b+(n?n(w):w)*A.v)+A.u}},Et=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=Fe(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(ee(n)?0:_t(n))}},Tt=function(e,t){var n,r,i=oe(e);return!i&&ne(e)&&(n=i=e.radius||U,e.values?(e=Ct(e.values),(r=!ee(e[0]))&&(n*=n)):e=Et(e.increment)),yt(t,i?Z(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var i,a,l=parseFloat(r?t.x:t),o=parseFloat(r?t.y:0),s=U,u=0,c=e.length;c--;)(i=r?(i=e[c].x-l)*i+(a=e[c].y-o)*a:Math.abs(e[c]-l))<s&&(s=i,u=c);return u=!n||s<=n?e[u]:t,r||u===t||ee(t)?u:u+_t(t)}:Et(e))},Pt=function(e,t,n,r){return yt(oe(e)?!t:!0===n?!!(n=0):!r,(function(){return oe(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},Mt=function(e,t,n){return yt(n,(function(n){return e[~~t(n)]}))},zt=function(e){for(var t,n,r,i,a=0,l="";~(t=e.indexOf("random(",a));)r=e.indexOf(")",t),i="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(i?pe:se),l+=e.substr(a,t-a)+Pt(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),a=r+1;return l+e.substr(a,e.length-a)},Ot=function(e,t,n,r,i){var a=t-e,l=r-n;return yt(i,(function(t){return n+((t-e)/a*l||0)}))},Lt=function(e,t,n){var r,i,a,l=e.labels,o=U;for(r in l)(i=l[r]-t)<0==!!n&&i&&o>(i=Math.abs(i))&&(a=r,o=i);return a},Nt=function(e,t,n){var r,i,a,l=e.vars,o=l[t],s=E,u=e._ctx;if(o)return r=l[t+"Params"],i=l.callbackScope||e,n&&ke.length&&je(),u&&(E=u),a=r?o.apply(i,r):o.call(i),E=s,a},It=function(e){return Je(e),e.scrollTrigger&&e.scrollTrigger.kill(!!k),e.progress()<1&&Nt(e,"onInterrupt"),e},Dt=[],Bt=function(e){if(e)if(e=!e.name&&e.default||e,ie()||e.headless){var t=e.name,n=Z(e),r=t&&!n&&e.init?function(){this._props=[]}:e,i={init:we,render:Pn,add:pn,kill:zn,modifier:Mn,rawVars:0},a={targetTest:0,get:0,getSetter:xn,aliases:{},register:0};if(Yt(),e!==r){if(Te[t])return;Ge(r,Ge(Ye(e,i),a)),qe(r.prototype,qe(i,Ye(e,a))),Te[r.prop=t]=r,e.targetTest&&(ze.push(r),xe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}_e(t,r),e.register&&e.register(Wn,r,Nn)}else Dt.push(e)},Ft=255,Rt={aqua:[0,Ft,Ft],lime:[0,Ft,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Ft],navy:[0,0,128],white:[Ft,Ft,Ft],olive:[128,128,0],yellow:[Ft,Ft,0],orange:[Ft,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Ft,0,0],pink:[Ft,192,203],cyan:[0,Ft,Ft],transparent:[Ft,Ft,Ft,0]},$t=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*Ft+.5|0},jt=function(e,t,n){var r,i,a,l,o,s,u,c,d,f,p=e?ee(e)?[e>>16,e>>8&Ft,e&Ft]:0:Rt.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Rt[e])p=Rt[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),i=e.charAt(2),a=e.charAt(3),e="#"+r+r+i+i+a+a+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Ft,p&Ft,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Ft,e&Ft]}else if("hsl"===e.substr(0,3))if(p=f=e.match(se),t){if(~e.indexOf("="))return p=e.match(ue),n&&p.length<4&&(p[3]=1),p}else l=+p[0]%360/360,o=+p[1]/100,r=2*(s=+p[2]/100)-(i=s<=.5?s*(o+1):s+o-s*o),p.length>3&&(p[3]*=1),p[0]=$t(l+1/3,r,i),p[1]=$t(l,r,i),p[2]=$t(l-1/3,r,i);else p=e.match(se)||Rt.transparent;p=p.map(Number)}return t&&!f&&(r=p[0]/Ft,i=p[1]/Ft,a=p[2]/Ft,s=((u=Math.max(r,i,a))+(c=Math.min(r,i,a)))/2,u===c?l=o=0:(d=u-c,o=s>.5?d/(2-u-c):d/(u+c),l=u===r?(i-a)/d+(i<a?6:0):u===i?(a-r)/d+2:(r-i)/d+4,l*=60),p[0]=~~(l+.5),p[1]=~~(100*o+.5),p[2]=~~(100*s+.5)),n&&p.length<4&&(p[3]=1),p},Ht=function(e){var t=[],n=[],r=-1;return e.split(Ut).forEach((function(e){var i=e.match(ce)||[];t.push.apply(t,i),n.push(r+=i.length+1)})),t.c=n,t},Vt=function(e,t,n){var r,i,a,l,o="",s=(e+o).match(Ut),u=t?"hsla(":"rgba(",c=0;if(!s)return e;if(s=s.map((function(e){return(e=jt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(a=Ht(e),(r=n.c).join(o)!==a.c.join(o)))for(l=(i=e.replace(Ut,"1").split(ce)).length-1;c<l;c++)o+=i[c]+(~r.indexOf(c)?s.shift()||u+"0,0,0,0)":(a.length?a:s.length?s:n).shift());if(!i)for(l=(i=e.split(Ut)).length-1;c<l;c++)o+=i[c]+s[c];return o+i[l]},Ut=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Rt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),Gt=/hsl[a]?\(/,qt=function(e){var t,n=e.join(" ");if(Ut.lastIndex=0,Ut.test(n))return t=Gt.test(n),e[1]=Vt(e[1],t),e[0]=Vt(e[0],t,Ht(e[1])),!0},Wt=function(){var e,t,n,r,i,a,l=Date.now,o=500,s=33,u=l(),c=u,d=1e3/240,f=d,p=[],h=function n(h){var m,g,v,y,b=l()-c,_=!0===h;if((b>o||b<0)&&(u+=b-s),((m=(v=(c+=b)-u)-f)>0||_)&&(y=++r.frame,i=v-1e3*r.time,r.time=v/=1e3,f+=m+(m>=d?4:d-m),g=1),_||(e=t(n)),g)for(a=0;a<p.length;a++)p[a](v,i,y,h)};return r={time:0,frame:0,tick:function(){h(!0)},deltaRatio:function(e){return i/(1e3/(e||60))},wake:function(){O&&(!M&&ie()&&(P=M=window,z=P.document||{},me.gsap=Wn,(P.gsapVersions||(P.gsapVersions=[])).push(Wn.version),ve(ge||P.GreenSockGlobals||!P.gsap&&P||{}),Dt.forEach(Bt)),n="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame,e&&r.sleep(),t=n||function(e){return setTimeout(e,f-1e3*r.time+1|0)},I=1,h(2))},sleep:function(){(n?cancelAnimationFrame:clearTimeout)(e),I=0,t=we},lagSmoothing:function(e,t){o=e||1/0,s=Math.min(t||33,o)},fps:function(e){d=1e3/(e||240),f=1e3*r.time+d},add:function(e,t,n){var i=t?function(t,n,a,l){e(t,n,a,l),r.remove(i)}:e;return r.remove(e),p[n?"unshift":"push"](i),Yt(),i},remove:function(e,t){~(t=p.indexOf(e))&&p.splice(t,1)&&a>=t&&a--},_listeners:p}}(),Yt=function(){return!I&&Wt.wake()},Qt={},Xt=/^[\d.\-M][\d.\-,\s]/,Kt=/["']/g,Jt=function(e){for(var t,n,r,i={},a=e.substr(1,e.length-3).split(":"),l=a[0],o=1,s=a.length;o<s;o++)n=a[o],t=o!==s-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),i[l]=isNaN(r)?r.replace(Kt,"").trim():+r,l=n.substr(t+1).trim();return i},Zt=function(e){return function(t){return 1-e(1-t)}},en=function e(t,n){for(var r,i=t._first;i;)i instanceof un?e(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?e(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},tn=function(e,t){return e&&(Z(e)?e:Qt[e]||function(e){var t,n,r,i,a=(e+"").split("("),l=Qt[a[0]];return l&&a.length>1&&l.config?l.config.apply(null,~e.indexOf("{")?[Jt(a[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),i=t.indexOf("(",n),t.substring(n,~i&&i<r?t.indexOf(")",r+1):r)).split(",").map(Ve)):Qt._CE&&Xt.test(e)?Qt._CE("",e):l}(e))||t},nn=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var i,a={easeIn:t,easeOut:n,easeInOut:r};return De(e,(function(e){for(var t in Qt[e]=me[e]=a,Qt[i=e.toLowerCase()]=n,a)Qt[i+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Qt[e+"."+t]=a[t]})),a},rn=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},an=function e(t,n,r){var i=n>=1?n:1,a=(r||(t?.3:.45))/(n<1?n:1),l=a/q*(Math.asin(1/i)||0),o=function(e){return 1===e?1:i*Math.pow(2,-10*e)*K((e-l)*a)+1},s="out"===t?o:"in"===t?function(e){return 1-o(1-e)}:rn(o);return a=q/a,s.config=function(n,r){return e(t,n,r)},s},ln=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},i="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:rn(r);return i.config=function(n){return e(t,n)},i};De("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;nn(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),Qt.Linear.easeNone=Qt.none=Qt.Linear.easeIn,nn("Elastic",an("in"),an("out"),an()),D=7.5625,R=2*(F=1/(B=2.75)),$=2.5*F,nn("Bounce",(function(e){return 1-j(1-e)}),j=function(e){return e<F?D*e*e:e<R?D*Math.pow(e-1.5/B,2)+.75:e<$?D*(e-=2.25/B)*e+.9375:D*Math.pow(e-2.625/B,2)+.984375}),nn("Expo",(function(e){return Math.pow(2,10*(e-1))*e+e*e*e*e*e*e*(1-e)})),nn("Circ",(function(e){return-(Q(1-e*e)-1)})),nn("Sine",(function(e){return 1===e?1:1-X(e*W)})),nn("Back",ln("in"),ln("out"),ln()),Qt.SteppedEase=Qt.steps=me.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),i=t?1:0;return function(e){return((r*bt(0,.99999999,e)|0)+i)*n}}},V.ease=Qt["quad.out"],De("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return Oe+=e+","+e+"Params,"}));var on=function(e,t){this.id=Y++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:Ie,this.set=t?t.getSetter:xn},sn=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,pt(this,+e.duration,1,1),this.data=e.data,E&&(this._ctx=E,E.data.push(this)),I||Wt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,pt(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Yt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(lt(this,e),!n._dp||n.parent||ot(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&st(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===G||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),He(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+nt(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.rawTime()>=0&&this._initted?1:0},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+nt(this),t):this.duration()?Math.min(1,this._time/this._dur):this.rawTime()>0?1:0},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?rt(this._tTime,n)+1:1},t.timeScale=function(e,t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var n=this.parent&&this._ts?it(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(bt(-Math.abs(this._delay),this._tDur,n),!1!==t),at(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Yt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==G&&(this._tTime-=G)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&st(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(re(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?it(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=Se);var t=k;return k=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),k=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(Math.abs(t._ts)||1),t=t._dp;return!this.parent&&this._sat?this._sat.globalTime(e):n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,ht(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,ht(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(gt(this,e),re(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,re(t)),this._dur||(this._zTime=-1e-8),this},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-G))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=Z(e)?e:Ue,i=function(){var e=t.then;t.then=null,Z(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?i():t._prom=i}))},t.kill=function(){It(this)},e}();Ge(sn.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var un=function(e){function t(t,n){var r;return void 0===t&&(t={}),(r=e.call(this,t)||this).labels={},r.smoothChildTiming=!!t.smoothChildTiming,r.autoRemoveChildren=!!t.autoRemoveChildren,r._sort=re(t.sortChildren),T&&st(t.parent||T,C(r),n),t.reversed&&r.reverse(),t.paused&&r.paused(!0),t.scrollTrigger&&ut(C(r),t.scrollTrigger),r}S(t,e);var n=t.prototype;return n.to=function(e,t,n){return vt(0,arguments,this),this},n.from=function(e,t,n){return vt(1,arguments,this),this},n.fromTo=function(e,t,n,r){return vt(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,Qe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new _n(e,t,gt(this,n),1),this},n.call=function(e,t,n){return st(this,_n.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,i,a,l){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=a,n.onCompleteParams=l,n.parent=this,new _n(e,n,gt(this,i)),this},n.staggerFrom=function(e,t,n,r,i,a,l){return n.runBackwards=1,Qe(n).immediateRender=re(n.immediateRender),this.staggerTo(e,t,n,r,i,a,l)},n.staggerFromTo=function(e,t,n,r,i,a,l,o){return r.startAt=n,Qe(r).immediateRender=re(r.immediateRender),this.staggerTo(e,t,r,i,a,l,o)},n.render=function(e,t,n){var r,i,a,l,o,s,u,c,d,f,p,h,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=e<=0?0:Fe(e),b=this._zTime<0!=e<0&&(this._initted||!v);if(this!==T&&y>g&&e>=0&&(y=g),y!==this._tTime||n||b){if(m!==this._time&&v&&(y+=this._time-m,e+=this._time-m),r=y,d=this._start,s=!(c=this._ts),b&&(v||(m=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(p=this._yoyo,o=v+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,n);if(r=Fe(y%o),y===g?(l=this._repeat,r=v):((l=~~(f=Fe(y/o)))&&l===f&&(r=v,l--),r>v&&(r=v)),f=rt(this._tTime,o),!m&&this._tTime&&f!==l&&this._tTime-f*o-this._dur<=0&&(f=l),p&&1&l&&(r=v-r,h=1),l!==f&&!this._lock){var _=p&&1&f,w=_===(p&&1&l);if(l<f&&(_=!_),m=_?0:y%v?v:y,this._lock=1,this.render(m||(h?0:Fe(l*o)),t,!v)._lock=0,this._tTime=y,!t&&this.parent&&Nt(this,"onRepeat"),this.vars.repeatRefresh&&!h&&(this.invalidate()._lock=1),m&&m!==this._time||s!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,w&&(this._lock=2,m=_?v:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!h&&this.invalidate()),this._lock=0,!this._ts&&!s)return this;en(this,h)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(u=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,Fe(m),Fe(r)),u&&(y-=r-(r=u._start))),this._tTime=y,this._time=r,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,m=0),!m&&r&&!t&&!l&&(Nt(this,"onStart"),this._tTime!==y))return this;if(r>=m&&e>=0)for(i=this._first;i;){if(a=i._next,(i._act||r>=i._start)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,t,n),r!==this._time||!this._ts&&!s){u=0,a&&(y+=this._zTime=-1e-8);break}}i=a}else{i=this._last;for(var A=e<0?e:r;i;){if(a=i._prev,(i._act||A<=i._end)&&i._ts&&u!==i){if(i.parent!==this)return this.render(e,t,n);if(i.render(i._ts>0?(A-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(A-i._start)*i._ts,t,n||k&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!s){u=0,a&&(y+=this._zTime=A?-1e-8:G);break}}i=a}}if(u&&!t&&(this.pause(),u.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=d,at(this),this.render(e,t,n);this._onUpdate&&!t&&Nt(this,"onUpdate",!0),(y===g&&this._tTime>=this.totalDuration()||!y&&m)&&(d!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!v)&&(y===g&&this._ts>0||!y&&this._ts<0)&&Je(this,1),t||e<0&&!m||!y&&!m&&g||(Nt(this,y===g&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(ee(t)||(t=gt(this,t,e)),!(e instanceof sn)){if(oe(e))return e.forEach((function(e){return n.add(e,t)})),this;if(J(e))return this.addLabel(e,t);if(!Z(e))return this;e=_n.delayedCall(0,e)}return this!==e?st(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-U);for(var i=[],a=this._first;a;)a._start>=r&&(a instanceof _n?t&&i.push(a):(n&&i.push(a),e&&i.push.apply(i,a.getChildren(!0,t,n)))),a=a._next;return i},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return J(e)?this.removeLabel(e):Z(e)?this.killTweensOf(e):(e.parent===this&&Ke(this,e),e===this._recent&&(this._recent=this._last),Ze(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Fe(Wt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=gt(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=_n.delayedCall(0,t||we,n);return r.data="isPause",this._hasPause=1,st(this,r,gt(this,e))},n.removePause=function(e){var t=this._first;for(e=gt(this,e);t;)t._start===e&&"isPause"===t.data&&Je(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),i=r.length;i--;)cn!==r[i]&&r[i].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],i=Ct(e),a=this._first,l=ee(t);a;)a instanceof _n?$e(a._targets,i)&&(l?(!cn||a._initted&&a._ts)&&a.globalTime(0)<=t&&a.globalTime(a.totalDuration())>t:!t||a.isActive())&&r.push(a):(n=a.getTweensOf(i,t)).length&&r.push.apply(r,n),a=a._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,i=gt(r,e),a=t,l=a.startAt,o=a.onStart,s=a.onStartParams,u=a.immediateRender,c=_n.to(r,Ge({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale())||G,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((i-(l&&"time"in l?l.time:r._time))/r.timeScale());c._dur!==e&&pt(c,e,0,1).render(c._time,!0,!0),n=1}o&&o.apply(c,s||[])}},t));return u?c.render(0):c},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,Ge({startAt:{time:gt(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),Lt(this,gt(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),Lt(this,gt(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+G)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,i=this._first,a=this.labels;i;)i._start>=n&&(i._start+=e,i._end+=e),i=i._next;if(t)for(r in a)a[r]>=n&&(a[r]+=e);return Ze(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Ze(this)},n.totalDuration=function(e){var t,n,r,i=0,a=this,l=a._last,o=U;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-e:e));if(a._dirty){for(r=a.parent;l;)t=l._prev,l._dirty&&l.totalDuration(),(n=l._start)>o&&a._sort&&l._ts&&!a._lock?(a._lock=1,st(a,l,n-l._delay,1)._lock=0):o=n,n<0&&l._ts&&(i-=n,(!r&&!a._dp||r&&r.smoothChildTiming)&&(a._start+=n/a._ts,a._time-=n,a._tTime-=n),a.shiftChildren(-n,!1,-Infinity),o=0),l._end>i&&l._ts&&(i=l._end),l=t;pt(a,a===T&&a._time>i?a._time:i,1,1),a._dirty=0}return a._tDur},t.updateRoot=function(e){if(T._ts&&(He(T,it(e,T)),L=Wt.frame),Wt.frame>=Me){Me+=H.autoSleep||120;var t=T._first;if((!t||!t._ts)&&H.autoSleep&&Wt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Wt.sleep()}}},t}(sn);Ge(un.prototype,{_lock:0,_hasPause:0,_forcing:0});var cn,dn,fn=function(e,t,n,r,i,a,l){var o,s,u,c,d,f,p,h,m=new Nn(this._pt,e,t,0,1,Tn,null,i),g=0,v=0;for(m.b=n,m.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=zt(r)),a&&(a(h=[n,r],e,t),n=h[0],r=h[1]),s=n.match(de)||[];o=de.exec(r);)c=o[0],d=r.substring(g,o.index),u?u=(u+1)%5:"rgba("===d.substr(-5)&&(u=1),c!==s[v++]&&(f=parseFloat(s[v-1])||0,m._pt={_next:m._pt,p:d||1===v?d:",",s:f,c:"="===c.charAt(1)?Re(f,c)-f:parseFloat(c)-f,m:u&&u<4?Math.round:0},g=de.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=l,(fe.test(r)||p)&&(m.e=0),this._pt=m,m},pn=function(e,t,n,r,i,a,l,o,s,u){Z(r)&&(r=r(i||0,e,a));var c,d=e[t],f="get"!==n?n:Z(d)?s?e[t.indexOf("set")||!Z(e["get"+t.substr(3)])?t:"get"+t.substr(3)](s):e[t]():d,p=Z(d)?s?Cn:An:wn;if(J(r)&&(~r.indexOf("random(")&&(r=zt(r)),"="===r.charAt(1)&&((c=Re(f,r)+(_t(f)||0))||0===c)&&(r=c)),!u||f!==r||dn)return isNaN(f*r)||""===r?(!d&&!(t in e)&&ye(t,r),fn.call(this,e,t,f,r,p,o||H.stringFilter,s)):(c=new Nn(this._pt,e,t,+f||0,r-(f||0),"boolean"==typeof d?En:kn,0,p),s&&(c.fp=s),l&&c.modifier(l,this,e),this._pt=c)},hn=function(e,t,n,r,i,a){var l,o,s,u;if(Te[e]&&!1!==(l=new Te[e]).init(i,l.rawVars?t[e]:function(e,t,n,r,i){if(Z(e)&&(e=vn(e,i,t,n,r)),!ne(e)||e.style&&e.nodeType||oe(e)||le(e))return J(e)?vn(e,i,t,n,r):e;var a,l={};for(a in e)l[a]=vn(e[a],i,t,n,r);return l}(t[e],r,i,a,n),n,r,a)&&(n._pt=o=new Nn(n._pt,i,e,0,1,l.render,l,0,l.priority),n!==N))for(s=n._ptLookup[n._targets.indexOf(i)],u=l._props.length;u--;)s[l._props[u]]=o;return l},mn=function e(t,n,r){var i,a,l,o,s,u,c,d,f,p,h,m,g,v=t.vars,y=v.ease,b=v.startAt,_=v.immediateRender,w=v.lazy,A=v.onUpdate,C=v.runBackwards,S=v.yoyoEase,E=v.keyframes,P=v.autoRevert,M=t._dur,z=t._startAt,O=t._targets,L=t.parent,N=L&&"nested"===L.data?L.vars.targets:O,I="auto"===t._overwrite&&!x,D=t.timeline;if(D&&(!E||!y)&&(y="none"),t._ease=tn(y,V.ease),t._yEase=S?Zt(tn(!0===S?y:S,V.ease)):0,S&&t._yoyo&&!t._repeat&&(S=t._yEase,t._yEase=t._ease,t._ease=S),t._from=!D&&!!v.runBackwards,!D||E&&!v.stagger){if(m=(d=O[0]?Ne(O[0]).harness:0)&&v[d.prop],i=Ye(v,xe),z&&(z._zTime<0&&z.progress(1),n<0&&C&&_&&!P?z.render(-1,!0):z.revert(C&&M?Ce:Ae),z._lazy=0),b){if(Je(t._startAt=_n.set(O,Ge({data:"isStart",overwrite:!1,parent:L,immediateRender:!0,lazy:!z&&re(w),startAt:null,delay:0,onUpdate:A&&function(){return Nt(t,"onUpdate")},stagger:0},b))),t._startAt._dp=0,t._startAt._sat=t,n<0&&(k||!_&&!P)&&t._startAt.revert(Ce),_&&M&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(C&&M&&!z)if(n&&(_=!1),l=Ge({overwrite:!1,data:"isFromStart",lazy:_&&!z&&re(w),immediateRender:_,stagger:0,parent:L},i),m&&(l[d.prop]=m),Je(t._startAt=_n.set(O,l)),t._startAt._dp=0,t._startAt._sat=t,n<0&&(k?t._startAt.revert(Ce):t._startAt.render(-1,!0)),t._zTime=n,_){if(!n)return}else e(t._startAt,G,G);for(t._pt=t._ptCache=0,w=M&&re(w)||w&&!M,a=0;a<O.length;a++){if(c=(s=O[a])._gsap||Le(O)[a]._gsap,t._ptLookup[a]=p={},Ee[c.id]&&ke.length&&je(),h=N===O?a:N.indexOf(s),d&&!1!==(f=new d).init(s,m||i,t,h,N)&&(t._pt=o=new Nn(t._pt,s,f.name,0,1,f.render,f,0,f.priority),f._props.forEach((function(e){p[e]=o})),f.priority&&(u=1)),!d||m)for(l in i)Te[l]&&(f=hn(l,i,t,h,s,N))?f.priority&&(u=1):p[l]=o=pn.call(t,s,l,"get",i[l],h,N,0,v.stringFilter);t._op&&t._op[a]&&t.kill(s,t._op[a]),I&&t._pt&&(cn=t,T.killTweensOf(s,p,t.globalTime(n)),g=!t.parent,cn=0),t._pt&&w&&(Ee[c.id]=1)}u&&Ln(t),t._onInit&&t._onInit(t)}t._onUpdate=A,t._initted=(!t._op||t._pt)&&!g,E&&n<=0&&D.render(U,!0,!0)},gn=function(e,t,n,r){var i,a,l=t.ease||r||"power1.inOut";if(oe(t))a=n[e]||(n[e]=[]),t.forEach((function(e,n){return a.push({t:n/(t.length-1)*100,v:e,e:l})}));else for(i in t)a=n[i]||(n[i]=[]),"ease"===i||a.push({t:parseFloat(e),v:t[i],e:l})},vn=function(e,t,n,r,i){return Z(e)?e.call(t,n,r,i):J(e)&&~e.indexOf("random(")?zt(e):e},yn=Oe+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",bn={};De(yn+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return bn[e]=1}));var _n=function(e){function t(t,n,r,i){var a;"number"==typeof n&&(r.duration=n,n=r,r=null);var l,o,s,u,c,d,f,p,h=(a=e.call(this,i?n:Qe(n))||this).vars,m=h.duration,g=h.delay,v=h.immediateRender,y=h.stagger,b=h.overwrite,_=h.keyframes,w=h.defaults,A=h.scrollTrigger,S=h.yoyoEase,k=n.parent||T,E=(oe(t)||le(t)?ee(t[0]):"length"in n)?[t]:Ct(t);if(a._targets=E.length?Le(E):be("GSAP target "+t+" not found. https://gsap.com",!H.nullTargetWarn)||[],a._ptLookup=[],a._overwrite=b,_||y||ae(m)||ae(g)){if(n=a.vars,(l=a.timeline=new un({data:"nested",defaults:w||{},targets:k&&"nested"===k.data?k.vars.targets:E})).kill(),l.parent=l._dp=C(a),l._start=0,y||ae(m)||ae(g)){if(u=E.length,f=y&&kt(y),ne(y))for(c in y)~yn.indexOf(c)&&(p||(p={}),p[c]=y[c]);for(o=0;o<u;o++)(s=Ye(n,bn)).stagger=0,S&&(s.yoyoEase=S),p&&qe(s,p),d=E[o],s.duration=+vn(m,C(a),o,d,E),s.delay=(+vn(g,C(a),o,d,E)||0)-a._delay,!y&&1===u&&s.delay&&(a._delay=g=s.delay,a._start+=g,s.delay=0),l.to(d,s,f?f(o,d,E):0),l._ease=Qt.none;l.duration()?m=g=0:a.timeline=0}else if(_){Qe(Ge(l.vars.defaults,{ease:"none"})),l._ease=tn(_.ease||n.ease||"none");var P,M,z,O=0;if(oe(_))_.forEach((function(e){return l.to(E,e,">")})),l.duration();else{for(c in s={},_)"ease"===c||"easeEach"===c||gn(c,_[c],s,_.easeEach);for(c in s)for(P=s[c].sort((function(e,t){return e.t-t.t})),O=0,o=0;o<P.length;o++)(z={ease:(M=P[o]).e,duration:(M.t-(o?P[o-1].t:0))/100*m})[c]=M.v,l.to(E,z,O),O+=z.duration;l.duration()<m&&l.to({},{duration:m-l.duration()})}}m||a.duration(m=l.duration())}else a.timeline=0;return!0!==b||x||(cn=C(a),T.killTweensOf(E),cn=0),st(k,C(a),r),n.reversed&&a.reverse(),n.paused&&a.paused(!0),(v||!m&&!_&&a._start===Fe(k._time)&&re(v)&&tt(C(a))&&"nested"!==k.data)&&(a._tTime=-1e-8,a.render(Math.max(0,-g)||0)),A&&ut(C(a),A),a}S(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,i,a,l,o,s,u,c,d,f=this._time,p=this._tDur,h=this._dur,m=e<0,g=e>p-G&&!m?p:e<G?0:e;if(h){if(g!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m||this._lazy){if(r=g,c=this.timeline,this._repeat){if(l=h+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*l+e,t,n);if(r=Fe(g%l),g===p?(a=this._repeat,r=h):(a=~~(o=Fe(g/l)))&&a===o?(r=h,a--):r>h&&(r=h),(s=this._yoyo&&1&a)&&(d=this._yEase,r=h-r),o=rt(this._tTime,l),r===f&&!n&&this._initted&&a===o)return this._tTime=g,this;a!==o&&(c&&this._yEase&&en(c,s),this.vars.repeatRefresh&&!s&&!this._lock&&r!==l&&this._initted&&(this._lock=n=1,this.render(Fe(l*a),!0).invalidate()._lock=0))}if(!this._initted){if(ct(this,m?e:r,n,t,g))return this._tTime=0,this;if(!(f===this._time||n&&this.vars.repeatRefresh&&a!==o))return this;if(h!==this._dur)return this.render(e,t,n)}if(this._tTime=g,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(d||this._ease)(r/h),this._from&&(this.ratio=u=1-u),r&&!f&&!t&&!a&&(Nt(this,"onStart"),this._tTime!==g))return this;for(i=this._pt;i;)i.r(u,i.d),i=i._next;c&&c.render(e<0?e:c._dur*c._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(m&&et(this,e,0,n),Nt(this,"onUpdate")),this._repeat&&a!==o&&this.vars.onRepeat&&!t&&this.parent&&Nt(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(m&&!this._onUpdate&&et(this,e,0,!0),(e||!h)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&Je(this,1),t||m&&!f||!(g||f||s)||(Nt(this,g===p?"onComplete":"onReverseComplete",!0),this._prom&&!(g<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var i,a,l,o=e.ratio,s=t<0||!t&&(!e._start&&dt(e)&&(e._initted||!ft(e))||(e._ts<0||e._dp._ts<0)&&!ft(e))?0:1,u=e._rDelay,c=0;if(u&&e._repeat&&(c=bt(0,e._tDur,t),a=rt(c,u),e._yoyo&&1&a&&(s=1-s),a!==rt(e._tTime,u)&&(o=1-s,e.vars.repeatRefresh&&e._initted&&e.invalidate())),s!==o||k||r||e._zTime===G||!t&&e._zTime){if(!e._initted&&ct(e,t,r,n,c))return;for(l=e._zTime,e._zTime=t||(n?G:0),n||(n=t&&!l),e.ratio=s,e._from&&(s=1-s),e._time=0,e._tTime=c,i=e._pt;i;)i.r(s,i.d),i=i._next;t<0&&et(e,t,0,!0),e._onUpdate&&!n&&Nt(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&Nt(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===s&&(s&&Je(e,1),n||k||(Nt(e,s?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r,i){I||Wt.wake(),this._ts||this.play();var a=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||mn(this,a),function(e,t,n,r,i,a,l,o){var s,u,c,d,f=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!f)for(f=e._ptCache[t]=[],c=e._ptLookup,d=e._targets.length;d--;){if((s=c[d][t])&&s.d&&s.d._pt)for(s=s.d._pt;s&&s.p!==t&&s.fp!==t;)s=s._next;if(!s)return dn=1,e.vars[t]="+=0",mn(e,l),dn=0,o?be(t+" not eligible for reset"):1;f.push(s)}for(d=f.length;d--;)(s=(u=f[d])._pt||u).s=!r&&0!==r||i?s.s+(r||0)+a*s.c:r,s.c=n-s.s,u.e&&(u.e=Be(n)+_t(u.e)),u.b&&(u.b=s.s+_t(u.b))}(this,e,t,n,r,this._ease(a/this._dur),a,i)?this.resetTo(e,t,n,r,1):(lt(this,0),this.parent||Xe(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?It(this):this.scrollTrigger&&this.scrollTrigger.kill(!!k),this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,cn&&!0!==cn.vars.overwrite)._first||It(this),this.parent&&n!==this.timeline.totalDuration()&&pt(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,a,l,o,s,u,c=this._targets,d=e?Ct(e):c,f=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(c,d))return"all"===t&&(this._pt=0),It(this);for(r=this._op=this._op||[],"all"!==t&&(J(t)&&(o={},De(t,(function(e){return o[e]=1})),t=o),t=function(e,t){var n,r,i,a,l=e[0]?Ne(e[0]).harness:0,o=l&&l.aliases;if(!o)return t;for(r in n=qe({},t),o)if(r in n)for(i=(a=o[r].split(",")).length;i--;)n[a[i]]=n[r];return n}(c,t)),u=c.length;u--;)if(~d.indexOf(c[u]))for(o in i=f[u],"all"===t?(r[u]=t,l=i,a={}):(a=r[u]=r[u]||{},l=t),l)(s=i&&i[o])&&("kill"in s.d&&!0!==s.d.kill(o)||Ke(this,s,"_pt"),delete i[o]),"all"!==a&&(a[o]=1);return this._initted&&!this._pt&&p&&It(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return vt(1,arguments)},t.delayedCall=function(e,n,r,i){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},t.fromTo=function(e,t,n){return vt(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return T.killTweensOf(e,t,n)},t}(sn);Ge(_n.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),De("staggerTo,staggerFrom,staggerFromTo",(function(e){_n[e]=function(){var t=new un,n=wt.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var wn=function(e,t,n){return e[t]=n},An=function(e,t,n){return e[t](n)},Cn=function(e,t,n,r){return e[t](r.fp,n)},Sn=function(e,t,n){return e.setAttribute(t,n)},xn=function(e,t){return Z(e[t])?An:te(e[t])&&e.setAttribute?Sn:wn},kn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},En=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},Tn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},Pn=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},Mn=function(e,t,n,r){for(var i,a=this._pt;a;)i=a._next,a.p===r&&a.modifier(e,t,n),a=i},zn=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Ke(this,r,"_pt"):r.dep||(t=1),r=n;return!t},On=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},Ln=function(e){for(var t,n,r,i,a=e._pt;a;){for(t=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:i)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:i=a,a=t}e._pt=r},Nn=function(){function e(e,t,n,r,i,a,l,o,s){this.t=t,this.s=r,this.c=i,this.p=n,this.r=a||kn,this.d=l||this,this.set=o||wn,this.pr=s||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=On,this.m=e,this.mt=n,this.tween=t},e}();De(Oe+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return xe[e]=1})),me.TweenMax=me.TweenLite=_n,me.TimelineLite=me.TimelineMax=un,T=new un({sortChildren:!1,defaults:V,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),H.stringFilter=qt;var In=[],Dn={},Bn=[],Fn=0,Rn=0,$n=function(e){return(Dn[e]||Bn).map((function(e){return e()}))},jn=function(){var e=Date.now(),t=[];e-Fn>2&&($n("matchMediaInit"),In.forEach((function(e){var n,r,i,a,l=e.queries,o=e.conditions;for(r in l)(n=P.matchMedia(l[r]).matches)&&(i=1),n!==o[r]&&(o[r]=n,a=1);a&&(e.revert(),i&&t.push(e))})),$n("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e,(function(t){return e.add(null,t)}))})),Fn=e,$n("matchMedia"))},Hn=function(){function e(e,t){this.selector=t&&St(t),this.data=[],this._r=[],this.isReverted=!1,this.id=Rn++,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){Z(e)&&(n=t,t=e,e=Z);var r=this,i=function(){var e,i=E,a=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=St(n)),E=r,e=t.apply(r,arguments),Z(e)&&r._r.push(e),E=i,r.selector=a,r.isReverted=!1,e};return r.last=i,e===Z?i(r,(function(e){return r.add(null,e)})):e?r[e]=i:i},t.ignore=function(e){var t=E;E=null,e(this),E=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof _n&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e?function(){for(var t,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(t=n.data[i]).data&&(t.revert(),t.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})));for(r.map((function(e){return{g:e._dur||e._delay||e._sat&&!e._sat.vars.immediateRender?e.globalTime(0):-1/0,t:e}})).sort((function(e,t){return t.g-e.g||-1/0})).forEach((function(t){return t.t.revert(e)})),i=n.data.length;i--;)(t=n.data[i])instanceof un?"nested"!==t.data&&(t.scrollTrigger&&t.scrollTrigger.revert(),t.kill()):!(t instanceof _n)&&t.revert&&t.revert(e);n._r.forEach((function(t){return t(e,n)})),n.isReverted=!0}():this.data.forEach((function(e){return e.kill&&e.kill()})),this.clear(),t)for(var r=In.length;r--;)In[r].id===this.id&&In.splice(r,1)},t.revert=function(e){this.kill(e||{})},e}(),Vn=function(){function e(e){this.contexts=[],this.scope=e,E&&E.data.push(this)}var t=e.prototype;return t.add=function(e,t,n){ne(e)||(e={matches:e});var r,i,a,l=new Hn(0,n||this.scope),o=l.conditions={};for(i in E&&!l.selector&&(l.selector=E.selector),this.contexts.push(l),t=l.add("onMatch",t),l.queries=e,e)"all"===i?a=1:(r=P.matchMedia(e[i]))&&(In.indexOf(l)<0&&In.push(l),(o[i]=r.matches)&&(a=1),r.addListener?r.addListener(jn):r.addEventListener("change",jn));return a&&t(l,(function(e){return l.add(null,e)})),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Un={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return Bt(e)}))},timeline:function(e){return new un(e)},getTweensOf:function(e,t){return T.getTweensOf(e,t)},getProperty:function(e,t,n,r){J(e)&&(e=Ct(e)[0]);var i=Ne(e||{}).get,a=n?Ue:Ve;return"native"===n&&(n=""),e?t?a((Te[t]&&Te[t].get||i)(e,t,n,r)):function(t,n,r){return a((Te[t]&&Te[t].get||i)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=Ct(e)).length>1){var r=e.map((function(e){return Wn.quickSetter(e,t,n)})),i=r.length;return function(e){for(var t=i;t--;)r[t](e)}}e=e[0]||{};var a=Te[t],l=Ne(e),o=l.harness&&(l.harness.aliases||{})[t]||t,s=a?function(t){var r=new a;N._pt=0,r.init(e,n?t+n:t,N,0,[e]),r.render(1,r),N._pt&&Pn(1,N)}:l.set(e,o);return a?s:function(t){return s(e,o,n?t+n:t,l,1)}},quickTo:function(e,t,n){var r,i=Wn.to(e,Ge(((r={})[t]="+=0.1",r.paused=!0,r.stagger=0,r),n||{})),a=function(e,n,r){return i.resetTo(t,e,n,r)};return a.tween=i,a},isTweening:function(e){return T.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=tn(e.ease,V.ease)),We(V,e||{})},config:function(e){return We(H,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,i=e.defaults,a=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!Te[e]&&!me[e]&&be(t+" effect requires "+e+" plugin.")})),Pe[t]=function(e,t,r){return n(Ct(e),Ge(t||{},i),r)},a&&(un.prototype[t]=function(e,n,r){return this.add(Pe[t](e,ne(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Qt[e]=tn(t)},parseEase:function(e,t){return arguments.length?tn(e,t):Qt},getById:function(e){return T.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,i=new un(e);for(i.smoothChildTiming=re(e.smoothChildTiming),T.remove(i),i._dp=0,i._time=i._tTime=T._time,n=T._first;n;)r=n._next,!t&&!n._dur&&n instanceof _n&&n.vars.onComplete===n._targets[0]||st(i,n,n._start-n._delay),n=r;return st(T,i,0),i},context:function(e,t){return e?new Hn(e,t):E},matchMedia:function(e){return new Vn(e)},matchMediaRefresh:function(){return In.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||jn()},addEventListener:function(e,t){var n=Dn[e]||(Dn[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=Dn[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var i=n-t;return oe(t)?Mt(t,e(0,t.length),n):yt(r,(function(e){return(i+(e-t)%i)%i+t}))},wrapYoyo:function e(t,n,r){var i=n-t,a=2*i;return oe(t)?Mt(t,e(0,t.length-1),n):yt(r,(function(e){return t+((e=(a+(e-t)%a)%a||0)>i?a-e:e)}))},distribute:kt,random:Pt,snap:Tt,normalize:function(e,t,n){return Ot(e,t,0,1,n)},getUnit:_t,clamp:function(e,t,n){return yt(n,(function(n){return bt(e,t,n)}))},splitColor:jt,toArray:Ct,selector:St,mapRange:Ot,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||_t(n))}},interpolate:function e(t,n,r,i){var a=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!a){var l,o,s,u,c,d=J(t),f={};if(!0===r&&(i=1)&&(r=null),d)t={p:t},n={p:n};else if(oe(t)&&!oe(n)){for(s=[],u=t.length,c=u-2,o=1;o<u;o++)s.push(e(t[o-1],t[o]));u--,a=function(e){e*=u;var t=Math.min(c,~~e);return s[t](e-t)},r=n}else i||(t=qe(oe(t)?[]:{},t));if(!s){for(l in n)pn.call(f,t,l,"get",n[l]);a=function(e){return Pn(e,f)||(d?t.p:t)}}}return yt(r,a)},shuffle:xt},install:ve,effects:Pe,ticker:Wt,updateRoot:un.updateRoot,plugins:Te,globalTimeline:T,core:{PropTween:Nn,globals:_e,Tween:_n,Timeline:un,Animation:sn,getCache:Ne,_removeLinkedListItem:Ke,reverting:function(){return k},context:function(e){return e&&E&&(E.data.push(e),e._ctx=E),E},suppressOverwrites:function(e){return x=e}}};De("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Un[e]=_n[e]})),Wt.add(un.updateRoot),N=Un.to({},{duration:0});var Gn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},qn=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,i;if(J(n)&&(r={},De(n,(function(e){return r[e]=1})),n=r),t){for(i in r={},n)r[i]=t(n[i]);n=r}!function(e,t){var n,r,i,a=e._targets;for(n in t)for(r=a.length;r--;)(i=e._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Gn(i,n)),i&&i.modifier&&i.modifier(t[n],e,a[r],n))}(e,n)}}}},Wn=Un.registerPlugin({name:"attr",init:function(e,t,n,r,i){var a,l,o;for(a in this.tween=n,t)o=e.getAttribute(a)||"",(l=this.add(e,"setAttribute",(o||0)+"",t[a],r,i,0,0,a)).op=a,l.b=o,this._props.push(a)},render:function(e,t){for(var n=t._pt;n;)k?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},qn("roundProps",Et),qn("modifiers"),qn("snap",Tt))||Un;_n.version=un.version=Wn.version="3.12.7",O=1,ie()&&Yt(),Qt.Power0,Qt.Power1,Qt.Power2,Qt.Power3,Qt.Power4,Qt.Linear,Qt.Quad,Qt.Cubic,Qt.Quart,Qt.Quint,Qt.Strong,Qt.Elastic,Qt.Back,Qt.SteppedEase,Qt.Bounce,Qt.Sine,Qt.Expo,Qt.Circ;var Yn,Qn,Xn,Kn,Jn,Zn,er,tr,nr={},rr=180/Math.PI,ir=Math.PI/180,ar=Math.atan2,lr=/([A-Z])/g,or=/(left|right|width|margin|padding|x)/i,sr=/[\s,\(]\S/,ur={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},cr=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},dr=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},fr=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},pr=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},hr=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},mr=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},gr=function(e,t,n){return e.style[t]=n},vr=function(e,t,n){return e.style.setProperty(t,n)},yr=function(e,t,n){return e._gsap[t]=n},br=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},_r=function(e,t,n,r,i){var a=e._gsap;a.scaleX=a.scaleY=n,a.renderTransform(i,a)},wr=function(e,t,n,r,i){var a=e._gsap;a[t]=n,a.renderTransform(i,a)},Ar="transform",Cr=Ar+"Origin",Sr=function e(t,n){var r=this,i=this.target,a=i.style,l=i._gsap;if(t in nr&&a){if(this.tfm=this.tfm||{},"transform"===t)return ur.transform.split(",").forEach((function(t){return e.call(r,t,n)}));if(~(t=ur[t]||t).indexOf(",")?t.split(",").forEach((function(e){return r.tfm[e]=Hr(i,e)})):this.tfm[t]=l.x?l[t]:Hr(i,t),t===Cr&&(this.tfm.zOrigin=l.zOrigin),this.props.indexOf(Ar)>=0)return;l.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(Cr,n,"")),t=Ar}(a||n)&&this.props.push(t,n,a[t])},xr=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},kr=function(){var e,t,n=this.props,r=this.target,i=r.style,a=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?2===n[e+1]?r[n[e]](n[e+2]):r[n[e]]=n[e+2]:n[e+2]?i[n[e]]=n[e+2]:i.removeProperty("--"===n[e].substr(0,2)?n[e]:n[e].replace(lr,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)a[t]=this.tfm[t];a.svg&&(a.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(e=er())&&e.isStart||i[Ar]||(xr(i),a.zOrigin&&i[Cr]&&(i[Cr]+=" "+a.zOrigin+"px",a.zOrigin=0,a.renderTransform()),a.uncache=1)}},Er=function(e,t){var n={target:e,props:[],revert:kr,save:Sr};return e._gsap||Wn.core.getCache(e),t&&e.style&&e.nodeType&&t.split(",").forEach((function(e){return n.save(e)})),n},Tr=function(e,t){var n=Qn.createElementNS?Qn.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):Qn.createElement(e);return n&&n.style?n:Qn.createElement(e)},Pr=function e(t,n,r){var i=getComputedStyle(t);return i[n]||i.getPropertyValue(n.replace(lr,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&e(t,zr(n)||n,1)||""},Mr="O,Moz,ms,Ms,Webkit".split(","),zr=function(e,t,n){var r=(t||Jn).style,i=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);i--&&!(Mr[i]+e in r););return i<0?null:(3===i?"ms":i>=0?Mr[i]:"")+e},Or=function(){"undefined"!=typeof window&&window.document&&(Yn=window,Qn=Yn.document,Xn=Qn.documentElement,Jn=Tr("div")||{style:{}},Tr("div"),Ar=zr(Ar),Cr=Ar+"Origin",Jn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",tr=!!zr("perspective"),er=Wn.core.reverting,Kn=1)},Lr=function(e){var t,n=e.ownerSVGElement,r=Tr("svg",n&&n.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=e.cloneNode(!0);i.style.display="block",r.appendChild(i),Xn.appendChild(r);try{t=i.getBBox()}catch(e){}return r.removeChild(i),Xn.removeChild(r),t},Nr=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},Ir=function(e){var t,n;try{t=e.getBBox()}catch(r){t=Lr(e),n=1}return t&&(t.width||t.height)||n||(t=Lr(e)),!t||t.width||t.x||t.y?t:{x:+Nr(e,["x","cx","x1"])||0,y:+Nr(e,["y","cy","y1"])||0,width:0,height:0}},Dr=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!Ir(e))},Br=function(e,t){if(t){var n,r=e.style;t in nr&&t!==Cr&&(t=Ar),r.removeProperty?("ms"!==(n=t.substr(0,2))&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty("--"===n?t:t.replace(lr,"-$1").toLowerCase())):r.removeAttribute(t)}},Fr=function(e,t,n,r,i,a){var l=new Nn(e._pt,t,n,0,1,a?mr:hr);return e._pt=l,l.b=r,l.e=i,e._props.push(n),l},Rr={deg:1,rad:1,turn:1},$r={grid:1,flex:1},jr=function e(t,n,r,i){var a,l,o,s,u=parseFloat(r)||0,c=(r+"").trim().substr((u+"").length)||"px",d=Jn.style,f=or.test(n),p="svg"===t.tagName.toLowerCase(),h=(p?"client":"offset")+(f?"Width":"Height"),m=100,g="px"===i,v="%"===i;if(i===c||!u||Rr[i]||Rr[c])return u;if("px"!==c&&!g&&(u=e(t,n,r,"px")),s=t.getCTM&&Dr(t),(v||"%"===c)&&(nr[n]||~n.indexOf("adius")))return a=s?t.getBBox()[f?"width":"height"]:t[h],Be(v?u/a*m:u/100*a);if(d[f?"width":"height"]=m+(g?c:i),l="rem"!==i&&~n.indexOf("adius")||"em"===i&&t.appendChild&&!p?t:t.parentNode,s&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==Qn&&l.appendChild||(l=Qn.body),(o=l._gsap)&&v&&o.width&&f&&o.time===Wt.time&&!o.uncache)return Be(u/o.width*m);if(!v||"height"!==n&&"width"!==n)(v||"%"===c)&&!$r[Pr(l,"display")]&&(d.position=Pr(t,"position")),l===t&&(d.position="static"),l.appendChild(Jn),a=Jn[h],l.removeChild(Jn),d.position="absolute";else{var y=t.style[n];t.style[n]=m+i,a=t[h],y?t.style[n]=y:Br(t,n)}return f&&v&&((o=Ne(l)).time=Wt.time,o.width=l[h]),Be(g?a*u/m:a&&u?m/a*u:0)},Hr=function(e,t,n,r){var i;return Kn||Or(),t in ur&&"transform"!==t&&~(t=ur[t]).indexOf(",")&&(t=t.split(",")[0]),nr[t]&&"transform"!==t?(i=Zr(e,r),i="transformOrigin"!==t?i[t]:i.svg?i.origin:ei(Pr(e,Cr))+" "+i.zOrigin+"px"):(!(i=e.style[t])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=qr[t]&&qr[t](e,t,n)||Pr(e,t)||Ie(e,t)||("opacity"===t?1:0)),n&&!~(i+"").trim().indexOf(" ")?jr(e,t,i,n)+n:i},Vr=function(e,t,n,r){if(!n||"none"===n){var i=zr(t,e,1),a=i&&Pr(e,i,1);a&&a!==n?(t=i,n=a):"borderColor"===t&&(n=Pr(e,"borderTopColor"))}var l,o,s,u,c,d,f,p,h,m,g,v=new Nn(this._pt,e.style,t,0,1,Tn),y=0,b=0;if(v.b=n,v.e=r,n+="","auto"==(r+="")&&(d=e.style[t],e.style[t]=r,r=Pr(e,t)||r,d?e.style[t]=d:Br(e,t)),qt(l=[n,r]),r=l[1],s=(n=l[0]).match(ce)||[],(r.match(ce)||[]).length){for(;o=ce.exec(r);)f=o[0],h=r.substring(y,o.index),c?c=(c+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(c=1),f!==(d=s[b++]||"")&&(u=parseFloat(d)||0,g=d.substr((u+"").length),"="===f.charAt(1)&&(f=Re(u,f)+g),p=parseFloat(f),m=f.substr((p+"").length),y=ce.lastIndex-m.length,m||(m=m||H.units[t]||g,y===r.length&&(r+=m,v.e+=m)),g!==m&&(u=jr(e,t,d,m)||0),v._pt={_next:v._pt,p:h||1===b?h:",",s:u,c:p-u,m:c&&c<4||"zIndex"===t?Math.round:0});v.c=y<r.length?r.substring(y,r.length):""}else v.r="display"===t&&"none"===r?mr:hr;return fe.test(r)&&(v.e=0),this._pt=v,v},Ur={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Gr=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,i,a=t.t,l=a.style,o=t.u,s=a._gsap;if("all"===o||!0===o)l.cssText="",r=1;else for(i=(o=o.split(",")).length;--i>-1;)n=o[i],nr[n]&&(r=1,n="transformOrigin"===n?Cr:Ar),Br(a,n);r&&(Br(a,Ar),s&&(s.svg&&a.removeAttribute("transform"),l.scale=l.rotate=l.translate="none",Zr(a,1),s.uncache=1,xr(l)))}},qr={clearProps:function(e,t,n,r,i){if("isFromStart"!==i.data){var a=e._pt=new Nn(e._pt,t,n,0,0,Gr);return a.u=r,a.pr=-10,a.tween=i,e._props.push(n),1}}},Wr=[1,0,0,1,0,0],Yr={},Qr=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},Xr=function(e){var t=Pr(e,Ar);return Qr(t)?Wr:t.substr(7).match(ue).map(Be)},Kr=function(e,t){var n,r,i,a,l=e._gsap||Ne(e),o=e.style,s=Xr(e);return l.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(s=[(i=e.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?Wr:s:(s!==Wr||e.offsetParent||e===Xn||l.svg||(i=o.display,o.display="block",(n=e.parentNode)&&(e.offsetParent||e.getBoundingClientRect().width)||(a=1,r=e.nextElementSibling,Xn.appendChild(e)),s=Xr(e),i?o.display=i:Br(e,"display"),a&&(r?n.insertBefore(e,r):n?n.appendChild(e):Xn.removeChild(e))),t&&s.length>6?[s[0],s[1],s[4],s[5],s[12],s[13]]:s)},Jr=function(e,t,n,r,i,a){var l,o,s,u=e._gsap,c=i||Kr(e,!0),d=u.xOrigin||0,f=u.yOrigin||0,p=u.xOffset||0,h=u.yOffset||0,m=c[0],g=c[1],v=c[2],y=c[3],b=c[4],_=c[5],w=t.split(" "),A=parseFloat(w[0])||0,C=parseFloat(w[1])||0;n?c!==Wr&&(o=m*y-g*v)&&(s=A*(-g/o)+C*(m/o)-(m*_-g*b)/o,A=A*(y/o)+C*(-v/o)+(v*_-y*b)/o,C=s):(A=(l=Ir(e)).x+(~w[0].indexOf("%")?A/100*l.width:A),C=l.y+(~(w[1]||w[0]).indexOf("%")?C/100*l.height:C)),r||!1!==r&&u.smooth?(b=A-d,_=C-f,u.xOffset=p+(b*m+_*v)-b,u.yOffset=h+(b*g+_*y)-_):u.xOffset=u.yOffset=0,u.xOrigin=A,u.yOrigin=C,u.smooth=!!r,u.origin=t,u.originIsAbsolute=!!n,e.style[Cr]="0px 0px",a&&(Fr(a,u,"xOrigin",d,A),Fr(a,u,"yOrigin",f,C),Fr(a,u,"xOffset",p,u.xOffset),Fr(a,u,"yOffset",h,u.yOffset)),e.setAttribute("data-svg-origin",A+" "+C)},Zr=function(e,t){var n=e._gsap||new on(e);if("x"in n&&!t&&!n.uncache)return n;var r,i,a,l,o,s,u,c,d,f,p,h,m,g,v,y,b,_,w,A,C,S,x,k,E,T,P,M,z,O,L,N,I=e.style,D=n.scaleX<0,B="px",F="deg",R=getComputedStyle(e),$=Pr(e,Cr)||"0";return r=i=a=s=u=c=d=f=p=0,l=o=1,n.svg=!(!e.getCTM||!Dr(e)),R.translate&&("none"===R.translate&&"none"===R.scale&&"none"===R.rotate||(I[Ar]=("none"!==R.translate?"translate3d("+(R.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==R.rotate?"rotate("+R.rotate+") ":"")+("none"!==R.scale?"scale("+R.scale.split(" ").join(",")+") ":"")+("none"!==R[Ar]?R[Ar]:"")),I.scale=I.rotate=I.translate="none"),g=Kr(e,n.svg),n.svg&&(n.uncache?(E=e.getBBox(),$=n.xOrigin-E.x+"px "+(n.yOrigin-E.y)+"px",k=""):k=!t&&e.getAttribute("data-svg-origin"),Jr(e,k||$,!!k||n.originIsAbsolute,!1!==n.smooth,g)),h=n.xOrigin||0,m=n.yOrigin||0,g!==Wr&&(_=g[0],w=g[1],A=g[2],C=g[3],r=S=g[4],i=x=g[5],6===g.length?(l=Math.sqrt(_*_+w*w),o=Math.sqrt(C*C+A*A),s=_||w?ar(w,_)*rr:0,(d=A||C?ar(A,C)*rr+s:0)&&(o*=Math.abs(Math.cos(d*ir))),n.svg&&(r-=h-(h*_+m*A),i-=m-(h*w+m*C))):(N=g[6],O=g[7],P=g[8],M=g[9],z=g[10],L=g[11],r=g[12],i=g[13],a=g[14],u=(v=ar(N,z))*rr,v&&(k=S*(y=Math.cos(-v))+P*(b=Math.sin(-v)),E=x*y+M*b,T=N*y+z*b,P=S*-b+P*y,M=x*-b+M*y,z=N*-b+z*y,L=O*-b+L*y,S=k,x=E,N=T),c=(v=ar(-A,z))*rr,v&&(y=Math.cos(-v),L=C*(b=Math.sin(-v))+L*y,_=k=_*y-P*b,w=E=w*y-M*b,A=T=A*y-z*b),s=(v=ar(w,_))*rr,v&&(k=_*(y=Math.cos(v))+w*(b=Math.sin(v)),E=S*y+x*b,w=w*y-_*b,x=x*y-S*b,_=k,S=E),u&&Math.abs(u)+Math.abs(s)>359.9&&(u=s=0,c=180-c),l=Be(Math.sqrt(_*_+w*w+A*A)),o=Be(Math.sqrt(x*x+N*N)),v=ar(S,x),d=Math.abs(v)>2e-4?v*rr:0,p=L?1/(L<0?-L:L):0),n.svg&&(k=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!Qr(Pr(e,Ar)),k&&e.setAttribute("transform",k))),Math.abs(d)>90&&Math.abs(d)<270&&(D?(l*=-1,d+=s<=0?180:-180,s+=s<=0?180:-180):(o*=-1,d+=d<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+B,n.y=i-((n.yPercent=i&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-i)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+B,n.z=a+B,n.scaleX=Be(l),n.scaleY=Be(o),n.rotation=Be(s)+F,n.rotationX=Be(u)+F,n.rotationY=Be(c)+F,n.skewX=d+F,n.skewY=f+F,n.transformPerspective=p+B,(n.zOrigin=parseFloat($.split(" ")[2])||!t&&n.zOrigin||0)&&(I[Cr]=ei($)),n.xOffset=n.yOffset=0,n.force3D=H.force3D,n.renderTransform=n.svg?oi:tr?li:ni,n.uncache=0,n},ei=function(e){return(e=e.split(" "))[0]+" "+e[1]},ti=function(e,t,n){var r=_t(t);return Be(parseFloat(t)+parseFloat(jr(e,"x",n+"px",r)))+r},ni=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,li(e,t)},ri="0deg",ii="0px",ai=") ",li=function(e,t){var n=t||this,r=n.xPercent,i=n.yPercent,a=n.x,l=n.y,o=n.z,s=n.rotation,u=n.rotationY,c=n.rotationX,d=n.skewX,f=n.skewY,p=n.scaleX,h=n.scaleY,m=n.transformPerspective,g=n.force3D,v=n.target,y=n.zOrigin,b="",_="auto"===g&&e&&1!==e||!0===g;if(y&&(c!==ri||u!==ri)){var w,A=parseFloat(u)*ir,C=Math.sin(A),S=Math.cos(A);A=parseFloat(c)*ir,w=Math.cos(A),a=ti(v,a,C*w*-y),l=ti(v,l,-Math.sin(A)*-y),o=ti(v,o,S*w*-y+y)}m!==ii&&(b+="perspective("+m+ai),(r||i)&&(b+="translate("+r+"%, "+i+"%) "),(_||a!==ii||l!==ii||o!==ii)&&(b+=o!==ii||_?"translate3d("+a+", "+l+", "+o+") ":"translate("+a+", "+l+ai),s!==ri&&(b+="rotate("+s+ai),u!==ri&&(b+="rotateY("+u+ai),c!==ri&&(b+="rotateX("+c+ai),d===ri&&f===ri||(b+="skew("+d+", "+f+ai),1===p&&1===h||(b+="scale("+p+", "+h+ai),v.style[Ar]=b||"translate(0, 0)"},oi=function(e,t){var n,r,i,a,l,o=t||this,s=o.xPercent,u=o.yPercent,c=o.x,d=o.y,f=o.rotation,p=o.skewX,h=o.skewY,m=o.scaleX,g=o.scaleY,v=o.target,y=o.xOrigin,b=o.yOrigin,_=o.xOffset,w=o.yOffset,A=o.forceCSS,C=parseFloat(c),S=parseFloat(d);f=parseFloat(f),p=parseFloat(p),(h=parseFloat(h))&&(p+=h=parseFloat(h),f+=h),f||p?(f*=ir,p*=ir,n=Math.cos(f)*m,r=Math.sin(f)*m,i=Math.sin(f-p)*-g,a=Math.cos(f-p)*g,p&&(h*=ir,l=Math.tan(p-h),i*=l=Math.sqrt(1+l*l),a*=l,h&&(l=Math.tan(h),n*=l=Math.sqrt(1+l*l),r*=l)),n=Be(n),r=Be(r),i=Be(i),a=Be(a)):(n=m,a=g,r=i=0),(C&&!~(c+"").indexOf("px")||S&&!~(d+"").indexOf("px"))&&(C=jr(v,"x",c,"px"),S=jr(v,"y",d,"px")),(y||b||_||w)&&(C=Be(C+y-(y*n+b*i)+_),S=Be(S+b-(y*r+b*a)+w)),(s||u)&&(l=v.getBBox(),C=Be(C+s/100*l.width),S=Be(S+u/100*l.height)),l="matrix("+n+","+r+","+i+","+a+","+C+","+S+")",v.setAttribute("transform",l),A&&(v.style[Ar]=l)},si=function(e,t,n,r,i){var a,l,o=360,s=J(i),u=parseFloat(i)*(s&&~i.indexOf("rad")?rr:1)-r,c=r+u+"deg";return s&&("short"===(a=i.split("_")[1])&&(u%=o)!=u%180&&(u+=u<0?o:-360),"cw"===a&&u<0?u=(u+36e9)%o-~~(u/o)*o:"ccw"===a&&u>0&&(u=(u-36e9)%o-~~(u/o)*o)),e._pt=l=new Nn(e._pt,t,n,r,u,dr),l.e=c,l.u="deg",e._props.push(n),l},ui=function(e,t){for(var n in t)e[n]=t[n];return e},ci=function(e,t,n){var r,i,a,l,o,s,u,c=ui({},n._gsap),d=n.style;for(i in c.svg?(a=n.getAttribute("transform"),n.setAttribute("transform",""),d[Ar]=t,r=Zr(n,1),Br(n,Ar),n.setAttribute("transform",a)):(a=getComputedStyle(n)[Ar],d[Ar]=t,r=Zr(n,1),d[Ar]=a),nr)(a=c[i])!==(l=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(o=_t(a)!==(u=_t(l))?jr(n,i,a,u):parseFloat(a),s=parseFloat(l),e._pt=new Nn(e._pt,r,i,o,s-o,cr),e._pt.u=u||0,e._props.push(i));ui(r,c)};De("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",i="Bottom",a="Left",l=(t<3?[n,r,i,a]:[n+a,n+r,i+r,i+a]).map((function(n){return t<2?e+n:"border"+n+e}));qr[t>1?"border"+e:e]=function(e,t,n,r,i){var a,o;if(arguments.length<4)return a=l.map((function(t){return Hr(e,t,n)})),5===(o=a.join(" ")).split(a[0]).length?a[0]:o;a=(r+"").split(" "),o={},l.forEach((function(e,t){return o[e]=a[t]=a[t]||a[(t-1)/2|0]})),e.init(t,o,i)}}));var di,fi,pi={name:"css",register:Or,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,i){var a,l,o,s,u,c,d,f,p,h,m,g,v,y,b,_,w,A,C,S,x=this._props,k=e.style,E=n.vars.startAt;for(d in Kn||Or(),this.styles=this.styles||Er(e),_=this.styles.props,this.tween=n,t)if("autoRound"!==d&&(l=t[d],!Te[d]||!hn(d,t,n,r,e,i)))if(u=typeof l,c=qr[d],"function"===u&&(u=typeof(l=l.call(n,r,e,i))),"string"===u&&~l.indexOf("random(")&&(l=zt(l)),c)c(this,e,d,l,n)&&(b=1);else if("--"===d.substr(0,2))a=(getComputedStyle(e).getPropertyValue(d)+"").trim(),l+="",Ut.lastIndex=0,Ut.test(a)||(f=_t(a),p=_t(l)),p?f!==p&&(a=jr(e,d,a,p)+p):f&&(l+=f),this.add(k,"setProperty",a,l,r,i,0,0,d),x.push(d),_.push(d,0,k[d]);else if("undefined"!==u){if(E&&d in E?(a="function"==typeof E[d]?E[d].call(n,r,e,i):E[d],J(a)&&~a.indexOf("random(")&&(a=zt(a)),_t(a+"")||"auto"===a||(a+=H.units[d]||_t(Hr(e,d))||""),"="===(a+"").charAt(1)&&(a=Hr(e,d))):a=Hr(e,d),s=parseFloat(a),(h="string"===u&&"="===l.charAt(1)&&l.substr(0,2))&&(l=l.substr(2)),o=parseFloat(l),d in ur&&("autoAlpha"===d&&(1===s&&"hidden"===Hr(e,"visibility")&&o&&(s=0),_.push("visibility",0,k.visibility),Fr(this,k,"visibility",s?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==d&&"transform"!==d&&~(d=ur[d]).indexOf(",")&&(d=d.split(",")[0])),m=d in nr)if(this.styles.save(d),g||((v=e._gsap).renderTransform&&!t.parseTransform||Zr(e,t.parseTransform),y=!1!==t.smoothOrigin&&v.smooth,(g=this._pt=new Nn(this._pt,k,Ar,0,1,v.renderTransform,v,0,-1)).dep=1),"scale"===d)this._pt=new Nn(this._pt,v,"scaleY",v.scaleY,(h?Re(v.scaleY,h+o):o)-v.scaleY||0,cr),this._pt.u=0,x.push("scaleY",d),d+="X";else{if("transformOrigin"===d){_.push(Cr,0,k[Cr]),A=void 0,C=void 0,S=void 0,C=(A=(w=l).split(" "))[0],S=A[1]||"50%","top"!==C&&"bottom"!==C&&"left"!==S&&"right"!==S||(w=C,C=S,S=w),A[0]=Ur[C]||C,A[1]=Ur[S]||S,l=A.join(" "),v.svg?Jr(e,l,0,y,0,this):((p=parseFloat(l.split(" ")[2])||0)!==v.zOrigin&&Fr(this,v,"zOrigin",v.zOrigin,p),Fr(this,k,d,ei(a),ei(l)));continue}if("svgOrigin"===d){Jr(e,l,1,y,0,this);continue}if(d in Yr){si(this,v,d,s,h?Re(s,h+l):l);continue}if("smoothOrigin"===d){Fr(this,v,"smooth",v.smooth,l);continue}if("force3D"===d){v[d]=l;continue}if("transform"===d){ci(this,l,e);continue}}else d in k||(d=zr(d)||d);if(m||(o||0===o)&&(s||0===s)&&!sr.test(l)&&d in k)o||(o=0),(f=(a+"").substr((s+"").length))!==(p=_t(l)||(d in H.units?H.units[d]:f))&&(s=jr(e,d,a,p)),this._pt=new Nn(this._pt,m?v:k,d,s,(h?Re(s,h+o):o)-s,m||"px"!==p&&"zIndex"!==d||!1===t.autoRound?cr:pr),this._pt.u=p||0,f!==p&&"%"!==p&&(this._pt.b=a,this._pt.r=fr);else if(d in k)Vr.call(this,e,d,a,h?h+l:l);else if(d in e)this.add(e,d,a||e[d],h?h+l:l,r,i);else if("parseTransform"!==d){ye(d,l);continue}m||(d in k?_.push(d,0,k[d]):"function"==typeof e[d]?_.push(d,2,e[d]()):_.push(d,1,a||e[d])),x.push(d)}b&&Ln(this)},render:function(e,t){if(t.tween._time||!er())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Hr,aliases:ur,getSetter:function(e,t,n){var r=ur[t];return r&&r.indexOf(",")<0&&(t=r),t in nr&&t!==Cr&&(e._gsap.x||Hr(e,"x"))?n&&Zn===n?"scale"===t?br:yr:(Zn=n||{})&&("scale"===t?_r:wr):e.style&&!te(e.style[t])?gr:~t.indexOf("-")?vr:xn(e,t)},core:{_removeProperty:Br,_getMatrix:Kr}};Wn.utils.checkPrefix=zr,Wn.core.getStyleSaver=Er,fi=De("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(di="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){nr[e]=1})),De(di,(function(e){H.units[e]="deg",Yr[e]=1})),ur[fi[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+di,De("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");ur[t[1]]=fi[t[0]]})),De("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){H.units[e]="px"})),Wn.registerPlugin(pi);var hi=Wn.registerPlugin(pi)||Wn,mi=(hi.core.Tween,n(626)),gi={};gi.styleTagTransform=m(),gi.setAttributes=d(),gi.insert=u().bind(null,"head"),gi.domAPI=o(),gi.insertStyleElement=p(),a()(mi.A,gi);const vi=mi.A&&mi.A.locals?mi.A.locals:void 0,yi=[{id:1,title:"Технологии",yearFrom:1983,yearTo:1986},{id:2,title:"Кино",yearFrom:1987,yearTo:1991},{id:3,title:"Литература",yearFrom:1992,yearTo:1997},{id:4,title:"Исскуство",yearFrom:1999,yearTo:2004},{id:5,title:"Спорт",yearFrom:2006,yearTo:2013},{id:6,title:"Наука",yearFrom:2015,yearTo:2022}],bi=[{id:1,theme:1,year:1983,content:"Первый мобильный телефон Motorola DynaTAC 8000X поступил в продажу"},{id:2,theme:1,year:1984,content:"Apple представляет Macintosh — первый массовый компьютер с графическим интерфейсом"},{id:3,theme:1,year:1985,content:"Microsoft выпускает Windows 1.0 — первую версию своей операционной системы"},{id:4,theme:1,year:1986,content:'Катастрофа космического шаттла "Челленджер"'},{id:6,theme:2,year:1987,content:"«Хищник»/Predator, США (реж. Джон Мактирнан)"},{id:7,theme:2,year:1988,content:"«Кто подставил кролика Роджера»/Who Framed Roger Rabbit, США (реж. Роберт Земекис)"},{id:8,theme:2,year:1989,content:"«Назад в будущее 2»/Back to the Future Part II, США (реж. Роберт Земекис)"},{id:9,theme:2,year:1990,content:"«Крепкий орешек 2»/Die Hard 2, США (реж. Ренни Харлин)"},{id:10,theme:2,year:1991,content:"«Терминатор 2: Судный день»/Terminator 2: Judgment Day, США (реж. Джеймс Кэмерон)"},{id:10,theme:3,year:1992,content:"Нобелевская премия по литературе — Дерек Уолкотт"},{id:11,theme:3,year:1993,content:"Тони Моррисон получает Нобелевскую премию по литературе"},{id:12,theme:3,year:1994,content:"Выход романа Стивена Кинга «Бессонница»"},{id:13,theme:3,year:1995,content:"Нобелевская премия по литературе — Шеймас Хини"},{id:14,theme:3,year:1996,content:"Публикация романа «Случайная вакансия» Дж. К. Роулинг"},{id:15,theme:3,year:1997,content:"«Гарри Поттер и философский камень» — первая книга Дж. К. Роулинг"},{id:16,theme:4,year:1999,content:"Премьера балета «Золушка» в постановке Жан-Кристофа Майо"},{id:17,theme:4,year:2e3,content:"Возобновление издания журнала «Театр»"},{id:18,theme:4,year:2001,content:"Открытие музея Гуггенхайма в Бильбао"},{id:19,theme:4,year:2002,content:"Премьера трилогии Тома Стоппарда «Берег Утопии»"},{id:20,theme:4,year:2003,content:"Пожар в театре «Ла Фениче» (Венеция)"},{id:21,theme:4,year:2004,content:"Открытие Оперного театра в Копенгагене"},{id:22,theme:5,year:2006,content:"Италия выигрывает Чемпионат мира по футболу"},{id:23,theme:5,year:2007,content:"Роджер Федерер выигрывает Уимблдон в пятый раз подряд"},{id:24,theme:5,year:2008,content:"Пекин принимает Летние Олимпийские игры"},{id:25,theme:5,year:2009,content:"Усэйн Болт устанавливает мировой рекорд в беге на 100 м (9.58 сек)"},{id:26,theme:5,year:2010,content:"Испания побеждает на Чемпионате мира по футболу"},{id:27,theme:5,year:2011,content:"Япония выигрывает женский Чемпионат мира по футболу"},{id:28,theme:5,year:2012,content:"Лондон принимает Летние Олимпийские игры"},{id:29,theme:5,year:2013,content:"Бавария выигрывает Лигу чемпионов УЕФА"},{id:30,theme:6,year:2015,content:"Частное солнечное затмение, видимое в Южной Африке"},{id:31,theme:6,year:2016,content:"Телескоп «Хаббл» обнаружил галактику GN-z11"},{id:32,theme:6,year:2017,content:"Tesla представляет первый электрический грузовик"},{id:33,theme:6,year:2018,content:"Запуск космического телескопа TESS"},{id:34,theme:6,year:2019,content:"Первое изображение чёрной дыры"},{id:35,theme:6,year:2020,content:"Разработка вакцин против COVID-19"},{id:36,theme:6,year:2021,content:"Первый полёт вертолёта Ingenuity на Марсе"},{id:37,theme:6,year:2022,content:"Запуск космического телескопа Джеймса Уэбба"}],_i=function({activePoint:t,setActivePoint:n}){const i=yi,a=(0,r.useRef)(null),[l,o]=(0,r.useState)(!1),s=(0,r.useCallback)((e=>{const t=((e,t)=>{const n=(360/e*t-60)*(Math.PI/180);return{x:265+265*Math.cos(n),y:265+265*Math.sin(n)}})(i.length,e);return{top:t.y,left:t.x}}),[i,t]);return(0,r.useEffect)((()=>{o(!1);const e=-360/i.length*t;hi.to(a.current,{rotation:e,duration:1,ease:"back.out(1.2)",onComplete:()=>{o(!0)}}),hi.to(".point",{rotation:-e,duration:.3})}),[t]),(0,e.jsx)("div",{className:vi.circleLayout,children:(0,e.jsx)("div",{ref:a,className:vi.circle,children:i.map((r=>(0,e.jsxs)("div",{style:s(r.id),onClick:()=>{n(r.id)},className:`point ${vi.circlePoint} ${r.id===t&&vi["circle-point--active"]}`,children:[r.id,(0,e.jsx)("span",{className:`\n                ${vi.circleTitle} \n                ${l&&r.id===t?vi["circle-title--active"]:""}\n                `,children:r.title})]},r.id)))})})};var wi=n(745),Ai={};Ai.styleTagTransform=m(),Ai.setAttributes=d(),Ai.insert=u().bind(null,"head"),Ai.domAPI=o(),Ai.insertStyleElement=p(),a()(wi.A,Ai);const Ci=wi.A&&wi.A.locals?wi.A.locals:void 0;function Si(e){return e>0&&e<10?`0${e}`:e}var xi=n(732),ki={};ki.styleTagTransform=m(),ki.setAttributes=d(),ki.insert=u().bind(null,"head"),ki.domAPI=o(),ki.insertStyleElement=p(),a()(xi.A,ki);const Ei=xi.A&&xi.A.locals?xi.A.locals:void 0,Ti=function({onClick:t,endPoint:r,type:i}){return(0,e.jsx)("div",{onClick:()=>{!r&&t()},className:`${Ei.navigation__button} ${r&&Ei["navigation__button--desabled"]}`,children:(0,e.jsx)("img",{src:n(875)(`./arrow_${i}.svg`),alt:""})})},Pi=function({activePoint:t,setActivePoint:n}){const[i,a]=(0,r.useState)(yi.map((e=>({id:e.id,isActive:!1}))));return(0,r.useEffect)((()=>{a((e=>e.map((e=>e.id===t?{id:e.id,isActive:!0}:{id:e.id,isActive:!1}))))}),[t]),(0,e.jsx)("div",{className:Ei.paginations,children:i.map((t=>(0,e.jsx)("div",{onClick:()=>n(t.id),className:`\n            ${Ei.paginations__item}\n            ${t.isActive?Ei["paginations__item--active"]:""}\n        `},t.id)))})},Mi=function({handlePointClick:t,activePoint:n,setActivePoint:r,allPoints:i}){return(0,e.jsxs)("div",{className:Ei.navigation,children:[(0,e.jsx)("div",{className:Ei.navigation__pages,children:(0,e.jsx)("p",{children:`${Si(n)}/${Si(i)}`})}),(0,e.jsxs)("div",{className:Ei.navigation__buttons,children:[(0,e.jsx)(Ti,{type:"left",onClick:()=>t("prev"),endPoint:1===n}),(0,e.jsx)(Ti,{type:"right",onClick:()=>t("next"),endPoint:n===i}),(0,e.jsx)(Pi,{activePoint:n,setActivePoint:r})]})]})};function zi({activePoint:t,setActivePoint:n}){const i=yi.length,a=(0,r.useRef)(null),l=(0,r.useRef)(null),o=(0,r.useMemo)((()=>yi.find((e=>e.id===t))),[t]),s=(0,r.useRef)((null==o?void 0:o.yearFrom)||1970),u=(0,r.useRef)((null==o?void 0:o.yearTo)||2022);return(0,r.useEffect)((()=>{a.current&&l.current&&(hi.fromTo(a.current,{textContent:s.current},{textContent:null==o?void 0:o.yearFrom,duration:.4,snap:{textContent:1},ease:"power1.out",onUpdate:()=>{s.current=o.yearFrom}}),hi.fromTo(l.current,{textContent:u.current},{textContent:null==o?void 0:o.yearTo,duration:.4,snap:{textContent:1},ease:"power1.out",onUpdate:()=>{u.current=o.yearTo}}))}),[o]),(0,e.jsxs)("div",{className:Ci.sliderContainer,children:[(0,e.jsxs)("div",{className:Ci.sliderWrapper,children:[(0,e.jsxs)("div",{className:Ci.dates,children:[(0,e.jsx)("div",{ref:a,className:Ci.datesItem,children:null==o?void 0:o.yearFrom}),(0,e.jsx)("div",{ref:l,className:Ci.datesItem,children:null==o?void 0:o.yearTo})]}),(0,e.jsx)(_i,{activePoint:t,setActivePoint:n})]}),(0,e.jsx)(Mi,{activePoint:t,setActivePoint:n,allPoints:i,handlePointClick:e=>{n("prev"===e?1===t?i:e=>e-1:t===i?1:e=>e+1)}})]})}var Oi=n(57),Li={};Li.styleTagTransform=m(),Li.setAttributes=d(),Li.insert=u().bind(null,"head"),Li.domAPI=o(),Li.insertStyleElement=p(),a()(Oi.A,Li);const Ni=Oi.A&&Oi.A.locals?Oi.A.locals:void 0;function Ii(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function Di(e,t){void 0===e&&(e={}),void 0===t&&(t={});const n=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>n.indexOf(e)<0)).forEach((n=>{void 0===e[n]?e[n]=t[n]:Ii(t[n])&&Ii(e[n])&&Object.keys(t[n]).length>0&&Di(e[n],t[n])}))}const Bi={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function Fi(){const e="undefined"!=typeof document?document:{};return Di(e,Bi),e}const Ri={document:Bi,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function $i(){const e="undefined"!=typeof window?window:{};return Di(e,Ri),e}function ji(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function Hi(){return Date.now()}function Vi(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function Ui(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let r=1;r<arguments.length;r+=1){const i=r<0||arguments.length<=r?void 0:arguments[r];if(null!=i&&(n=i,!("undefined"!=typeof window&&void 0!==window.HTMLElement?n instanceof HTMLElement:n&&(1===n.nodeType||11===n.nodeType)))){const n=Object.keys(Object(i)).filter((e=>t.indexOf(e)<0));for(let t=0,r=n.length;t<r;t+=1){const r=n[t],a=Object.getOwnPropertyDescriptor(i,r);void 0!==a&&a.enumerable&&(Vi(e[r])&&Vi(i[r])?i[r].__swiper__?e[r]=i[r]:Ui(e[r],i[r]):!Vi(e[r])&&Vi(i[r])?(e[r]={},i[r].__swiper__?e[r]=i[r]:Ui(e[r],i[r])):e[r]=i[r])}}}var n;return e}function Gi(e,t,n){e.style.setProperty(t,n)}function qi(e){let{swiper:t,targetPosition:n,side:r}=e;const i=$i(),a=-t.translate;let l,o=null;const s=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const u=n>a?"next":"prev",c=(e,t)=>"next"===u&&e>=t||"prev"===u&&e<=t,d=()=>{l=(new Date).getTime(),null===o&&(o=l);const e=Math.max(Math.min((l-o)/s,1),0),u=.5-Math.cos(e*Math.PI)/2;let f=a+u*(n-a);if(c(f,n)&&(f=n),t.wrapperEl.scrollTo({[r]:f}),c(f,n))return t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout((()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:f})})),void i.cancelAnimationFrame(t.cssModeFrameID);t.cssModeFrameID=i.requestAnimationFrame(d)};d()}function Wi(e,t){void 0===t&&(t="");const n=$i(),r=[...e.children];return n.HTMLSlotElement&&e instanceof HTMLSlotElement&&r.push(...e.assignedElements()),t?r.filter((e=>e.matches(t))):r}function Yi(e){try{return void console.warn(e)}catch(e){}}function Qi(e,t){void 0===t&&(t=[]);const n=document.createElement(e);return n.classList.add(...Array.isArray(t)?t:function(e){return void 0===e&&(e=""),e.trim().split(" ").filter((e=>!!e.trim()))}(t)),n}function Xi(e,t){return $i().getComputedStyle(e,null).getPropertyValue(t)}function Ki(e){let t,n=e;if(n){for(t=0;null!==(n=n.previousSibling);)1===n.nodeType&&(t+=1);return t}}function Ji(e,t){const n=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&n.push(r):n.push(r),r=r.parentElement;return n}function Zi(e,t,n){const r=$i();return n?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}function ea(e){return(Array.isArray(e)?e:[e]).filter((e=>!!e))}let ta,na,ra;function ia(){return ta||(ta=function(){const e=$i(),t=Fi();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),ta}function aa(e){return void 0===e&&(e={}),na||(na=function(e){let{userAgent:t}=void 0===e?{}:e;const n=ia(),r=$i(),i=r.navigator.platform,a=t||r.navigator.userAgent,l={ios:!1,android:!1},o=r.screen.width,s=r.screen.height,u=a.match(/(Android);?[\s\/]+([\d.]+)?/);let c=a.match(/(iPad).*OS\s([\d_]+)/);const d=a.match(/(iPod)(.*OS\s([\d_]+))?/),f=!c&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),p="Win32"===i;let h="MacIntel"===i;return!c&&h&&n.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${o}x${s}`)>=0&&(c=a.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),u&&!p&&(l.os="android",l.android=!0),(c||f||d)&&(l.os="ios",l.ios=!0),l}(e)),na}function la(){return ra||(ra=function(){const e=$i(),t=aa();let n=!1;function r(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(r()){const t=String(e.navigator.userAgent);if(t.includes("Version/")){const[e,r]=t.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));n=e<16||16===e&&r<2}}const i=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent),a=r();return{isSafari:n||a,needPerspectiveFix:n,need3dFix:a||i&&t.ios,isWebView:i}}()),ra}var oa={on(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;const i=n?"unshift":"push";return e.split(" ").forEach((e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)})),r},once(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed)return r;if("function"!=typeof t)return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var n=arguments.length,a=new Array(n),l=0;l<n;l++)a[l]=arguments[l];t.apply(r,a)}return i.__emitterProxy=t,r.on(e,i,n)},onAny(e,t){const n=this;if(!n.eventsListeners||n.destroyed)return n;if("function"!=typeof e)return n;const r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off(e,t){const n=this;return!n.eventsListeners||n.destroyed?n:n.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach(((r,i)=>{(r===t||r.__emitterProxy&&r.__emitterProxy===t)&&n.eventsListeners[e].splice(i,1)}))})),n):n},emit(){const e=this;if(!e.eventsListeners||e.destroyed)return e;if(!e.eventsListeners)return e;let t,n,r;for(var i=arguments.length,a=new Array(i),l=0;l<i;l++)a[l]=arguments[l];return"string"==typeof a[0]||Array.isArray(a[0])?(t=a[0],n=a.slice(1,a.length),r=e):(t=a[0].events,n=a[0].data,r=a[0].context||e),n.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach((t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach((e=>{e.apply(r,[t,...n])})),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach((e=>{e.apply(r,n)}))})),e}};const sa=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},ua=(e,t,n)=>{t&&!e.classList.contains(n)?e.classList.add(n):!t&&e.classList.contains(n)&&e.classList.remove(n)},ca=(e,t)=>{if(!e||e.destroyed||!e.params)return;const n=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(n){let t=n.querySelector(`.${e.params.lazyPreloaderClass}`);!t&&e.isElement&&(n.shadowRoot?t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame((()=>{n.shadowRoot&&(t=n.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),t&&t.remove())}))),t&&t.remove()}},da=(e,t)=>{if(!e.slides[t])return;const n=e.slides[t].querySelector('[loading="lazy"]');n&&n.removeAttribute("loading")},fa=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const n=e.slides.length;if(!n||!t||t<0)return;t=Math.min(t,n);const r="auto"===e.params.slidesPerView?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const n=i,a=[n-t];return a.push(...Array.from({length:t}).map(((e,t)=>n+r+t))),void e.slides.forEach(((t,n)=>{a.includes(t.column)&&da(e,n)}))}const a=i+r-1;if(e.params.rewind||e.params.loop)for(let r=i-t;r<=a+t;r+=1){const t=(r%n+n)%n;(t<i||t>a)&&da(e,t)}else for(let r=Math.max(i-t,0);r<=Math.min(a+t,n-1);r+=1)r!==i&&(r>a||r<i)&&da(e,r)};var pa={updateSize:function(){const e=this;let t,n;const r=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:r.clientWidth,n=void 0!==e.params.height&&null!==e.params.height?e.params.height:r.clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(Xi(r,"padding-left")||0,10)-parseInt(Xi(r,"padding-right")||0,10),n=n-parseInt(Xi(r,"padding-top")||0,10)-parseInt(Xi(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(n)&&(n=0),Object.assign(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this;function t(t,n){return parseFloat(t.getPropertyValue(e.getDirectionLabel(n))||0)}const n=e.params,{wrapperEl:r,slidesEl:i,size:a,rtlTranslate:l,wrongRTL:o}=e,s=e.virtual&&n.virtual.enabled,u=s?e.virtual.slides.length:e.slides.length,c=Wi(i,`.${e.params.slideClass}, swiper-slide`),d=s?e.virtual.slides.length:c.length;let f=[];const p=[],h=[];let m=n.slidesOffsetBefore;"function"==typeof m&&(m=n.slidesOffsetBefore.call(e));let g=n.slidesOffsetAfter;"function"==typeof g&&(g=n.slidesOffsetAfter.call(e));const v=e.snapGrid.length,y=e.slidesGrid.length;let b=n.spaceBetween,_=-m,w=0,A=0;if(void 0===a)return;"string"==typeof b&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*a:"string"==typeof b&&(b=parseFloat(b)),e.virtualSize=-b,c.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),n.centeredSlides&&n.cssMode&&(Gi(r,"--swiper-centered-offset-before",""),Gi(r,"--swiper-centered-offset-after",""));const C=n.grid&&n.grid.rows>1&&e.grid;let S;C?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();const x="auto"===n.slidesPerView&&n.breakpoints&&Object.keys(n.breakpoints).filter((e=>void 0!==n.breakpoints[e].slidesPerView)).length>0;for(let r=0;r<d;r+=1){let i;if(S=0,c[r]&&(i=c[r]),C&&e.grid.updateSlide(r,i,c),!c[r]||"none"!==Xi(i,"display")){if("auto"===n.slidesPerView){x&&(c[r].style[e.getDirectionLabel("width")]="");const a=getComputedStyle(i),l=i.style.transform,o=i.style.webkitTransform;if(l&&(i.style.transform="none"),o&&(i.style.webkitTransform="none"),n.roundLengths)S=e.isHorizontal()?Zi(i,"width",!0):Zi(i,"height",!0);else{const e=t(a,"width"),n=t(a,"padding-left"),r=t(a,"padding-right"),l=t(a,"margin-left"),o=t(a,"margin-right"),s=a.getPropertyValue("box-sizing");if(s&&"border-box"===s)S=e+l+o;else{const{clientWidth:t,offsetWidth:a}=i;S=e+n+r+l+o+(a-t)}}l&&(i.style.transform=l),o&&(i.style.webkitTransform=o),n.roundLengths&&(S=Math.floor(S))}else S=(a-(n.slidesPerView-1)*b)/n.slidesPerView,n.roundLengths&&(S=Math.floor(S)),c[r]&&(c[r].style[e.getDirectionLabel("width")]=`${S}px`);c[r]&&(c[r].swiperSlideSize=S),h.push(S),n.centeredSlides?(_=_+S/2+w/2+b,0===w&&0!==r&&(_=_-a/2-b),0===r&&(_=_-a/2-b),Math.abs(_)<.001&&(_=0),n.roundLengths&&(_=Math.floor(_)),A%n.slidesPerGroup==0&&f.push(_),p.push(_)):(n.roundLengths&&(_=Math.floor(_)),(A-Math.min(e.params.slidesPerGroupSkip,A))%e.params.slidesPerGroup==0&&f.push(_),p.push(_),_=_+S+b),e.virtualSize+=S+b,w=S,A+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+g,l&&o&&("slide"===n.effect||"coverflow"===n.effect)&&(r.style.width=`${e.virtualSize+b}px`),n.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+b}px`),C&&e.grid.updateWrapperSize(S,f),!n.centeredSlides){const t=[];for(let r=0;r<f.length;r+=1){let i=f[r];n.roundLengths&&(i=Math.floor(i)),f[r]<=e.virtualSize-a&&t.push(i)}f=t,Math.floor(e.virtualSize-a)-Math.floor(f[f.length-1])>1&&f.push(e.virtualSize-a)}if(s&&n.loop){const t=h[0]+b;if(n.slidesPerGroup>1){const r=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/n.slidesPerGroup),i=t*n.slidesPerGroup;for(let e=0;e<r;e+=1)f.push(f[f.length-1]+i)}for(let r=0;r<e.virtual.slidesBefore+e.virtual.slidesAfter;r+=1)1===n.slidesPerGroup&&f.push(f[f.length-1]+t),p.push(p[p.length-1]+t),e.virtualSize+=t}if(0===f.length&&(f=[0]),0!==b){const t=e.isHorizontal()&&l?"marginLeft":e.getDirectionLabel("marginRight");c.filter(((e,t)=>!(n.cssMode&&!n.loop)||t!==c.length-1)).forEach((e=>{e.style[t]=`${b}px`}))}if(n.centeredSlides&&n.centeredSlidesBounds){let e=0;h.forEach((t=>{e+=t+(b||0)})),e-=b;const t=e>a?e-a:0;f=f.map((e=>e<=0?-m:e>t?t+g:e))}if(n.centerInsufficientSlides){let e=0;h.forEach((t=>{e+=t+(b||0)})),e-=b;const t=(n.slidesOffsetBefore||0)+(n.slidesOffsetAfter||0);if(e+t<a){const n=(a-e-t)/2;f.forEach(((e,t)=>{f[t]=e-n})),p.forEach(((e,t)=>{p[t]=e+n}))}}if(Object.assign(e,{slides:c,snapGrid:f,slidesGrid:p,slidesSizesGrid:h}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){Gi(r,"--swiper-centered-offset-before",-f[0]+"px"),Gi(r,"--swiper-centered-offset-after",e.size/2-h[h.length-1]/2+"px");const t=-e.snapGrid[0],n=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+n))}if(d!==u&&e.emit("slidesLengthChange"),f.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==y&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!(s||n.cssMode||"slide"!==n.effect&&"fade"!==n.effect)){const t=`${n.containerModifierClass}backface-hidden`,r=e.el.classList.contains(t);d<=n.maxBackfaceHiddenSlides?r||e.el.classList.add(t):r&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,n=[],r=t.virtual&&t.params.virtual.enabled;let i,a=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const l=e=>r?t.slides[t.getSlideIndexByData(e)]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{n.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!r)break;n.push(l(e))}else n.push(l(t.activeIndex));for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;a=e>a?e:a}(a||0===a)&&(t.wrapperEl.style.height=`${a}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,n=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-n-e.cssOverflowAdjustment()},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);const t=this,n=t.params,{slides:r,rtlTranslate:i,snapGrid:a}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let l=-e;i&&(l=e),t.visibleSlidesIndexes=[],t.visibleSlides=[];let o=n.spaceBetween;"string"==typeof o&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*t.size:"string"==typeof o&&(o=parseFloat(o));for(let e=0;e<r.length;e+=1){const s=r[e];let u=s.swiperSlideOffset;n.cssMode&&n.centeredSlides&&(u-=r[0].swiperSlideOffset);const c=(l+(n.centeredSlides?t.minTranslate():0)-u)/(s.swiperSlideSize+o),d=(l-a[0]+(n.centeredSlides?t.minTranslate():0)-u)/(s.swiperSlideSize+o),f=-(l-u),p=f+t.slidesSizesGrid[e],h=f>=0&&f<=t.size-t.slidesSizesGrid[e],m=f>=0&&f<t.size-1||p>1&&p<=t.size||f<=0&&p>=t.size;m&&(t.visibleSlides.push(s),t.visibleSlidesIndexes.push(e)),sa(s,m,n.slideVisibleClass),sa(s,h,n.slideFullyVisibleClass),s.progress=i?-c:c,s.originalProgress=i?-d:d}},updateProgress:function(e){const t=this;if(void 0===e){const n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}const n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:a,isEnd:l,progressLoop:o}=t;const s=a,u=l;if(0===r)i=0,a=!0,l=!0;else{i=(e-t.minTranslate())/r;const n=Math.abs(e-t.minTranslate())<1,o=Math.abs(e-t.maxTranslate())<1;a=n||i<=0,l=o||i>=1,n&&(i=0),o&&(i=1)}if(n.loop){const n=t.getSlideIndexByData(0),r=t.getSlideIndexByData(t.slides.length-1),i=t.slidesGrid[n],a=t.slidesGrid[r],l=t.slidesGrid[t.slidesGrid.length-1],s=Math.abs(e);o=s>=i?(s-i)/l:(s+l-a)/l,o>1&&(o-=1)}Object.assign(t,{progress:i,progressLoop:o,isBeginning:a,isEnd:l}),(n.watchSlidesProgress||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),a&&!s&&t.emit("reachBeginning toEdge"),l&&!u&&t.emit("reachEnd toEdge"),(s&&!a||u&&!l)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,slidesEl:r,activeIndex:i}=e,a=e.virtual&&n.virtual.enabled,l=e.grid&&n.grid&&n.grid.rows>1,o=e=>Wi(r,`.${n.slideClass}${e}, swiper-slide${e}`)[0];let s,u,c;if(a)if(n.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),s=o(`[data-swiper-slide-index="${t}"]`)}else s=o(`[data-swiper-slide-index="${i}"]`);else l?(s=t.find((e=>e.column===i)),c=t.find((e=>e.column===i+1)),u=t.find((e=>e.column===i-1))):s=t[i];s&&(l||(c=function(e,t){const n=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(s,`.${n.slideClass}, swiper-slide`)[0],n.loop&&!c&&(c=t[0]),u=function(e,t){const n=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}(s,`.${n.slideClass}, swiper-slide`)[0],n.loop&&0===!u&&(u=t[t.length-1]))),t.forEach((e=>{ua(e,e===s,n.slideActiveClass),ua(e,e===c,n.slideNextClass),ua(e,e===u,n.slidePrevClass)})),e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:i,activeIndex:a,realIndex:l,snapIndex:o}=t;let s,u=e;const c=e=>{let n=e-t.virtual.slidesBefore;return n<0&&(n=t.virtual.slides.length+n),n>=t.virtual.slides.length&&(n-=t.virtual.slides.length),n};if(void 0===u&&(u=function(e){const{slidesGrid:t,params:n}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?r>=t[e]&&r<t[e+1]-(t[e+1]-t[e])/2?i=e:r>=t[e]&&r<t[e+1]&&(i=e+1):r>=t[e]&&(i=e);return n.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),r.indexOf(n)>=0)s=r.indexOf(n);else{const e=Math.min(i.slidesPerGroupSkip,u);s=e+Math.floor((u-e)/i.slidesPerGroup)}if(s>=r.length&&(s=r.length-1),u===a&&!t.params.loop)return void(s!==o&&(t.snapIndex=s,t.emit("snapIndexChange")));if(u===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled)return void(t.realIndex=c(u));const d=t.grid&&i.grid&&i.grid.rows>1;let f;if(t.virtual&&i.virtual.enabled&&i.loop)f=c(u);else if(d){const e=t.slides.find((e=>e.column===u));let n=parseInt(e.getAttribute("data-swiper-slide-index"),10);Number.isNaN(n)&&(n=Math.max(t.slides.indexOf(e),0)),f=Math.floor(n/i.grid.rows)}else if(t.slides[u]){const e=t.slides[u].getAttribute("data-swiper-slide-index");f=e?parseInt(e,10):u}else f=u;Object.assign(t,{previousSnapIndex:o,snapIndex:s,previousRealIndex:l,realIndex:f,previousIndex:a,activeIndex:u}),t.initialized&&fa(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(l!==f&&t.emit("realIndexChange"),t.emit("slideChange"))},updateClickedSlide:function(e,t){const n=this,r=n.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&n.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach((e=>{!i&&e.matches&&e.matches(`.${r.slideClass}, swiper-slide`)&&(i=e)}));let a,l=!1;if(i)for(let e=0;e<n.slides.length;e+=1)if(n.slides[e]===i){l=!0,a=e;break}if(!i||!l)return n.clickedSlide=void 0,void(n.clickedIndex=void 0);n.clickedSlide=i,n.virtual&&n.params.virtual.enabled?n.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):n.clickedIndex=a,r.slideToClickedSlide&&void 0!==n.clickedIndex&&n.clickedIndex!==n.activeIndex&&n.slideToClickedSlide()}};function ha(e){let{swiper:t,runCallbacks:n,direction:r,step:i}=e;const{activeIndex:a,previousIndex:l}=t;let o=r;if(o||(o=a>l?"next":a<l?"prev":"reset"),t.emit(`transition${i}`),n&&a!==l){if("reset"===o)return void t.emit(`slideResetTransition${i}`);t.emit(`slideChangeTransition${i}`),"next"===o?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}var ma={slideTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const a=this;let l=e;l<0&&(l=0);const{params:o,snapGrid:s,slidesGrid:u,previousIndex:c,activeIndex:d,rtlTranslate:f,wrapperEl:p,enabled:h}=a;if(!h&&!r&&!i||a.destroyed||a.animating&&o.preventInteractionOnTransition)return!1;void 0===t&&(t=a.params.speed);const m=Math.min(a.params.slidesPerGroupSkip,l);let g=m+Math.floor((l-m)/a.params.slidesPerGroup);g>=s.length&&(g=s.length-1);const v=-s[g];if(o.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){const t=-Math.floor(100*v),n=Math.floor(100*u[e]),r=Math.floor(100*u[e+1]);void 0!==u[e+1]?t>=n&&t<r-(r-n)/2?l=e:t>=n&&t<r&&(l=e+1):t>=n&&(l=e)}if(a.initialized&&l!==d){if(!a.allowSlideNext&&(f?v>a.translate&&v>a.minTranslate():v<a.translate&&v<a.minTranslate()))return!1;if(!a.allowSlidePrev&&v>a.translate&&v>a.maxTranslate()&&(d||0)!==l)return!1}let y;l!==(c||0)&&n&&a.emit("beforeSlideChangeStart"),a.updateProgress(v),y=l>d?"next":l<d?"prev":"reset";const b=a.virtual&&a.params.virtual.enabled;if((!b||!i)&&(f&&-v===a.translate||!f&&v===a.translate))return a.updateActiveIndex(l),o.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==o.effect&&a.setTranslate(v),"reset"!==y&&(a.transitionStart(n,y),a.transitionEnd(n,y)),!1;if(o.cssMode){const e=a.isHorizontal(),n=f?v:-v;if(0===t)b&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),b&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{p[e?"scrollLeft":"scrollTop"]=n}))):p[e?"scrollLeft":"scrollTop"]=n,b&&requestAnimationFrame((()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1}));else{if(!a.support.smoothScroll)return qi({swiper:a,targetPosition:n,side:e?"left":"top"}),!0;p.scrollTo({[e?"left":"top"]:n,behavior:"smooth"})}return!0}const _=la().isSafari;return b&&!i&&_&&a.isElement&&a.virtual.update(!1,!1,l),a.setTransition(t),a.setTranslate(v),a.updateActiveIndex(l),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,r),a.transitionStart(n,y),0===t?a.transitionEnd(n,y):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,y))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,n,r){void 0===e&&(e=0),void 0===n&&(n=!0),"string"==typeof e&&(e=parseInt(e,10));const i=this;if(i.destroyed)return;void 0===t&&(t=i.params.speed);const a=i.grid&&i.params.grid&&i.params.grid.rows>1;let l=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)l+=i.virtual.slidesBefore;else{let e;if(a){const t=l*i.params.grid.rows;e=i.slides.find((e=>1*e.getAttribute("data-swiper-slide-index")===t)).column}else e=i.getSlideIndexByData(l);const t=a?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:n}=i.params;let o=i.params.slidesPerView;"auto"===o?o=i.slidesPerViewDynamic():(o=Math.ceil(parseFloat(i.params.slidesPerView,10)),n&&o%2==0&&(o+=1));let s=t-e<o;if(n&&(s=s||e<Math.ceil(o/2)),r&&n&&"auto"!==i.params.slidesPerView&&!a&&(s=!1),s){const r=n?e<i.activeIndex?"prev":"next":e-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:r,slideTo:!0,activeSlideIndex:"next"===r?e+1:e-t+1,slideRealIndex:"next"===r?i.realIndex:void 0})}if(a){const e=l*i.params.grid.rows;l=i.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)).column}else l=i.getSlideIndexByData(l)}return requestAnimationFrame((()=>{i.slideTo(l,t,n,r)})),i},slideNext:function(e,t,n){void 0===t&&(t=!0);const r=this,{enabled:i,params:a,animating:l}=r;if(!i||r.destroyed)return r;void 0===e&&(e=r.params.speed);let o=a.slidesPerGroup;"auto"===a.slidesPerView&&1===a.slidesPerGroup&&a.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const s=r.activeIndex<a.slidesPerGroupSkip?1:o,u=r.virtual&&a.virtual.enabled;if(a.loop){if(l&&!u&&a.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&a.cssMode)return requestAnimationFrame((()=>{r.slideTo(r.activeIndex+s,e,t,n)})),!0}return a.rewind&&r.isEnd?r.slideTo(0,e,t,n):r.slideTo(r.activeIndex+s,e,t,n)},slidePrev:function(e,t,n){void 0===t&&(t=!0);const r=this,{params:i,snapGrid:a,slidesGrid:l,rtlTranslate:o,enabled:s,animating:u}=r;if(!s||r.destroyed)return r;void 0===e&&(e=r.params.speed);const c=r.virtual&&i.virtual.enabled;if(i.loop){if(u&&!c&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const f=d(o?r.translate:-r.translate),p=a.map((e=>d(e))),h=i.freeMode&&i.freeMode.enabled;let m=a[p.indexOf(f)-1];if(void 0===m&&(i.cssMode||h)){let e;a.forEach(((t,n)=>{f>=t&&(e=n)})),void 0!==e&&(m=h?a[e]:a[e>0?e-1:e])}let g=0;if(void 0!==m&&(g=l.indexOf(m),g<0&&(g=r.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(g=g-r.slidesPerViewDynamic("previous",!0)+1,g=Math.max(g,0))),i.rewind&&r.isBeginning){const i=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(i,e,t,n)}return i.loop&&0===r.activeIndex&&i.cssMode?(requestAnimationFrame((()=>{r.slideTo(g,e,t,n)})),!0):r.slideTo(g,e,t,n)},slideReset:function(e,t,n){void 0===t&&(t=!0);const r=this;if(!r.destroyed)return void 0===e&&(e=r.params.speed),r.slideTo(r.activeIndex,e,t,n)},slideToClosest:function(e,t,n,r){void 0===t&&(t=!0),void 0===r&&(r=.5);const i=this;if(i.destroyed)return;void 0===e&&(e=i.params.speed);let a=i.activeIndex;const l=Math.min(i.params.slidesPerGroupSkip,a),o=l+Math.floor((a-l)/i.params.slidesPerGroup),s=i.rtlTranslate?i.translate:-i.translate;if(s>=i.snapGrid[o]){const e=i.snapGrid[o];s-e>(i.snapGrid[o+1]-e)*r&&(a+=i.params.slidesPerGroup)}else{const e=i.snapGrid[o-1];s-e<=(i.snapGrid[o]-e)*r&&(a-=i.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,i.slidesGrid.length-1),i.slideTo(a,e,t,n)},slideToClickedSlide:function(){const e=this;if(e.destroyed)return;const{params:t,slidesEl:n}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,a=e.clickedIndex;const l=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?a<e.loopedSlides-r/2||a>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),a=e.getSlideIndex(Wi(n,`${l}[data-swiper-slide-index="${i}"]`)[0]),ji((()=>{e.slideTo(a)}))):e.slideTo(a):a>e.slides.length-r?(e.loopFix(),a=e.getSlideIndex(Wi(n,`${l}[data-swiper-slide-index="${i}"]`)[0]),ji((()=>{e.slideTo(a)}))):e.slideTo(a)}else e.slideTo(a)}},ga={loopCreate:function(e,t){const n=this,{params:r,slidesEl:i}=n;if(!r.loop||n.virtual&&n.params.virtual.enabled)return;const a=()=>{Wi(i,`.${r.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)}))},l=n.grid&&r.grid&&r.grid.rows>1,o=r.slidesPerGroup*(l?r.grid.rows:1),s=n.slides.length%o!=0,u=l&&n.slides.length%r.grid.rows!=0,c=e=>{for(let t=0;t<e;t+=1){const e=n.isElement?Qi("swiper-slide",[r.slideBlankClass]):Qi("div",[r.slideClass,r.slideBlankClass]);n.slidesEl.append(e)}};s?(r.loopAddBlankSlides?(c(o-n.slides.length%o),n.recalcSlides(),n.updateSlides()):Yi("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):u?(r.loopAddBlankSlides?(c(r.grid.rows-n.slides.length%r.grid.rows),n.recalcSlides(),n.updateSlides()):Yi("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)"),a()):a(),n.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next",initial:t})},loopFix:function(e){let{slideRealIndex:t,slideTo:n=!0,direction:r,setTranslate:i,activeSlideIndex:a,initial:l,byController:o,byMousewheel:s}=void 0===e?{}:e;const u=this;if(!u.params.loop)return;u.emit("beforeLoopFix");const{slides:c,allowSlidePrev:d,allowSlideNext:f,slidesEl:p,params:h}=u,{centeredSlides:m,initialSlide:g}=h;if(u.allowSlidePrev=!0,u.allowSlideNext=!0,u.virtual&&h.virtual.enabled)return n&&(h.centeredSlides||0!==u.snapIndex?h.centeredSlides&&u.snapIndex<h.slidesPerView?u.slideTo(u.virtual.slides.length+u.snapIndex,0,!1,!0):u.snapIndex===u.snapGrid.length-1&&u.slideTo(u.virtual.slidesBefore,0,!1,!0):u.slideTo(u.virtual.slides.length,0,!1,!0)),u.allowSlidePrev=d,u.allowSlideNext=f,void u.emit("loopFix");let v=h.slidesPerView;"auto"===v?v=u.slidesPerViewDynamic():(v=Math.ceil(parseFloat(h.slidesPerView,10)),m&&v%2==0&&(v+=1));const y=h.slidesPerGroupAuto?v:h.slidesPerGroup;let b=y;b%y!=0&&(b+=y-b%y),b+=h.loopAdditionalSlides,u.loopedSlides=b;const _=u.grid&&h.grid&&h.grid.rows>1;c.length<v+b||"cards"===u.params.effect&&c.length<v+2*b?Yi("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled or not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):_&&"row"===h.grid.fill&&Yi("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],A=[],C=_?Math.ceil(c.length/h.grid.rows):c.length,S=l&&C-g<v&&!m;let x=S?g:u.activeIndex;void 0===a?a=u.getSlideIndex(c.find((e=>e.classList.contains(h.slideActiveClass)))):x=a;const k="next"===r||!r,E="prev"===r||!r;let T=0,P=0;const M=(_?c[a].column:a)+(m&&void 0===i?-v/2+.5:0);if(M<b){T=Math.max(b-M,y);for(let e=0;e<b-M;e+=1){const t=e-Math.floor(e/C)*C;if(_){const e=C-t-1;for(let t=c.length-1;t>=0;t-=1)c[t].column===e&&w.push(t)}else w.push(C-t-1)}}else if(M+v>C-b){P=Math.max(M-(C-2*b),y),S&&(P=Math.max(P,v-C+g+1));for(let e=0;e<P;e+=1){const t=e-Math.floor(e/C)*C;_?c.forEach(((e,n)=>{e.column===t&&A.push(n)})):A.push(t)}}if(u.__preventObserver__=!0,requestAnimationFrame((()=>{u.__preventObserver__=!1})),"cards"===u.params.effect&&c.length<v+2*b&&(A.includes(a)&&A.splice(A.indexOf(a),1),w.includes(a)&&w.splice(w.indexOf(a),1)),E&&w.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.prepend(c[e]),c[e].swiperLoopMoveDOM=!1})),k&&A.forEach((e=>{c[e].swiperLoopMoveDOM=!0,p.append(c[e]),c[e].swiperLoopMoveDOM=!1})),u.recalcSlides(),"auto"===h.slidesPerView?u.updateSlides():_&&(w.length>0&&E||A.length>0&&k)&&u.slides.forEach(((e,t)=>{u.grid.updateSlide(t,e,u.slides)})),h.watchSlidesProgress&&u.updateSlidesOffset(),n)if(w.length>0&&E){if(void 0===t){const e=u.slidesGrid[x],t=u.slidesGrid[x+T]-e;s?u.setTranslate(u.translate-t):(u.slideTo(x+Math.ceil(T),0,!1,!0),i&&(u.touchEventsData.startTranslate=u.touchEventsData.startTranslate-t,u.touchEventsData.currentTranslate=u.touchEventsData.currentTranslate-t))}else if(i){const e=_?w.length/h.grid.rows:w.length;u.slideTo(u.activeIndex+e,0,!1,!0),u.touchEventsData.currentTranslate=u.translate}}else if(A.length>0&&k)if(void 0===t){const e=u.slidesGrid[x],t=u.slidesGrid[x-P]-e;s?u.setTranslate(u.translate-t):(u.slideTo(x-P,0,!1,!0),i&&(u.touchEventsData.startTranslate=u.touchEventsData.startTranslate-t,u.touchEventsData.currentTranslate=u.touchEventsData.currentTranslate-t))}else{const e=_?A.length/h.grid.rows:A.length;u.slideTo(u.activeIndex-e,0,!1,!0)}if(u.allowSlidePrev=d,u.allowSlideNext=f,u.controller&&u.controller.control&&!o){const e={slideRealIndex:t,direction:r,setTranslate:i,activeSlideIndex:a,byController:!0};Array.isArray(u.controller.control)?u.controller.control.forEach((t=>{!t.destroyed&&t.params.loop&&t.loopFix({...e,slideTo:t.params.slidesPerView===h.slidesPerView&&n})})):u.controller.control instanceof u.constructor&&u.controller.control.params.loop&&u.controller.control.loopFix({...e,slideTo:u.controller.control.params.slidesPerView===h.slidesPerView&&n})}u.emit("loopFix")},loopDestroy:function(){const e=this,{params:t,slidesEl:n}=e;if(!t.loop||!n||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;r[t]=e})),e.slides.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),r.forEach((e=>{n.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}};function va(e,t,n){const r=$i(),{params:i}=e,a=i.edgeSwipeDetection,l=i.edgeSwipeThreshold;return!a||!(n<=l||n>=r.innerWidth-l)||"prevent"===a&&(t.preventDefault(),!0)}function ya(e){const t=this,n=Fi();let r=e;r.originalEvent&&(r=r.originalEvent);const i=t.touchEventsData;if("pointerdown"===r.type){if(null!==i.pointerId&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else"touchstart"===r.type&&1===r.targetTouches.length&&(i.touchId=r.targetTouches[0].identifier);if("touchstart"===r.type)return void va(t,r,r.targetTouches[0].pageX);const{params:a,touches:l,enabled:o}=t;if(!o)return;if(!a.simulateTouch&&"mouse"===r.pointerType)return;if(t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let s=r.target;if("wrapper"===a.touchEventsTarget&&!function(e,t){const n=$i();let r=t.contains(e);return!r&&n.HTMLSlotElement&&t instanceof HTMLSlotElement&&(r=[...t.assignedElements()].includes(e),r||(r=function(e,t){const n=[t];for(;n.length>0;){const t=n.shift();if(e===t)return!0;n.push(...t.children,...t.shadowRoot?t.shadowRoot.children:[],...t.assignedElements?t.assignedElements():[])}}(e,t))),r}(s,t.wrapperEl))return;if("which"in r&&3===r.which)return;if("button"in r&&r.button>0)return;if(i.isTouched&&i.isMoved)return;const u=!!a.noSwipingClass&&""!==a.noSwipingClass,c=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&c&&(s=c[0]);const d=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,f=!(!r.target||!r.target.shadowRoot);if(a.noSwiping&&(f?function(e,t){return void 0===t&&(t=this),function t(n){if(!n||n===Fi()||n===$i())return null;n.assignedSlot&&(n=n.assignedSlot);const r=n.closest(e);return r||n.getRootNode?r||t(n.getRootNode().host):null}(t)}(d,s):s.closest(d)))return void(t.allowClick=!0);if(a.swipeHandler&&!s.closest(a.swipeHandler))return;l.currentX=r.pageX,l.currentY=r.pageY;const p=l.currentX,h=l.currentY;if(!va(t,r,p))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=p,l.startY=h,i.touchStartTime=Hi(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(i.allowThresholdMove=!1);let m=!0;s.matches(i.focusableElements)&&(m=!1,"SELECT"===s.nodeName&&(i.isTouched=!1)),n.activeElement&&n.activeElement.matches(i.focusableElements)&&n.activeElement!==s&&("mouse"===r.pointerType||"mouse"!==r.pointerType&&!s.matches(i.focusableElements))&&n.activeElement.blur();const g=m&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!g||s.isContentEditable||r.preventDefault(),a.freeMode&&a.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function ba(e){const t=Fi(),n=this,r=n.touchEventsData,{params:i,touches:a,rtlTranslate:l,enabled:o}=n;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let s,u=e;if(u.originalEvent&&(u=u.originalEvent),"pointermove"===u.type){if(null!==r.touchId)return;if(u.pointerId!==r.pointerId)return}if("touchmove"===u.type){if(s=[...u.changedTouches].find((e=>e.identifier===r.touchId)),!s||s.identifier!==r.touchId)return}else s=u;if(!r.isTouched)return void(r.startMoving&&r.isScrolling&&n.emit("touchMoveOpposite",u));const c=s.pageX,d=s.pageY;if(u.preventedByNestedSwiper)return a.startX=c,void(a.startY=d);if(!n.allowTouchMove)return u.target.matches(r.focusableElements)||(n.allowClick=!1),void(r.isTouched&&(Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d}),r.touchStartTime=Hi()));if(i.touchReleaseOnEdges&&!i.loop)if(n.isVertical()){if(d<a.startY&&n.translate<=n.maxTranslate()||d>a.startY&&n.translate>=n.minTranslate())return r.isTouched=!1,void(r.isMoved=!1)}else{if(l&&(c>a.startX&&-n.translate<=n.maxTranslate()||c<a.startX&&-n.translate>=n.minTranslate()))return;if(!l&&(c<a.startX&&n.translate<=n.maxTranslate()||c>a.startX&&n.translate>=n.minTranslate()))return}if(t.activeElement&&t.activeElement.matches(r.focusableElements)&&t.activeElement!==u.target&&"mouse"!==u.pointerType&&t.activeElement.blur(),t.activeElement&&u.target===t.activeElement&&u.target.matches(r.focusableElements))return r.isMoved=!0,void(n.allowClick=!1);r.allowTouchCallbacks&&n.emit("touchMove",u),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=c,a.currentY=d;const f=a.currentX-a.startX,p=a.currentY-a.startY;if(n.params.threshold&&Math.sqrt(f**2+p**2)<n.params.threshold)return;if(void 0===r.isScrolling){let e;n.isHorizontal()&&a.currentY===a.startY||n.isVertical()&&a.currentX===a.startX?r.isScrolling=!1:f*f+p*p>=25&&(e=180*Math.atan2(Math.abs(p),Math.abs(f))/Math.PI,r.isScrolling=n.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(r.isScrolling&&n.emit("touchMoveOpposite",u),void 0===r.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(r.startMoving=!0)),r.isScrolling||"touchmove"===u.type&&r.preventTouchMoveFromPointerMove)return void(r.isTouched=!1);if(!r.startMoving)return;n.allowClick=!1,!i.cssMode&&u.cancelable&&u.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&u.stopPropagation();let h=n.isHorizontal()?f:p,m=n.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;i.oneWayMovement&&(h=Math.abs(h)*(l?1:-1),m=Math.abs(m)*(l?1:-1)),a.diff=h,h*=i.touchRatio,l&&(h=-h,m=-m);const g=n.touchesDirection;n.swipeDirection=h>0?"prev":"next",n.touchesDirection=m>0?"prev":"next";const v=n.params.loop&&!i.cssMode,y="next"===n.touchesDirection&&n.allowSlideNext||"prev"===n.touchesDirection&&n.allowSlidePrev;if(!r.isMoved){if(v&&y&&n.loopFix({direction:n.swipeDirection}),r.startTranslate=n.getTranslate(),n.setTransition(0),n.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});n.wrapperEl.dispatchEvent(e)}r.allowMomentumBounce=!1,!i.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",u)}if((new Date).getTime(),!1!==i._loopSwapReset&&r.isMoved&&r.allowThresholdMove&&g!==n.touchesDirection&&v&&y&&Math.abs(h)>=1)return Object.assign(a,{startX:c,startY:d,currentX:c,currentY:d,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,void(r.startTranslate=r.currentTranslate);n.emit("sliderMove",u),r.isMoved=!0,r.currentTranslate=h+r.startTranslate;let b=!0,_=i.resistanceRatio;if(i.touchReleaseOnEdges&&(_=0),h>0?(v&&y&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?n.minTranslate()-n.slidesSizesGrid[n.activeIndex+1]-("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.activeIndex+1]+n.params.spaceBetween:0)-n.params.spaceBetween:n.minTranslate())&&n.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>n.minTranslate()&&(b=!1,i.resistance&&(r.currentTranslate=n.minTranslate()-1+(-n.minTranslate()+r.startTranslate+h)**_))):h<0&&(v&&y&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?n.maxTranslate()+n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween+("auto"!==i.slidesPerView&&n.slides.length-i.slidesPerView>=2?n.slidesSizesGrid[n.slidesSizesGrid.length-1]+n.params.spaceBetween:0):n.maxTranslate())&&n.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:n.slides.length-("auto"===i.slidesPerView?n.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<n.maxTranslate()&&(b=!1,i.resistance&&(r.currentTranslate=n.maxTranslate()+1-(n.maxTranslate()-r.startTranslate-h)**_))),b&&(u.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),n.allowSlidePrev||n.allowSlideNext||(r.currentTranslate=r.startTranslate),i.threshold>0){if(!(Math.abs(h)>i.threshold||r.allowThresholdMove))return void(r.currentTranslate=r.startTranslate);if(!r.allowThresholdMove)return r.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,r.currentTranslate=r.startTranslate,void(a.diff=n.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&n.freeMode||i.watchSlidesProgress)&&(n.updateActiveIndex(),n.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&n.freeMode&&n.freeMode.onTouchMove(),n.updateProgress(r.currentTranslate),n.setTranslate(r.currentTranslate))}function _a(e){const t=this,n=t.touchEventsData;let r,i=e;if(i.originalEvent&&(i=i.originalEvent),"touchend"===i.type||"touchcancel"===i.type){if(r=[...i.changedTouches].find((e=>e.identifier===n.touchId)),!r||r.identifier!==n.touchId)return}else{if(null!==n.touchId)return;if(i.pointerId!==n.pointerId)return;r=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&(!["pointercancel","contextmenu"].includes(i.type)||!t.browser.isSafari&&!t.browser.isWebView))return;n.pointerId=null,n.touchId=null;const{params:a,touches:l,rtlTranslate:o,slidesGrid:s,enabled:u}=t;if(!u)return;if(!a.simulateTouch&&"mouse"===i.pointerType)return;if(n.allowTouchCallbacks&&t.emit("touchEnd",i),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&a.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);a.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const c=Hi(),d=c-n.touchStartTime;if(t.allowClick){const e=i.path||i.composedPath&&i.composedPath();t.updateClickedSlide(e&&e[0]||i.target,e),t.emit("tap click",i),d<300&&c-n.lastClickTime<300&&t.emit("doubleTap doubleClick",i)}if(n.lastClickTime=Hi(),ji((()=>{t.destroyed||(t.allowClick=!0)})),!n.isTouched||!n.isMoved||!t.swipeDirection||0===l.diff&&!n.loopSwapReset||n.currentTranslate===n.startTranslate&&!n.loopSwapReset)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let f;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,f=a.followFinger?o?t.translate:-t.translate:-n.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});const p=f>=-t.maxTranslate()&&!t.params.loop;let h=0,m=t.slidesSizesGrid[0];for(let e=0;e<s.length;e+=e<a.slidesPerGroupSkip?1:a.slidesPerGroup){const t=e<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;void 0!==s[e+t]?(p||f>=s[e]&&f<s[e+t])&&(h=e,m=s[e+t]-s[e]):(p||f>=s[e])&&(h=e,m=s[s.length-1]-s[s.length-2])}let g=null,v=null;a.rewind&&(t.isBeginning?v=a.virtual&&a.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(g=0));const y=(f-s[h])/m,b=h<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(d>a.longSwipesMs){if(!a.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(y>=a.longSwipesRatio?t.slideTo(a.rewind&&t.isEnd?g:h+b):t.slideTo(h)),"prev"===t.swipeDirection&&(y>1-a.longSwipesRatio?t.slideTo(h+b):null!==v&&y<0&&Math.abs(y)>a.longSwipesRatio?t.slideTo(v):t.slideTo(h))}else{if(!a.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||i.target!==t.navigation.nextEl&&i.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==g?g:h+b),"prev"===t.swipeDirection&&t.slideTo(null!==v?v:h)):i.target===t.navigation.nextEl?t.slideTo(h+b):t.slideTo(h)}}function wa(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:a}=e,l=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const o=l&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||o?e.params.loop&&!l?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function Aa(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function Ca(){const e=this,{wrapperEl:t,rtlTranslate:n,enabled:r}=e;if(!r)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const a=e.maxTranslate()-e.minTranslate();i=0===a?0:(e.translate-e.minTranslate())/a,i!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function Sa(e){const t=this;ca(t,e.target),t.params.cssMode||"auto"!==t.params.slidesPerView&&!t.params.autoHeight||t.update()}function xa(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const ka=(e,t)=>{const n=Fi(),{params:r,el:i,wrapperEl:a,device:l}=e,o=!!r.nested,s="on"===t?"addEventListener":"removeEventListener",u=t;i&&"string"!=typeof i&&(n[s]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:o}),i[s]("touchstart",e.onTouchStart,{passive:!1}),i[s]("pointerdown",e.onTouchStart,{passive:!1}),n[s]("touchmove",e.onTouchMove,{passive:!1,capture:o}),n[s]("pointermove",e.onTouchMove,{passive:!1,capture:o}),n[s]("touchend",e.onTouchEnd,{passive:!0}),n[s]("pointerup",e.onTouchEnd,{passive:!0}),n[s]("pointercancel",e.onTouchEnd,{passive:!0}),n[s]("touchcancel",e.onTouchEnd,{passive:!0}),n[s]("pointerout",e.onTouchEnd,{passive:!0}),n[s]("pointerleave",e.onTouchEnd,{passive:!0}),n[s]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[s]("click",e.onClick,!0),r.cssMode&&a[s]("scroll",e.onScroll),r.updateOnWindowResize?e[u](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",wa,!0):e[u]("observerUpdate",wa,!0),i[s]("load",e.onLoad,{capture:!0}))},Ea=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;var Ta={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Pa(e,t){return function(n){void 0===n&&(n={});const r=Object.keys(n)[0],i=n[r];"object"==typeof i&&null!==i?(!0===e[r]&&(e[r]={enabled:!0}),"navigation"===r&&e[r]&&e[r].enabled&&!e[r].prevEl&&!e[r].nextEl&&(e[r].auto=!0),["pagination","scrollbar"].indexOf(r)>=0&&e[r]&&e[r].enabled&&!e[r].el&&(e[r].auto=!0),r in e&&"enabled"in i?("object"!=typeof e[r]||"enabled"in e[r]||(e[r].enabled=!0),e[r]||(e[r]={enabled:!1}),Ui(t,n)):Ui(t,n)):Ui(t,n)}}const Ma={eventsEmitter:oa,update:pa,translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");const{params:t,rtlTranslate:n,translate:r,wrapperEl:i}=this;if(t.virtualTranslate)return n?-r:r;if(t.cssMode)return r;let a=function(e,t){void 0===t&&(t="x");const n=$i();let r,i,a;const l=function(e){const t=$i();let n;return t.getComputedStyle&&(n=t.getComputedStyle(e,null)),!n&&e.currentStyle&&(n=e.currentStyle),n||(n=e.style),n}(e);return n.WebKitCSSMatrix?(i=l.transform||l.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),a=new n.WebKitCSSMatrix("none"===i?"":i)):(a=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=a.toString().split(",")),"x"===t&&(i=n.WebKitCSSMatrix?a.m41:16===r.length?parseFloat(r[12]):parseFloat(r[4])),"y"===t&&(i=n.WebKitCSSMatrix?a.m42:16===r.length?parseFloat(r[13]):parseFloat(r[5])),i||0}(i,e);return a+=this.cssOverflowAdjustment(),n&&(a=-a),a||0},setTranslate:function(e,t){const n=this,{rtlTranslate:r,params:i,wrapperEl:a,progress:l}=n;let o,s=0,u=0;n.isHorizontal()?s=r?-e:e:u=e,i.roundLengths&&(s=Math.floor(s),u=Math.floor(u)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?s:u,i.cssMode?a[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-s:-u:i.virtualTranslate||(n.isHorizontal()?s-=n.cssOverflowAdjustment():u-=n.cssOverflowAdjustment(),a.style.transform=`translate3d(${s}px, ${u}px, 0px)`);const c=n.maxTranslate()-n.minTranslate();o=0===c?0:(e-n.minTranslate())/c,o!==l&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,r,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===r&&(r=!0);const a=this,{params:l,wrapperEl:o}=a;if(a.animating&&l.preventInteractionOnTransition)return!1;const s=a.minTranslate(),u=a.maxTranslate();let c;if(c=r&&e>s?s:r&&e<u?u:e,a.updateProgress(c),l.cssMode){const e=a.isHorizontal();if(0===t)o[e?"scrollLeft":"scrollTop"]=-c;else{if(!a.support.smoothScroll)return qi({swiper:a,targetPosition:-c,side:e?"left":"top"}),!0;o.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(a.setTransition(0),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(c),n&&(a.emit("beforeTransitionStart",t,i),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,a.animating=!1,n&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const n=this;n.params.cssMode||(n.wrapperEl.style.transitionDuration=`${e}ms`,n.wrapperEl.style.transitionDelay=0===e?"0ms":""),n.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;r.cssMode||(r.autoHeight&&n.updateAutoHeight(),ha({swiper:n,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);const n=this,{params:r}=n;n.animating=!1,r.cssMode||(n.setTransition(0),ha({swiper:n,runCallbacks:e,direction:t,step:"End"}))}},slide:ma,loop:ga,grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const n="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),n.style.cursor="move",n.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,{params:t}=e;e.onTouchStart=ya.bind(e),e.onTouchMove=ba.bind(e),e.onTouchEnd=_a.bind(e),e.onDocumentTouchStart=xa.bind(e),t.cssMode&&(e.onScroll=Ca.bind(e)),e.onClick=Aa.bind(e),e.onLoad=Sa.bind(e),ka(e,"on")},detachEvents:function(){ka(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:n,params:r,el:i}=e,a=r.breakpoints;if(!a||a&&0===Object.keys(a).length)return;const l=Fi(),o="window"!==r.breakpointsBase&&r.breakpointsBase?"container":r.breakpointsBase,s=["window","container"].includes(r.breakpointsBase)||!r.breakpointsBase?e.el:l.querySelector(r.breakpointsBase),u=e.getBreakpoint(a,o,s);if(!u||e.currentBreakpoint===u)return;const c=(u in a?a[u]:void 0)||e.originalParams,d=Ea(e,r),f=Ea(e,c),p=e.params.grabCursor,h=c.grabCursor,m=r.enabled;d&&!f?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&f&&(i.classList.add(`${r.containerModifierClass}grid`),(c.grid.fill&&"column"===c.grid.fill||!c.grid.fill&&"column"===r.grid.fill)&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),p&&!h?e.unsetGrabCursor():!p&&h&&e.setGrabCursor(),["navigation","pagination","scrollbar"].forEach((t=>{if(void 0===c[t])return;const n=r[t]&&r[t].enabled,i=c[t]&&c[t].enabled;n&&!i&&e[t].disable(),!n&&i&&e[t].enable()}));const g=c.direction&&c.direction!==r.direction,v=r.loop&&(c.slidesPerView!==r.slidesPerView||g),y=r.loop;g&&n&&e.changeDirection(),Ui(e.params,c);const b=e.params.enabled,_=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),m&&!b?e.disable():!m&&b&&e.enable(),e.currentBreakpoint=u,e.emit("_beforeBreakpoint",c),n&&(v?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!y&&_?(e.loopCreate(t),e.updateSlides()):y&&!_&&e.loopDestroy()),e.emit("breakpoint",c)},getBreakpoint:function(e,t,n){if(void 0===t&&(t="window"),!e||"container"===t&&!n)return;let r=!1;const i=$i(),a="window"===t?i.innerHeight:n.clientHeight,l=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:a*t,point:e}}return{value:e,point:e}}));l.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<l.length;e+=1){const{point:a,value:o}=l[e];"window"===t?i.matchMedia(`(min-width: ${o}px)`).matches&&(r=a):o<=n.clientWidth&&(r=a)}return r||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:n}=e,{slidesOffsetBefore:r}=n;if(r){const t=e.slides.length-1,n=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*r;e.isLocked=e.size>n}else e.isLocked=1===e.snapGrid.length;!0===n.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===n.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:n,rtl:r,el:i,device:a}=e,l=function(e,t){const n=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((r=>{e[r]&&n.push(t+r)})):"string"==typeof e&&n.push(t+e)})),n}(["initialized",n.direction,{"free-mode":e.params.freeMode&&n.freeMode.enabled},{autoheight:n.autoHeight},{rtl:r},{grid:n.grid&&n.grid.rows>1},{"grid-column":n.grid&&n.grid.rows>1&&"column"===n.grid.fill},{android:a.android},{ios:a.ios},{"css-mode":n.cssMode},{centered:n.cssMode&&n.centeredSlides},{"watch-progress":n.watchSlidesProgress}],n.containerModifierClass);t.push(...l),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e&&"string"!=typeof e&&(e.classList.remove(...t),this.emitContainerClasses())}}},za={};class Oa{constructor(){let e,t;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];1===r.length&&r[0].constructor&&"Object"===Object.prototype.toString.call(r[0]).slice(8,-1)?t=r[0]:[e,t]=r,t||(t={}),t=Ui({},t),e&&!t.el&&(t.el=e);const a=Fi();if(t.el&&"string"==typeof t.el&&a.querySelectorAll(t.el).length>1){const e=[];return a.querySelectorAll(t.el).forEach((n=>{const r=Ui({},t,{el:n});e.push(new Oa(r))})),e}const l=this;l.__swiper__=!0,l.support=ia(),l.device=aa({userAgent:t.userAgent}),l.browser=la(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],t.modules&&Array.isArray(t.modules)&&l.modules.push(...t.modules);const o={};l.modules.forEach((e=>{e({params:t,swiper:l,extendParams:Pa(t,o),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})}));const s=Ui({},Ta,o);return l.params=Ui({},s,za,t),l.originalParams=Ui({},l.params),l.passedParams=Ui({},t),l.params&&l.params.on&&Object.keys(l.params.on).forEach((e=>{l.on(e,l.params.on[e])})),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===l.params.direction,isVertical:()=>"vertical"===l.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:n}=this,r=Ki(Wi(t,`.${n.slideClass}, swiper-slide`)[0]);return Ki(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.find((t=>1*t.getAttribute("data-swiper-slide-index")===e)))}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=Wi(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const n=this;e=Math.min(Math.max(e,0),1);const r=n.minTranslate(),i=(n.maxTranslate()-r)*e+r;n.translateTo(i,void 0===t?0:t),n.updateActiveIndex(),n.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((n=>{const r=e.getSlideClasses(n);t.push({slideEl:n,classNames:r}),e.emit("_slideClass",n,r)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);const{params:n,slides:r,slidesGrid:i,slidesSizesGrid:a,size:l,activeIndex:o}=this;let s=1;if("number"==typeof n.slidesPerView)return n.slidesPerView;if(n.centeredSlides){let e,t=r[o]?Math.ceil(r[o].swiperSlideSize):0;for(let n=o+1;n<r.length;n+=1)r[n]&&!e&&(t+=Math.ceil(r[n].swiperSlideSize),s+=1,t>l&&(e=!0));for(let n=o-1;n>=0;n-=1)r[n]&&!e&&(t+=r[n].swiperSlideSize,s+=1,t>l&&(e=!0))}else if("current"===e)for(let e=o+1;e<r.length;e+=1)(t?i[e]+a[e]-i[o]<l:i[e]-i[o]<l)&&(s+=1);else for(let e=o-1;e>=0;e-=1)i[o]-i[e]<l&&(s+=1);return s}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let i;if(n.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&ca(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),n.freeMode&&n.freeMode.enabled&&!n.cssMode)r(),n.autoHeight&&e.updateAutoHeight();else{if(("auto"===n.slidesPerView||n.slidesPerView>1)&&e.isEnd&&!n.centeredSlides){const t=e.virtual&&n.virtual.enabled?e.virtual.slides:e.slides;i=e.slideTo(t.length-1,0,!1,!0)}else i=e.slideTo(e.activeIndex,0,!1,!0);i||r()}n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){void 0===t&&(t=!0);const n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.el.classList.remove(`${n.params.containerModifierClass}${r}`),n.el.classList.add(`${n.params.containerModifierClass}${e}`),n.emitContainerClasses(),n.params.direction=e,n.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),n.emit("changeDirection"),t&&n.update()),n}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let n=e||t.params.el;if("string"==typeof n&&(n=document.querySelector(n)),!n)return!1;n.swiper=t,n.parentNode&&n.parentNode.host&&n.parentNode.host.nodeName===t.params.swiperElementNodeName.toUpperCase()&&(t.isElement=!0);const r=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=n&&n.shadowRoot&&n.shadowRoot.querySelector?n.shadowRoot.querySelector(r()):Wi(n,r())[0];return!i&&t.params.createElements&&(i=Qi("div",t.params.wrapperClass),n.append(i),Wi(n,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:n,wrapperEl:i,slidesEl:t.isElement&&!n.parentNode.host.slideSlots?n.parentNode.host:i,hostEl:t.isElement?n.parentNode.host:n,mounted:!0,rtl:"rtl"===n.dir.toLowerCase()||"rtl"===Xi(n,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===n.dir.toLowerCase()||"rtl"===Xi(n,"direction")),wrongRTL:"-webkit-box"===Xi(i,"display")}),!0}init(e){const t=this;if(t.initialized)return t;if(!1===t.mount(e))return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(void 0,!0),t.attachEvents();const n=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&n.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach((e=>{e.complete?ca(t,e):e.addEventListener("load",(e=>{ca(t,e.target)}))})),fa(t),t.initialized=!0,fa(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const n=this,{params:r,el:i,wrapperEl:a,slides:l}=n;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),i&&"string"!=typeof i&&i.removeAttribute("style"),a&&a.removeAttribute("style"),l&&l.length&&l.forEach((e=>{e.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),n.emit("destroy"),Object.keys(n.eventsListeners).forEach((e=>{n.off(e)})),!1!==e&&(n.el&&"string"!=typeof n.el&&(n.el.swiper=null),function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(n)),n.destroyed=!0),null}static extendDefaults(e){Ui(za,e)}static get extendedDefaults(){return za}static get defaults(){return Ta}static installModule(e){Oa.prototype.__modules__||(Oa.prototype.__modules__=[]);const t=Oa.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>Oa.installModule(e))),Oa):(Oa.installModule(e),Oa)}}Object.keys(Ma).forEach((e=>{Object.keys(Ma[e]).forEach((t=>{Oa.prototype[t]=Ma[e][t]}))})),Oa.use([function(e){let{swiper:t,on:n,emit:r}=e;const i=$i();let a=null,l=null;const o=()=>{t&&!t.destroyed&&t.initialized&&(r("beforeResize"),r("resize"))},s=()=>{t&&!t.destroyed&&t.initialized&&r("orientationchange")};n("init",(()=>{t.params.resizeObserver&&void 0!==i.ResizeObserver?t&&!t.destroyed&&t.initialized&&(a=new ResizeObserver((e=>{l=i.requestAnimationFrame((()=>{const{width:n,height:r}=t;let i=n,a=r;e.forEach((e=>{let{contentBoxSize:n,contentRect:r,target:l}=e;l&&l!==t.el||(i=r?r.width:(n[0]||n).inlineSize,a=r?r.height:(n[0]||n).blockSize)})),i===n&&a===r||o()}))})),a.observe(t.el)):(i.addEventListener("resize",o),i.addEventListener("orientationchange",s))})),n("destroy",(()=>{l&&i.cancelAnimationFrame(l),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null),i.removeEventListener("resize",o),i.removeEventListener("orientationchange",s)}))},function(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a=[],l=$i(),o=function(e,n){void 0===n&&(n={});const r=new(l.MutationObserver||l.WebkitMutationObserver)((e=>{if(t.__preventObserver__)return;if(1===e.length)return void i("observerUpdate",e[0]);const n=function(){i("observerUpdate",e[0])};l.requestAnimationFrame?l.requestAnimationFrame(n):l.setTimeout(n,0)}));r.observe(e,{attributes:void 0===n.attributes||n.attributes,childList:t.isElement||(void 0===n.childList||n).childList,characterData:void 0===n.characterData||n.characterData}),a.push(r)};n({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",(()=>{if(t.params.observer){if(t.params.observeParents){const e=Ji(t.hostEl);for(let t=0;t<e.length;t+=1)o(e[t])}o(t.hostEl,{childList:t.params.observeSlideChildren}),o(t.wrapperEl,{attributes:!1})}})),r("destroy",(()=>{a.forEach((e=>{e.disconnect()})),a.splice(0,a.length)}))}]);const La=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","swiperElementNodeName","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function Na(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)&&!e.__swiper__}function Ia(e,t){const n=["__proto__","constructor","prototype"];Object.keys(t).filter((e=>n.indexOf(e)<0)).forEach((n=>{void 0===e[n]?e[n]=t[n]:Na(t[n])&&Na(e[n])&&Object.keys(t[n]).length>0?t[n].__swiper__?e[n]=t[n]:Ia(e[n],t[n]):e[n]=t[n]}))}function Da(e){return void 0===e&&(e={}),e.navigation&&void 0===e.navigation.nextEl&&void 0===e.navigation.prevEl}function Ba(e){return void 0===e&&(e={}),e.pagination&&void 0===e.pagination.el}function Fa(e){return void 0===e&&(e={}),e.scrollbar&&void 0===e.scrollbar.el}function Ra(e){void 0===e&&(e="");const t=e.split(" ").map((e=>e.trim())).filter((e=>!!e)),n=[];return t.forEach((e=>{n.indexOf(e)<0&&n.push(e)})),n.join(" ")}function $a(e){return void 0===e&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function ja(){return ja=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ja.apply(this,arguments)}function Ha(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function Va(e){const t=[];return r.Children.toArray(e).forEach((e=>{Ha(e)?t.push(e):e.props&&e.props.children&&Va(e.props.children).forEach((e=>t.push(e)))})),t}function Ua(e){const t=[],n={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return r.Children.toArray(e).forEach((e=>{if(Ha(e))t.push(e);else if(e.props&&e.props.slot&&n[e.props.slot])n[e.props.slot].push(e);else if(e.props&&e.props.children){const r=Va(e.props.children);r.length>0?r.forEach((e=>t.push(e))):n["container-end"].push(e)}else n["container-end"].push(e)})),{slides:t,slots:n}}function Ga(e,t){return"undefined"==typeof window?(0,r.useEffect)(e,t):(0,r.useLayoutEffect)(e,t)}const qa=(0,r.createContext)(null),Wa=(0,r.createContext)(null),Ya=(0,r.forwardRef)((function(e,t){let{className:n,tag:i="div",wrapperTag:a="div",children:l,onSwiper:o,...s}=void 0===e?{}:e,u=!1;const[c,d]=(0,r.useState)("swiper"),[f,p]=(0,r.useState)(null),[h,m]=(0,r.useState)(!1),g=(0,r.useRef)(!1),v=(0,r.useRef)(null),y=(0,r.useRef)(null),b=(0,r.useRef)(null),_=(0,r.useRef)(null),w=(0,r.useRef)(null),A=(0,r.useRef)(null),C=(0,r.useRef)(null),S=(0,r.useRef)(null),{params:x,passedParams:k,rest:E,events:T}=function(e,t){void 0===e&&(e={}),void 0===t&&(t=!0);const n={on:{}},r={},i={};Ia(n,Ta),n._emitClasses=!0,n.init=!1;const a={},l=La.map((e=>e.replace(/_/,""))),o=Object.assign({},e);return Object.keys(o).forEach((o=>{void 0!==e[o]&&(l.indexOf(o)>=0?Na(e[o])?(n[o]={},i[o]={},Ia(n[o],e[o]),Ia(i[o],e[o])):(n[o]=e[o],i[o]=e[o]):0===o.search(/on[A-Z]/)&&"function"==typeof e[o]?t?r[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:n.on[`${o[2].toLowerCase()}${o.substr(3)}`]=e[o]:a[o]=e[o])})),["navigation","pagination","scrollbar"].forEach((e=>{!0===n[e]&&(n[e]={}),!1===n[e]&&delete n[e]})),{params:n,passedParams:i,rest:a,events:r}}(s),{slides:P,slots:M}=Ua(l),z=()=>{m(!h)};Object.assign(x.on,{_containerClasses(e,t){d(t)}});const O=()=>{Object.assign(x.on,T),u=!0;const e={...x};if(delete e.wrapperClass,y.current=new Oa(e),y.current.virtual&&y.current.params.virtual.enabled){y.current.virtual.slides=P;const e={cache:!1,slides:P,renderExternal:p,renderExternalUpdate:!1};Ia(y.current.params.virtual,e),Ia(y.current.originalParams.virtual,e)}};return v.current||O(),y.current&&y.current.on("_beforeBreakpoint",z),(0,r.useEffect)((()=>()=>{y.current&&y.current.off("_beforeBreakpoint",z)})),(0,r.useEffect)((()=>{!g.current&&y.current&&(y.current.emitSlidesClasses(),g.current=!0)})),Ga((()=>{if(t&&(t.current=v.current),v.current)return y.current.destroyed&&O(),function(e,t){let{el:n,nextEl:r,prevEl:i,paginationEl:a,scrollbarEl:l,swiper:o}=e;Da(t)&&r&&i&&(o.params.navigation.nextEl=r,o.originalParams.navigation.nextEl=r,o.params.navigation.prevEl=i,o.originalParams.navigation.prevEl=i),Ba(t)&&a&&(o.params.pagination.el=a,o.originalParams.pagination.el=a),Fa(t)&&l&&(o.params.scrollbar.el=l,o.originalParams.scrollbar.el=l),o.init(n)}({el:v.current,nextEl:w.current,prevEl:A.current,paginationEl:C.current,scrollbarEl:S.current,swiper:y.current},x),o&&!y.current.destroyed&&o(y.current),()=>{y.current&&!y.current.destroyed&&y.current.destroy(!0,!1)}}),[]),Ga((()=>{!u&&T&&y.current&&Object.keys(T).forEach((e=>{y.current.on(e,T[e])}));const e=function(e,t,n,r,i){const a=[];if(!t)return a;const l=e=>{a.indexOf(e)<0&&a.push(e)};if(n&&r){const e=r.map(i),t=n.map(i);e.join("")!==t.join("")&&l("children"),r.length!==n.length&&l("children")}return La.filter((e=>"_"===e[0])).map((e=>e.replace(/_/,""))).forEach((n=>{if(n in e&&n in t)if(Na(e[n])&&Na(t[n])){const r=Object.keys(e[n]),i=Object.keys(t[n]);r.length!==i.length?l(n):(r.forEach((r=>{e[n][r]!==t[n][r]&&l(n)})),i.forEach((r=>{e[n][r]!==t[n][r]&&l(n)})))}else e[n]!==t[n]&&l(n)})),a}(k,b.current,P,_.current,(e=>e.key));return b.current=k,_.current=P,e.length&&y.current&&!y.current.destroyed&&function(e){let{swiper:t,slides:n,passedParams:r,changedParams:i,nextEl:a,prevEl:l,scrollbarEl:o,paginationEl:s}=e;const u=i.filter((e=>"children"!==e&&"direction"!==e&&"wrapperClass"!==e)),{params:c,pagination:d,navigation:f,scrollbar:p,virtual:h,thumbs:m}=t;let g,v,y,b,_,w,A,C;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&!r.thumbs.swiper.destroyed&&c.thumbs&&(!c.thumbs.swiper||c.thumbs.swiper.destroyed)&&(g=!0),i.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(v=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||s)&&(c.pagination||!1===c.pagination)&&d&&!d.el&&(y=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||o)&&(c.scrollbar||!1===c.scrollbar)&&p&&!p.el&&(b=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||l)&&(r.navigation.nextEl||a)&&(c.navigation||!1===c.navigation)&&f&&!f.prevEl&&!f.nextEl&&(_=!0);const S=e=>{t[e]&&(t[e].destroy(),"navigation"===e?(t.isElement&&(t[e].prevEl.remove(),t[e].nextEl.remove()),c[e].prevEl=void 0,c[e].nextEl=void 0,t[e].prevEl=void 0,t[e].nextEl=void 0):(t.isElement&&t[e].el.remove(),c[e].el=void 0,t[e].el=void 0))};i.includes("loop")&&t.isElement&&(c.loop&&!r.loop?w=!0:!c.loop&&r.loop?A=!0:C=!0),u.forEach((e=>{if(Na(c[e])&&Na(r[e]))Object.assign(c[e],r[e]),"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e||!("enabled"in r[e])||r[e].enabled||S(e);else{const t=r[e];!0!==t&&!1!==t||"navigation"!==e&&"pagination"!==e&&"scrollbar"!==e?c[e]=r[e]:!1===t&&S(e)}})),u.includes("controller")&&!v&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),i.includes("children")&&n&&h&&c.virtual.enabled?(h.slides=n,h.update(!0)):i.includes("virtual")&&h&&c.virtual.enabled&&(n&&(h.slides=n),h.update(!0)),i.includes("children")&&n&&c.loop&&(C=!0),g&&m.init()&&m.update(!0),v&&(t.controller.control=c.controller.control),y&&(!t.isElement||s&&"string"!=typeof s||(s=document.createElement("div"),s.classList.add("swiper-pagination"),s.part.add("pagination"),t.el.appendChild(s)),s&&(c.pagination.el=s),d.init(),d.render(),d.update()),b&&(!t.isElement||o&&"string"!=typeof o||(o=document.createElement("div"),o.classList.add("swiper-scrollbar"),o.part.add("scrollbar"),t.el.appendChild(o)),o&&(c.scrollbar.el=o),p.init(),p.updateSize(),p.setTranslate()),_&&(t.isElement&&(a&&"string"!=typeof a||(a=document.createElement("div"),a.classList.add("swiper-button-next"),a.innerHTML=t.hostEl.constructor.nextButtonSvg,a.part.add("button-next"),t.el.appendChild(a)),l&&"string"!=typeof l||(l=document.createElement("div"),l.classList.add("swiper-button-prev"),l.innerHTML=t.hostEl.constructor.prevButtonSvg,l.part.add("button-prev"),t.el.appendChild(l))),a&&(c.navigation.nextEl=a),l&&(c.navigation.prevEl=l),f.init(),f.update()),i.includes("allowSlideNext")&&(t.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(t.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&t.changeDirection(r.direction,!1),(w||C)&&t.loopDestroy(),(A||C)&&t.loopCreate(),t.update()}({swiper:y.current,slides:P,passedParams:k,changedParams:e,nextEl:w.current,prevEl:A.current,scrollbarEl:S.current,paginationEl:C.current}),()=>{T&&y.current&&Object.keys(T).forEach((e=>{y.current.off(e,T[e])}))}})),Ga((()=>{var e;!(e=y.current)||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())}),[f]),r.createElement(i,ja({ref:v,className:Ra(`${c}${n?` ${n}`:""}`)},E),r.createElement(Wa.Provider,{value:y.current},M["container-start"],r.createElement(a,{className:$a(x.wrapperClass)},M["wrapper-start"],x.virtual?function(e,t,n){if(!n)return null;const i=e=>{let n=e;return e<0?n=t.length+e:n>=t.length&&(n-=t.length),n},a=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${n.offset}px`}:{top:`${n.offset}px`},{from:l,to:o}=n,s=e.params.loop?-t.length:0,u=e.params.loop?2*t.length:t.length,c=[];for(let e=s;e<u;e+=1)e>=l&&e<=o&&c.push(t[i(e)]);return c.map(((t,n)=>r.cloneElement(t,{swiper:e,style:a,key:t.props.virtualIndex||t.key||`slide-${n}`})))}(y.current,P,f):P.map(((e,t)=>r.cloneElement(e,{swiper:y.current,swiperSlideIndex:t}))),M["wrapper-end"]),Da(x)&&r.createElement(r.Fragment,null,r.createElement("div",{ref:A,className:"swiper-button-prev"}),r.createElement("div",{ref:w,className:"swiper-button-next"})),Fa(x)&&r.createElement("div",{ref:S,className:"swiper-scrollbar"}),Ba(x)&&r.createElement("div",{ref:C,className:"swiper-pagination"}),M["container-end"]))}));Ya.displayName="Swiper";const Qa=(0,r.forwardRef)((function(e,t){let{tag:n="div",children:i,className:a="",swiper:l,zoom:o,lazy:s,virtualIndex:u,swiperSlideIndex:c,...d}=void 0===e?{}:e;const f=(0,r.useRef)(null),[p,h]=(0,r.useState)("swiper-slide"),[m,g]=(0,r.useState)(!1);function v(e,t,n){t===f.current&&h(n)}Ga((()=>{if(void 0!==c&&(f.current.swiperSlideIndex=c),t&&(t.current=f.current),f.current&&l){if(!l.destroyed)return l.on("_slideClass",v),()=>{l&&l.off("_slideClass",v)};"swiper-slide"!==p&&h("swiper-slide")}})),Ga((()=>{l&&f.current&&!l.destroyed&&h(l.getSlideClasses(f.current))}),[l]);const y={isActive:p.indexOf("swiper-slide-active")>=0,isVisible:p.indexOf("swiper-slide-visible")>=0,isPrev:p.indexOf("swiper-slide-prev")>=0,isNext:p.indexOf("swiper-slide-next")>=0},b=()=>"function"==typeof i?i(y):i;return r.createElement(n,ja({ref:f,className:Ra(`${p}${a?` ${a}`:""}`),"data-swiper-slide-index":u,onLoad:()=>{g(!0)}},d),o&&r.createElement(qa.Provider,{value:y},r.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":"number"==typeof o?o:void 0},b(),s&&!m&&r.createElement("div",{className:"swiper-lazy-preloader"}))),!o&&r.createElement(qa.Provider,{value:y},b(),s&&!m&&r.createElement("div",{className:"swiper-lazy-preloader"})))}));function Xa(e){return void 0===e&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Ka(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const a="swiper-pagination";let l;n({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let o=0;function s(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&0===t.pagination.el.length}function u(e,n){const{bulletActiveClass:r}=t.params.pagination;e&&(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&(e.classList.add(`${r}-${n}`),(e=e[("prev"===n?"previous":"next")+"ElementSibling"])&&e.classList.add(`${r}-${n}-${n}`))}function c(e){const n=e.target.closest(Xa(t.params.pagination.bulletClass));if(!n)return;e.preventDefault();const r=Ki(n)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===r)return;const e=(i=t.realIndex,a=r,(a%=l=t.slides.length)==1+(i%=l)?"next":a===i-1?"previous":void 0);"next"===e?t.slideNext():"previous"===e?t.slidePrev():t.slideToLoop(r)}else t.slideTo(r);var i,a,l}function d(){const e=t.rtl,n=t.params.pagination;if(s())return;let r,a,c=t.pagination.el;c=ea(c);const d=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,f=t.params.loop?Math.ceil(d/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(a=t.previousRealIndex||0,r=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):void 0!==t.snapIndex?(r=t.snapIndex,a=t.previousSnapIndex):(a=t.previousIndex||0,r=t.activeIndex||0),"bullets"===n.type&&t.pagination.bullets&&t.pagination.bullets.length>0){const i=t.pagination.bullets;let s,d,f;if(n.dynamicBullets&&(l=Zi(i[0],t.isHorizontal()?"width":"height",!0),c.forEach((e=>{e.style[t.isHorizontal()?"width":"height"]=l*(n.dynamicMainBullets+4)+"px"})),n.dynamicMainBullets>1&&void 0!==a&&(o+=r-(a||0),o>n.dynamicMainBullets-1?o=n.dynamicMainBullets-1:o<0&&(o=0)),s=Math.max(r-o,0),d=s+(Math.min(i.length,n.dynamicMainBullets)-1),f=(d+s)/2),i.forEach((e=>{const t=[...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${n.bulletActiveClass}${e}`))].map((e=>"string"==typeof e&&e.includes(" ")?e.split(" "):e)).flat();e.classList.remove(...t)})),c.length>1)i.forEach((e=>{const i=Ki(e);i===r?e.classList.add(...n.bulletActiveClass.split(" ")):t.isElement&&e.setAttribute("part","bullet"),n.dynamicBullets&&(i>=s&&i<=d&&e.classList.add(...`${n.bulletActiveClass}-main`.split(" ")),i===s&&u(e,"prev"),i===d&&u(e,"next"))}));else{const e=i[r];if(e&&e.classList.add(...n.bulletActiveClass.split(" ")),t.isElement&&i.forEach(((e,t)=>{e.setAttribute("part",t===r?"bullet-active":"bullet")})),n.dynamicBullets){const e=i[s],t=i[d];for(let e=s;e<=d;e+=1)i[e]&&i[e].classList.add(...`${n.bulletActiveClass}-main`.split(" "));u(e,"prev"),u(t,"next")}}if(n.dynamicBullets){const r=Math.min(i.length,n.dynamicMainBullets+4),a=(l*r-l)/2-f*l,o=e?"right":"left";i.forEach((e=>{e.style[t.isHorizontal()?o:"top"]=`${a}px`}))}}c.forEach(((e,a)=>{if("fraction"===n.type&&(e.querySelectorAll(Xa(n.currentClass)).forEach((e=>{e.textContent=n.formatFractionCurrent(r+1)})),e.querySelectorAll(Xa(n.totalClass)).forEach((e=>{e.textContent=n.formatFractionTotal(f)}))),"progressbar"===n.type){let i;i=n.progressbarOpposite?t.isHorizontal()?"vertical":"horizontal":t.isHorizontal()?"horizontal":"vertical";const a=(r+1)/f;let l=1,o=1;"horizontal"===i?l=a:o=a,e.querySelectorAll(Xa(n.progressbarFillClass)).forEach((e=>{e.style.transform=`translate3d(0,0,0) scaleX(${l}) scaleY(${o})`,e.style.transitionDuration=`${t.params.speed}ms`}))}"custom"===n.type&&n.renderCustom?(e.innerHTML=n.renderCustom(t,r+1,f),0===a&&i("paginationRender",e)):(0===a&&i("paginationRender",e),i("paginationUpdate",e)),t.params.watchOverflow&&t.enabled&&e.classList[t.isLocked?"add":"remove"](n.lockClass)}))}function f(){const e=t.params.pagination;if(s())return;const n=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let r=t.pagination.el;r=ea(r);let a="";if("bullets"===e.type){let r=t.params.loop?Math.ceil(n/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&r>n&&(r=n);for(let n=0;n<r;n+=1)e.renderBullet?a+=e.renderBullet.call(t,n,e.bulletClass):a+=`<${e.bulletElement} ${t.isElement?'part="bullet"':""} class="${e.bulletClass}"></${e.bulletElement}>`}"fraction"===e.type&&(a=e.renderFraction?e.renderFraction.call(t,e.currentClass,e.totalClass):`<span class="${e.currentClass}"></span> / <span class="${e.totalClass}"></span>`),"progressbar"===e.type&&(a=e.renderProgressbar?e.renderProgressbar.call(t,e.progressbarFillClass):`<span class="${e.progressbarFillClass}"></span>`),t.pagination.bullets=[],r.forEach((n=>{"custom"!==e.type&&(n.innerHTML=a||""),"bullets"===e.type&&t.pagination.bullets.push(...n.querySelectorAll(Xa(e.bulletClass)))})),"custom"!==e.type&&i("paginationRender",r[0])}function p(){t.params.pagination=function(e,t,n,r){return e.params.createElements&&Object.keys(r).forEach((i=>{if(!n[i]&&!0===n.auto){let a=Wi(e.el,`.${r[i]}`)[0];a||(a=Qi("div",r[i]),a.className=r[i],e.el.append(a)),n[i]=a,t[i]=a}})),n}(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const e=t.params.pagination;if(!e.el)return;let n;"string"==typeof e.el&&t.isElement&&(n=t.el.querySelector(e.el)),n||"string"!=typeof e.el||(n=[...document.querySelectorAll(e.el)]),n||(n=e.el),n&&0!==n.length&&(t.params.uniqueNavElements&&"string"==typeof e.el&&Array.isArray(n)&&n.length>1&&(n=[...t.el.querySelectorAll(e.el)],n.length>1&&(n=n.find((e=>Ji(e,".swiper")[0]===t.el)))),Array.isArray(n)&&1===n.length&&(n=n[0]),Object.assign(t.pagination,{el:n}),n=ea(n),n.forEach((n=>{"bullets"===e.type&&e.clickable&&n.classList.add(...(e.clickableClass||"").split(" ")),n.classList.add(e.modifierClass+e.type),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass),"bullets"===e.type&&e.dynamicBullets&&(n.classList.add(`${e.modifierClass}${e.type}-dynamic`),o=0,e.dynamicMainBullets<1&&(e.dynamicMainBullets=1)),"progressbar"===e.type&&e.progressbarOpposite&&n.classList.add(e.progressbarOppositeClass),e.clickable&&n.addEventListener("click",c),t.enabled||n.classList.add(e.lockClass)})))}function h(){const e=t.params.pagination;if(s())return;let n=t.pagination.el;n&&(n=ea(n),n.forEach((n=>{n.classList.remove(e.hiddenClass),n.classList.remove(e.modifierClass+e.type),n.classList.remove(t.isHorizontal()?e.horizontalClass:e.verticalClass),e.clickable&&(n.classList.remove(...(e.clickableClass||"").split(" ")),n.removeEventListener("click",c))}))),t.pagination.bullets&&t.pagination.bullets.forEach((t=>t.classList.remove(...e.bulletActiveClass.split(" "))))}r("changeDirection",(()=>{if(!t.pagination||!t.pagination.el)return;const e=t.params.pagination;let{el:n}=t.pagination;n=ea(n),n.forEach((n=>{n.classList.remove(e.horizontalClass,e.verticalClass),n.classList.add(t.isHorizontal()?e.horizontalClass:e.verticalClass)}))})),r("init",(()=>{!1===t.params.pagination.enabled?m():(p(),f(),d())})),r("activeIndexChange",(()=>{void 0===t.snapIndex&&d()})),r("snapIndexChange",(()=>{d()})),r("snapGridLengthChange",(()=>{f(),d()})),r("destroy",(()=>{h()})),r("enable disable",(()=>{let{el:e}=t.pagination;e&&(e=ea(e),e.forEach((e=>e.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass))))})),r("lock unlock",(()=>{d()})),r("click",((e,n)=>{const r=n.target,a=ea(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&a&&a.length>0&&!r.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&r===t.navigation.nextEl||t.navigation.prevEl&&r===t.navigation.prevEl))return;const e=a[0].classList.contains(t.params.pagination.hiddenClass);i(!0===e?"paginationShow":"paginationHide"),a.forEach((e=>e.classList.toggle(t.params.pagination.hiddenClass)))}}));const m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=ea(e),e.forEach((e=>e.classList.add(t.params.pagination.paginationDisabledClass)))),h()};Object.assign(t.pagination,{enable:()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:e}=t.pagination;e&&(e=ea(e),e.forEach((e=>e.classList.remove(t.params.pagination.paginationDisabledClass)))),p(),f(),d()},disable:m,render:f,update:d,init:p,destroy:h})}Qa.displayName="SwiperSlide";const Ja=function({currentTheme:t}){return(0,e.jsx)("div",{className:Ni.themeTitle,children:(0,e.jsx)("h3",{children:t.title})})},Za=function({themeId:t}){const i=(0,r.useRef)(null),a=(0,r.useRef)(null),[l,o]=(0,r.useState)(!0),[s,u]=(0,r.useState)(!1),[c,d]=(0,r.useState)(yi[0]),f=hi.timeline(),[p,h]=(0,r.useState)([]),m=e=>{o(e.isBeginning),u(e.isEnd)};return(0,r.useEffect)((()=>(f.to(a.current,{opacity:0,duration:.5,onComplete:()=>{h(bi.filter((e=>e.theme===t))),d(yi.find((e=>e.id===t))),setTimeout((()=>{i.current.swiper.slideTo(0),m(i.current.swiper)}),1)}}).to(a.current,{top:20}).to(a.current,{top:0,opacity:1,duration:.4,delay:.5}),()=>{f.kill()})),[t]),(0,e.jsxs)("div",{ref:a,className:Ni.sliderContainer,children:[(0,e.jsx)(Ja,{currentTheme:c}),(0,e.jsx)("button",{className:`\n        ${Ni.slideButton} \n        ${l?Ni["slideButton--disabled"]:""}\n      `,onClick:()=>{var e;return null===(e=i.current)||void 0===e?void 0:e.swiper.slidePrev()},children:(0,e.jsx)("img",{src:n(320),alt:""})}),(0,e.jsx)(Ya,{ref:i,className:Ni.swiper,modules:[Ka],spaceBetween:20,slidesPerView:2,slidesOffsetBefore:32,slidesOffsetAfter:32,breakpoints:{720:{slidesPerView:3,slidesOffsetBefore:0,slidesOffsetAfter:0,spaceBetween:50}},onSlideChange:m,onInit:m,children:p.map((t=>(0,e.jsxs)(Qa,{className:Ni.swiperSlide,children:[(0,e.jsx)("p",{className:Ni.date,children:t.year}),(0,e.jsx)("p",{className:Ni.text,children:t.content})]},t.id)))}),(0,e.jsx)("button",{className:`\n        ${Ni.slideButton} \n        ${s?Ni["slideButton--disabled"]:""}\n      `,onClick:()=>{var e;return null===(e=i.current)||void 0===e?void 0:e.swiper.slideNext()},children:(0,e.jsx)("img",{src:n(543),alt:""})})]})},el=function(){const[t,n]=(0,r.useState)(1);return(0,e.jsxs)("div",{className:y.historyBlock,children:[(0,e.jsx)(A,{}),(0,e.jsx)(zi,{activePoint:t,setActivePoint:n}),(0,e.jsx)(Za,{themeId:t})]})};(0,t.createRoot)(document.getElementById("root")).render((0,e.jsx)((function(){return(0,e.jsx)("div",{className:"global-container",children:(0,e.jsx)(el,{})})}),{}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,